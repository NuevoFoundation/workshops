<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java: TicTacToe on Nuevo Foundation Workshops</title><link>https://nuevofoundation.github.io/workshops/java-tictactoe/</link><description>Recent content in Java: TicTacToe on Nuevo Foundation Workshops</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nuevofoundation.github.io/workshops/java-tictactoe/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://nuevofoundation.github.io/workshops/java-tictactoe/using-repl-it/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-tictactoe/using-repl-it/</guid><description>Tic Tac Toe Summary Using Replit Today you will be using Replit to learn how to code in Java. Before starting, you will need to sign up for a Replit account, if you do not yet have one.
Click the button below to sign up for a Replit account - you will need an email account in order to sign up. If you already have a Replit account, you can login to your account using the below button as well.</description></item><item><title>1. Set Up the Board!</title><link>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-1/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-1/</guid><description>In this activity, we will have a program that prints out the game board and gaming prompt, like the output below:
&amp;lt;&amp;lt;&amp;lt;~ Tic Tac Toe ~&amp;gt;&amp;gt;&amp;gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' 1 | 2 | 3 ---+---+--- 4 | 5 | 6 ---+---+--- 7 | 8 | 9 Enter your move (1-9): 2 O | X | ---+---+--- | | ---+---+--- | | Enter your move (1-9): The Main Class and Main Method Notice that in the starter code, we have the class Main and the main() method.</description></item><item><title>2. Read and Process Input</title><link>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-2/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-2/</guid><description>Importing Packages In Java, an efficient way to obtain user input is to use the Scanner class in java.util package. To use this class and all its methods, we need to import the class with the following line of code on the top of the file.
import java.util.Scanner; Using the Scanner Class In main(), we need to first create a Scanner object called sc by calling its constructor (shown below).</description></item><item><title>3. Update the Game Board</title><link>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-3/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-3/</guid><description>In the last exercise, we have a program that prints out the board and prompt Enter your move (1-9): to user with each valid move. However, the board stayed empty (shown below). In this exercise, we will learn how to update board and generate a random move for the computer.
&amp;lt;&amp;lt;&amp;lt;~ Tic Tac Toe ~&amp;gt;&amp;gt;&amp;gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' 1 | 2 | 3 ---+---+--- 4 | 5 | 6 ---+---+--- 7 | 8 | 9 Enter your move (1-9): 1 | | ---+---+--- | | &amp;lt;--------------- The board doesn't have the player/computer moves ---+---+--- | | Enter your move (1-9): d Invalid Input; re-enter your move (1-9): 3 | | ---+---+--- | | &amp;lt;--------------- The board doesn't have the player/computer moves ---+---+--- | | Enter your move (1-9): Displaying User Moves Inside the hasNextInt() if statement, before the method call printBoard(board), update the board array with user&amp;rsquo;s input at the corresponding index.</description></item><item><title>4. Check the winner</title><link>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-4/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-4/</guid><description>Displaying a Winner Write a method getWinner(String[] curBoard) that returns the winner in a String with an array input of the current game board.
If the player wins, return &amp;quot;Congratulations! \nYou won the Game :)&amp;quot;. If the computer wins, return &amp;quot;Game Over! \nYou lost the Game :(&amp;quot;. If there&amp;rsquo;s a tie, return &amp;quot;It's a TIE! Try again&amp;quot;. If there isn&amp;rsquo;t a winner yet, return &amp;quot;&amp;quot;. There are several ways to write this method.</description></item><item><title>5. (Optional) AI Move</title><link>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-5/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-tictactoe/activity-5/</guid><description>Let&amp;rsquo;s make the computer think Previously, we used a Random object to randomly generate a move for the computer. As a result, the competitiveness of the computer is fairly low.
In this exercise, we want to increase the difficulty of the game by making optimal decisions for the computer.
We will do so by adding artificial intelligence into our program with the use of the Minimax algorithm (a well-defined procedure that allows computers to solve problems).</description></item><item><title>Java: TicTacToe - Answer Key</title><link>https://nuevofoundation.github.io/workshops/java-tictactoe/answer-key/</link><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-tictactoe/answer-key/</guid><description>activity-1: Game SetUp public class TicTacToe_Nuevo { public static void main(String args[]){ // the board that stores moves String[] board = {&amp;#34; &amp;#34;, &amp;#34; &amp;#34;, &amp;#34; &amp;#34;, &amp;#34; &amp;#34;, &amp;#34; &amp;#34;, &amp;#34; &amp;#34;, &amp;#34; &amp;#34;, &amp;#34; &amp;#34;, &amp;#34; &amp;#34;}; // starting board that labeled position(only printed once) String[] startBoard = {&amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;5&amp;#34;, &amp;#34;6&amp;#34;, &amp;#34;7&amp;#34;, &amp;#34;8&amp;#34;, &amp;#34;9&amp;#34;}; System.out.println(&amp;#34;&amp;lt;&amp;lt;&amp;lt;~ Tic Tac Toe ~&amp;gt;&amp;gt;&amp;gt;\n* Choose number 1 - 9 to place your move\n* Player: &amp;#39;X&amp;#39; Computer: &amp;#39;O&amp;#39;\n&amp;#34; ); printBoard(startBoard); System.</description></item></channel></rss>