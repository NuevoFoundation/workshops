<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unity: Top-Down Nuvi Space Game on Nuevo Foundation Workshops</title><link>https://nuevofoundation.github.io/workshops/unity/</link><description>Recent content in Unity: Top-Down Nuvi Space Game on Nuevo Foundation Workshops</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 06 Oct 2021 11:45:38 -0700</lastBuildDate><atom:link href="https://nuevofoundation.github.io/workshops/unity/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing Unity</title><link>https://nuevofoundation.github.io/workshops/unity/install-unity/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/install-unity/</guid><description>We need to help Nuvi defeat the aliens, but programming everything from scratch might be a bit too much right now. Unity is a tool that has some basic parts of game-building simplified for us, so all we need to do is drag and drop objects, and write a bit of simple C# code!
Why use Unity when there are other tools out there? Well, Unity has some great aspects, especially if you&amp;rsquo;re just starting your game development journey.</description></item><item><title>Understanding the Unity Interface</title><link>https://nuevofoundation.github.io/workshops/unity/understanding-unity-interface/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/understanding-unity-interface/</guid><description>Before you start working on our game, take some time to look at Unity&amp;rsquo;s interface and familiarize yourself with the windows. You can move these windows around to customize your workspace layout. If you get stuck in a weird layout, you can always go back to the default layout by doing: Windows -&amp;gt; Layouts -&amp;gt; Default.
Game This window shows what the camera is seeing - in other words, it&amp;rsquo;s what you&amp;rsquo;re going to see displayed when you run and play the game.</description></item><item><title>Scripts Explained</title><link>https://nuevofoundation.github.io/workshops/unity/scripts-explained/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/scripts-explained/</guid><description>Before we begin with making Nuvi move, let&amp;rsquo;s first explain the structure of a Unity script. There are many ways to make Nuvi move within Unity, and one way to do this is to add a Script component onto Nuvi. A Script component is a component that you can make on your own from scratch.
An empty Unity Script will look like this:
using System.Collections; using System.Collections.Generic; using UnityEngine; public class EmptyScript : MonoBehaviour { void Start() { } void Update() { } } Each new script will have the first 3 lines that start with using.</description></item><item><title>Making Nuvi Move</title><link>https://nuevofoundation.github.io/workshops/unity/making-nuvi-move/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/making-nuvi-move/</guid><description>Now that we know what a Script looks like, let&amp;rsquo;s actually make one.
First, we want to create a new folder called &amp;ldquo;Scripts&amp;rdquo; in Assets under the Project window, similar to the Drawings folder. We will do this because it is better practice to have all the scripts in an easy to access place. Double click the Scripts folder and create a script by right clicking and selecting &amp;ldquo;C# Script.&amp;rdquo; You can also go under the &amp;ldquo;Assets&amp;rdquo; tab and choose &amp;ldquo;Create -&amp;gt; C# Script&amp;rdquo; as shown below.</description></item><item><title>Colliders</title><link>https://nuevofoundation.github.io/workshops/unity/colliders/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/colliders/</guid><description>The reason Nuvi runs off is because there are no colliders to stop them.
Colliders allow two objects to touch each other.
So, let&amp;rsquo;s use colliders to add invisible walls around our arena. Head over to the Hierarchy window and right-click, then choose &amp;ldquo;Create Empty&amp;rdquo;. Name this empty object &amp;ldquo;Walls&amp;rdquo;.
Then, right-click the &amp;ldquo;Walls&amp;rdquo; object you just made, and this time choose &amp;ldquo;3D Object -&amp;gt; Cube&amp;rdquo;. Resize the cube into a rectangular shape so it covers a side of the screen like below:</description></item><item><title>Setting up the Enemies</title><link>https://nuevofoundation.github.io/workshops/unity/setting-up-enemies/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/setting-up-enemies/</guid><description>Now that Nuvi is all set and ready to move, let&amp;rsquo;s have them welcome aliens into the universe! Locate the alien png file called &amp;ldquo;alien_pink&amp;rdquo; from the Drawings folder. Then, drag and drop the alien_pink into the hierarchy. Rescale the enemy to match Nuvi&amp;rsquo;s size as it is too large.
Now, if we were to run the game, Nuvi runs on top of the pink alien. We want Nuvi to collide with it.</description></item><item><title>Setting up the Projectile and Making it a Prefab</title><link>https://nuevofoundation.github.io/workshops/unity/setup-projectile-and-prefab/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/setup-projectile-and-prefab/</guid><description>Oh no! The pink alien is attacking now! It&amp;rsquo;s mad because Nuvi ran over it. Let&amp;rsquo;s set Nuvi up with a self-defense mechanism.
After selecting Nuvi in the hierarchy, right click and select &amp;ldquo;Create Empty&amp;rdquo;, which creates an empty GameObject with only a Transform component.
To be able to see where our empty object is, make sure we are on the Move tool! You should see two intersecting arrows — where they intersect is where our empty GameObject is located.</description></item><item><title>Firing</title><link>https://nuevofoundation.github.io/workshops/unity/firing/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/firing/</guid><description>Now that the projectile is all set up, let&amp;rsquo;s get Nuvi firing those projectiles. Make a script called &amp;ldquo;FiringBehavior&amp;rdquo;, then copy and paste this code:
using System.Collections; using System.Collections.Generic; using UnityEngine; public class FiringBehavior : MonoBehaviour { public Transform spawn_coor; //where the projectile will spawn public float projectile_speed; //how fast projectile will go public GameObject projectile_object; //red projectile sprite // Start is called before the first frame update void Start() { projectile_speed = 15f; } // Update is called once per frame void Update() { if(Input.</description></item><item><title>Triggers and Tags</title><link>https://nuevofoundation.github.io/workshops/unity/triggers-and-tags/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/triggers-and-tags/</guid><description>Triggers Now, let&amp;rsquo;s stop and think about how we want our projectile to work. A projectile is going to be fired, and then when it hits an enemy it will disappear. &amp;hellip;That&amp;rsquo;s not really physics, is it? Physics can&amp;rsquo;t make an object disappear into thin air, so this disappearing will have to be a custom behavior that we add to the projectile using a script. The disappearing behavior will happen when the projectile touches an enemy.</description></item><item><title>Projectile/Enemy Behavior</title><link>https://nuevofoundation.github.io/workshops/unity/projectile-enemy-behavior/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/projectile-enemy-behavior/</guid><description>Projectile behavior Now that we know how triggers and tags work, let&amp;rsquo;s set up the projectile behavior! Create a new script within the Scripts folder called &amp;ldquo;ProjectileBehavior&amp;rdquo;. Then drag and drop it in the projectile inspector from the projectile in the Prefabs folder, and open the script up. Remove the Start() and Update() function and replace it with this:
void OnTriggerEnter2D(Collider2D collision) { if(collision.gameObject.tag != &amp;#34;&amp;#34;) //destroy projectile if it collides with anything but the player { // make the projectile disappear } } In this function, we want to destroy the projectile if it collides with anything but the player.</description></item><item><title>Making the UI: Part 1</title><link>https://nuevofoundation.github.io/workshops/unity/ui-part-1/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/ui-part-1/</guid><description>Menu Screen We&amp;rsquo;re almost done! To complete this game, we need to do two more things: add a UI and an Outline script to piece everything together. Let&amp;rsquo;s start with the UI.
Right click in the hierarchy window and, instead of selecting &amp;ldquo;Create Empty&amp;rdquo;, we want to create a canvas. Look for &amp;ldquo;UI&amp;rdquo; → &amp;ldquo;Canvas&amp;rdquo;. This is where all of our UI elements will be under.
Under &amp;ldquo;Canvas&amp;rdquo;, we want to create &amp;ldquo;UI&amp;rdquo; → &amp;ldquo;Image&amp;rdquo;.</description></item><item><title>Making the UI: Part 2</title><link>https://nuevofoundation.github.io/workshops/unity/ui-part-2/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/ui-part-2/</guid><description>End Screen Next, we want to make an end screen that will be displayed once Nuvi defeats all the aliens. Most of this process will be very similar to how you made the Menu Screen!
Under &amp;ldquo;Canvas&amp;rdquo;, create &amp;ldquo;UI&amp;rdquo; → &amp;ldquo;Image&amp;rdquo; like you did for the starting Menu, and this time rename it to &amp;ldquo;EndScreen&amp;rdquo;. Resize to the same size as Menu.
Create &amp;ldquo;UI&amp;rdquo; → &amp;ldquo;Text&amp;rdquo; under EndScreen, rename it &amp;ldquo;EndMessage&amp;rdquo;, and type in whatever you like — this message is going to be displayed when Nuvi defeats all the aliens and the game ends!</description></item><item><title>Piecing it All Together</title><link>https://nuevofoundation.github.io/workshops/unity/outline/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/outline/</guid><description>Now that we have all the UI set, we want the game to function as we intend it to. Right now when we simulate the playable game, we can move Nuvi, but the end screen is already showing. To fix this, we will have a script that will dictate how the game should go. Under the Scripts folder in the Projects window, create a new script called &amp;ldquo;Outline&amp;rdquo;. Drag this script into the &amp;ldquo;Main Camera&amp;rdquo; inspector which we can locate under the hierarchy.</description></item><item><title>Building and Running your Game</title><link>https://nuevofoundation.github.io/workshops/unity/build-and-run/</link><pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/unity/build-and-run/</guid><description>In order to export your game, locate &amp;ldquo;File&amp;rdquo; at the top, left corner of the Unity window and select &amp;ldquo;Build Settings&amp;rdquo;. You will be greeted by this pop-up window:
The two most common builds are either the Mac build or PC build. To choose between the two, select the drop-down menu next to &amp;ldquo;Target Platform&amp;rdquo; and choose your platform choice. Finally, simply select &amp;ldquo;Build&amp;rdquo; at the bottom right. You will then be asked to choose where you want to save your game.</description></item></channel></rss>