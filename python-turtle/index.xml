<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python: Coding with Turtle on Nuevo Foundation Workshops</title><link>https://nuevofoundation.github.io/workshops/python-turtle/</link><description>Recent content in Python: Coding with Turtle on Nuevo Foundation Workshops</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Jul 2019 13:24:17 -0700</lastBuildDate><atom:link href="https://nuevofoundation.github.io/workshops/python-turtle/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Trinket</title><link>https://nuevofoundation.github.io/workshops/python-turtle/using-trinket/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/using-trinket/</guid><description>To help Alex live in a beehive, he needs to learn how to create a honeycomb! We will use Python&amp;rsquo;s turtle library to draw a honeycomb for Alex.
Using Trinket Today you will be using Trinket to learn how to code in Python. Here is an example interactive window that you will use today:
Before we start, let&amp;rsquo;s first understand how the window works. The main.py file contains code, or instructions for the computer to run.</description></item><item><title>The Basics - Drawing a colored line</title><link>https://nuevofoundation.github.io/workshops/python-turtle/the-basics/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/the-basics/</guid><description>Before Alex can learn how to create a beehive, he must first learn how to draw a colored line. We will add code to the below Trinket window, and we will do this in two parts.
First, we need tell the turtle what color we want the line to be. To do this, let&amp;rsquo;s type in:
turtle.color(&amp;quot;orange&amp;quot;) Let&amp;rsquo;s try to understand this line of code in more detail.</description></item><item><title>Activity 1 - Drawing a square</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-1/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-1/</guid><description>Kudos! You helped Alex draw a line! Now let’s step it up and help Alex draw a square. To draw a square, we need to follow these steps:
Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Remember to use turtle.forward() to draw lines.</description></item><item><title>Activity 2 - Simplifying code with loops</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-2/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-2/</guid><description>Great! You drew a square. But notice that we are writing the same lines over and over again! We had to repeat the instructions to draw a line and turn left 4 times. Wouldn’t it be great if we can give instructions once and tell the program to repeat it 4 times? Fear not, we can!
To do this, we need to use loops. Loops run a set of instructions multiple times.</description></item><item><title>Activity 3 - Drawing a hexagon</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-3/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-3/</guid><description>Great job! You just drew your first shape in Python with Turtle! Now let’s slightly change the code we already wrote to draw a square to instead draw a hexagon. Alex is a bee, after all, and he needs to draw hexagons to build his first honeycomb.
To help you draw a hexagon, think of how many sides a hexagon has. How many degrees are in each angle of a hexagon?</description></item><item><title>Activity 4 - Simplifying code with functions</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-4/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-4/</guid><description>We drew one hexagon. But this is just one of many hexagons Alex needs to build his honeycomb. Once again, it seems that we would have to repeat the code many times to draw multiple hexagons. Fortunately, we don&amp;rsquo;t have to! Functions to the rescue!
Functions A function is a way to group together lines of code to do something. For instance, turtle.forward(50) moves the turtle forward 50 steps, and turtle.</description></item><item><title>Activity 5 - Drawing a honeycomb</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-5/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-5/</guid><description>This is the finale! Let&amp;rsquo;s create the honeycomb that Alex will live in. Fortunately, a honeycomb is simply 6 hexagons, so let&amp;rsquo;s combine our knowledge of functions and loops to make our honeycomb!
In this activity, create a new function called draw_honeycomb(). Inside the function body, create a loop that repeats 6 times. Inside the loop we have to first draw a hexagon using our draw_hexagon() function we previously defined. Next, move the turtle so it can draw the next hexagon.</description></item><item><title>Part 2 - Building a Mandala Flower</title><link>https://nuevofoundation.github.io/workshops/python-turtle/part-2/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/part-2/</guid><description>Great job! You finished building a honeycomb for Alex’s beehive, but Alex needs to also get his pollen from flowers! Wouldn’t it be nice to add a flower to the picture as well? In part 2, we will be creating a mandala flower!
(Stay tuned - we&amp;rsquo;ll show you what a mandala flower looks like.)</description></item><item><title>Activity 6 - Moving the turtle</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-6/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-6/</guid><description>Our first step is to move the turtle to a new location to draw the flower (we don’t want to draw the flower on top of the beehive!). To do this, we first need to use the following methods:
turtle.penup() turtle.goto(x,y) turtle.pendown() turtle.penup() tells the turtle to pick up its pen so it doesn’t draw while it is moving. Then, with turtle.goto(x,y), we are telling the turtle the position where the turtle moves to.</description></item><item><title>Activity 7 - Drawing a figure 8</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-7/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-7/</guid><description>Great! Now let’s make a figure 8 as the first step to making a mandala flower! A figure 8 is just two circles that are opposite to each other. To do this we can make use of the turtle.circle(x) method, which takes an integer x as the radius of the circle. (You may recall that 2 * radius is how wide the circle is.) Having the radius as an argument means we can decide how big or small the circle should be.</description></item><item><title>Activity 8 - Creating a mandala flower</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-8/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-8/</guid><description>We’re done creating our first figure 8! We can now use the figure_8() function to create a mandala flower! A mandala flower is many figure 8s placed on top of each other at different angles. So, to do this we need to use a&amp;hellip; you guessed it, a loop!
Create a new function called mandala_flower(). In the loop we will call the figure_8() function we wrote earlier to create a figure 8.</description></item><item><title>Activity 9 - Coloring your mandala flower</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-9/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-9/</guid><description>Now that we have the shape of a mandala flower, it’s time to color it! We’re still going to use the turtle.color() method; however this time we’re going to use an RGB value instead of a string color value, so that we can produce a larger variety of colors.
RGB (Red-Green-Blue) colors In primary school, you might recall that by mixing colors together, you can produce new colors. For example, combining red and blue together make purple.</description></item><item><title>Activity 10 - Randomizing the color of your mandala flower petals</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-10/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-10/</guid><description>We’ve successfully set the color of the mandala flower to an RGB value. Now, let&amp;rsquo;s explore changing the color of the individual mandala flower petals?
We will make use of python’s random library. The random.randint() method allows us to choose a random value for each of the red, green, or blue value. To choose a value that is between 0 inclusive and 256 exclusive (in other words, between 0 and 255 inclusive), we need to use random.</description></item><item><title>Activity 11 - Now, it's your turn!</title><link>https://nuevofoundation.github.io/workshops/python-turtle/activity-11/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/activity-11/</guid><description>If there is any time left, try drawing your own shapes and designs! Make your picture interesting using various shapes and colors.
Click here to open a new blank Trinket window to start on your creation.
Help, I am stuck! Stuck? Check the Answer key for the activity that you are stuck on!</description></item><item><title>Python Turtle - Answer Key</title><link>https://nuevofoundation.github.io/workshops/python-turtle/answer-key/</link><pubDate>Fri, 27 Mar 2020 20:24:33 -0700</pubDate><guid>https://nuevofoundation.github.io/workshops/python-turtle/answer-key/</guid><description>The below 3 lines are needed for the introduction activity and all the other activities as well.
import turtle turtle.color(&amp;#34;orange&amp;#34;) turtle.shape(&amp;#34;turtle&amp;#34;) Introduction Activity turtle.color(&amp;#34;orange&amp;#34;) turtle.forward(50) Activity 1 turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) Activity 2 for i in range(4): turtle.forward(50) turtle.left(90) Activity 3 for i in range(6): turtle.forward(50) turtle.left(60) Activity 4 def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) draw_hexagon() Activity 5 def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.</description></item></channel></rss>