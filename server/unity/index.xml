<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity: Top-Down Nuvi Space Game on Nuevo Foundation Workshops</title>
    <link>/unity/</link>
    <description>Recent content in Unity: Top-Down Nuvi Space Game on Nuevo Foundation Workshops</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Oct 2021 11:45:38 -0700</lastBuildDate>
    <atom:link href="/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing Unity</title>
      <link>/unity/install-unity/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/install-unity/</guid>
      <description>&lt;p&gt;We need to help Nuvi defeat the aliens, but programming everything from scratch might be a bit too much right now.&#xA;Unity is a tool that has some basic parts of game-building simplified for us, so all we need to do is drag and drop objects, and write a bit of simple C# code!&lt;/p&gt;&#xA;&lt;div class=&#34;notices info&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;Info&#34;&gt;&lt;h4 id=&#34;why-use-unity-when-there-are-other-tools-out-there&#34;&gt;Why use Unity when there are other tools out there?&lt;/h4&gt;&#xA;&lt;p&gt;Well, Unity has some great aspects, especially if you&amp;rsquo;re just starting your game development journey. It&amp;rsquo;s cross-platform which means you can develop a game for, say, both computers and cell phones. It is beginner-friendly for coders. Best of all, it has a large, supportive community!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding the Unity Interface</title>
      <link>/unity/understanding-unity-interface/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/understanding-unity-interface/</guid>
      <description>&lt;p&gt;Before you start working on our game, take some time to look at Unity&amp;rsquo;s interface and familiarize yourself with the windows.&#xA;You can move these windows around to customize your workspace layout. If you get stuck in a weird layout, you can always go back to the default layout by doing: Windows -&amp;gt; Layouts -&amp;gt; Default.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/1_empty_proj_all_windows.png&#34; alt=&#34;Overview of windows in Unityâ€™s interface&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;game&#34;&gt;Game&lt;/h4&gt;&#xA;&lt;p&gt;This window shows what the camera is seeing - in other words, it&amp;rsquo;s what you&amp;rsquo;re going to see displayed when you run and play the game.&#xA;Right now you only see a blue screen, but that&amp;rsquo;s just what Unity defaults to showing in 2D. Don&amp;rsquo;t worry, you&amp;rsquo;ll give your game a fancy background later.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scripts Explained</title>
      <link>/unity/scripts-explained/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/scripts-explained/</guid>
      <description>&lt;p&gt;Before we begin with making Nuvi move, let&amp;rsquo;s first explain the structure of a Unity script. There are many ways to make Nuvi move within Unity, and one way to do this is to add a Script component onto Nuvi. A Script component is a component that you can make on your own from scratch.&lt;/p&gt;&#xA;&lt;p&gt;An empty Unity Script will look like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;System.Collections&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;System.Collections.Generic&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;UnityEngine&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;EmptyScript&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;MonoBehaviour&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a8c8&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Start&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a8c8&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Update&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each new script will have the first 3 lines that start with &lt;code&gt;using&lt;/code&gt;. These lines are needed for Unity to be able to use this newly created script, so we generally leave these lines of code alone. The next line that starts with &lt;code&gt;public class &#39;script_name&#39;&lt;/code&gt; is needed for Unity to access this specific script.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making Nuvi Move</title>
      <link>/unity/making-nuvi-move/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/making-nuvi-move/</guid>
      <description>&lt;p&gt;Now that we know what a Script looks like, let&amp;rsquo;s actually make one.&lt;/p&gt;&#xA;&lt;p&gt;First, we want to create a new folder called &amp;ldquo;Scripts&amp;rdquo; in Assets under the Project window, similar to the Drawings folder. We will do this because it is better practice to have all the scripts in an easy to access place. Double click the Scripts folder and create a script by right clicking and selecting &amp;ldquo;C# Script.&amp;rdquo; You can also go under the &amp;ldquo;Assets&amp;rdquo; tab and choose &amp;ldquo;Create -&amp;gt; C# Script&amp;rdquo; as shown below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Colliders</title>
      <link>/unity/colliders/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/colliders/</guid>
      <description>&lt;p&gt;The reason Nuvi runs off is because there are no colliders to stop them.&lt;/p&gt;&#xA;&lt;div class=&#34;notices info&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;Info&#34;&gt;Colliders allow two objects to touch each other.&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;So, let&amp;rsquo;s use colliders to add invisible walls around our arena. Head over to the Hierarchy window and right-click, then choose &amp;ldquo;Create Empty&amp;rdquo;. Name this empty object &amp;ldquo;Walls&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Then, right-click the &amp;ldquo;Walls&amp;rdquo; object you just made, and this time choose &amp;ldquo;3D Object -&amp;gt; Cube&amp;rdquo;. Resize the cube into a rectangular shape so it covers a side of the screen like below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up the Enemies</title>
      <link>/unity/setting-up-enemies/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/setting-up-enemies/</guid>
      <description>&lt;p&gt;Now that Nuvi is all set and ready to move, let&amp;rsquo;s have them welcome aliens into the universe! Locate the alien png file called &amp;ldquo;alien_pink&amp;rdquo; from the Drawings folder. Then, drag and drop the alien_pink into the hierarchy. Rescale the enemy to match Nuvi&amp;rsquo;s size as it is too large.&lt;/p&gt;&#xA;&lt;img src=&#34;../img/6_nuvi_and_enemy.png&#34; alt=&#34;Enemy is scaled to match Nuvi&#39;s size&#34; width=&#34;400&#34;/&gt;&#xD;&#xA;&lt;p&gt;Now, if we were to run the game, Nuvi runs on top of the pink alien. We want Nuvi to collide with it. To do this, add a BoxCollider2D on the alien like we did with Nuvi and resize it if necessary. Now, if we were to run the game again, Nuvi runs into the alien instead of over it!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up the Projectile and Making it a Prefab</title>
      <link>/unity/setup-projectile-and-prefab/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/setup-projectile-and-prefab/</guid>
      <description>&lt;p&gt;Oh no! The pink alien is attacking now! It&amp;rsquo;s mad because Nuvi ran over it. Let&amp;rsquo;s set Nuvi up with a self-defense mechanism.&lt;/p&gt;&#xA;&lt;p&gt;After selecting Nuvi in the hierarchy, right click and select &amp;ldquo;Create Empty&amp;rdquo;, which creates an empty GameObject with only a Transform component.&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;Tip&#34;&gt;To be able to see where our empty object is, make sure we are on the Move tool! You should see two intersecting arrows â€” where they intersect is where our empty GameObject is located.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Firing</title>
      <link>/unity/firing/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/firing/</guid>
      <description>&lt;p&gt;Now that the projectile is all set up, let&amp;rsquo;s get Nuvi firing those projectiles. Make a script called &amp;ldquo;FiringBehavior&amp;rdquo;, then copy and paste this code:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;System.Collections&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;System.Collections.Generic&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;UnityEngine&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;FiringBehavior&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;MonoBehaviour&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Transform&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;spawn_coor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//where the projectile will spawn&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;projectile_speed&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;//how fast projectile will go&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;GameObject&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;projectile_object&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//red projectile sprite&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Start is called before the first frame update&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a8c8&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Start&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#111&#34;&gt;projectile_speed&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15f&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Update is called once per frame&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#00a8c8&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Update&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Input&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetButtonDown&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;Jump&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//space bar will spawn projectile&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#111&#34;&gt;Rigidbody2D&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;rb&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;projectile&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;GetComponent&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Rigidbody2D&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#111&#34;&gt;rb&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;AddForce&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;spawn_coor&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;up&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;projectile_speed&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ForceMode2D&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Impulse&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//makes projectile move&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Right now this script doesn&amp;rsquo;t work; we need to tell the game what to spawn when the spacebar is pressed. To do so, add &lt;code&gt;GameObject projectile = Instantiate(projectile_object, spawn_coor.position, spawn_coor.rotation);&lt;/code&gt; above &lt;code&gt;Rigidbody2D rb = projectile.GetComponent&amp;lt;Rigidbody2D&amp;gt;();&lt;/code&gt;. The Instantiate method indicates what to create, where to create it, and in what direction it should be facing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Triggers and Tags</title>
      <link>/unity/triggers-and-tags/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/triggers-and-tags/</guid>
      <description>&lt;h2 id=&#34;triggers&#34;&gt;Triggers&lt;/h2&gt;&#xA;&lt;p&gt;Now, let&amp;rsquo;s stop and think about how we want our projectile to work. A projectile is going to be fired, and then when it hits an enemy it will disappear. &amp;hellip;That&amp;rsquo;s not really physics, is it? Physics can&amp;rsquo;t make an object disappear into thin air, so this disappearing will have to be a custom behavior that we add to the projectile using a script. The disappearing behavior will happen when the projectile touches an enemy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projectile/Enemy Behavior</title>
      <link>/unity/projectile-enemy-behavior/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/projectile-enemy-behavior/</guid>
      <description>&lt;h2 id=&#34;projectile-behavior&#34;&gt;Projectile behavior&lt;/h2&gt;&#xA;&lt;p&gt;Now that we know how triggers and tags work, let&amp;rsquo;s set up the projectile behavior! Create a new script within the Scripts folder called &amp;ldquo;ProjectileBehavior&amp;rdquo;. Then drag and drop it in the projectile inspector from the projectile in the Prefabs folder, and open the script up. Remove the &lt;code&gt;Start()&lt;/code&gt; and &lt;code&gt;Update()&lt;/code&gt; function and replace it with this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;OnTriggerEnter2D&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;Collider2D&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;collision&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;collision&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;gameObject&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//destroy projectile if it collides with anything but the player&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// make the projectile disappear&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this function, we want to destroy the projectile if it collides with anything but the player. Inside the quotation mark, what do you think we should add? Within the body of the function, what should we put to make the projectile disappear?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making the UI: Part 1</title>
      <link>/unity/ui-part-1/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/ui-part-1/</guid>
      <description>&lt;h2 id=&#34;menu-screen&#34;&gt;Menu Screen&lt;/h2&gt;&#xA;&lt;p&gt;We&amp;rsquo;re almost done! To complete this game, we need to do two more things: add a UI and an Outline script to piece everything together. Let&amp;rsquo;s start with the UI.&lt;/p&gt;&#xA;&lt;p&gt;Right click in the hierarchy window and, instead of selecting &amp;ldquo;Create Empty&amp;rdquo;, we want to create a canvas. Look for &amp;ldquo;UI&amp;rdquo; â†’ &amp;ldquo;Canvas&amp;rdquo;. This is where all of our UI elements will be under.&lt;/p&gt;&#xA;&lt;p&gt;Under &amp;ldquo;Canvas&amp;rdquo;, we want to create &amp;ldquo;UI&amp;rdquo; â†’ &amp;ldquo;Image&amp;rdquo;. Rename &amp;ldquo;Image&amp;rdquo; to &amp;ldquo;Menu&amp;rdquo;. This will be our menu screen. In the Menu inspector, resize the width and height to 400 and 300 respectively.&#xA;We then want to anchor the Menu screen to the middle. This way, even if the size of the window changes, the menu screen will stay in the middle. To do this, click on the squares in the top left corner under Rect Transform in the Menu inspector.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making the UI: Part 2</title>
      <link>/unity/ui-part-2/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/ui-part-2/</guid>
      <description>&lt;h2 id=&#34;end-screen&#34;&gt;End Screen&lt;/h2&gt;&#xA;&lt;p&gt;Next, we want to make an end screen that will be displayed once Nuvi defeats all the aliens. Most of this process will be very similar to how you made the Menu Screen!&lt;/p&gt;&#xA;&lt;p&gt;Under &amp;ldquo;Canvas&amp;rdquo;, create &amp;ldquo;UI&amp;rdquo; â†’ &amp;ldquo;Image&amp;rdquo; like you did for the starting Menu, and this time rename it to &amp;ldquo;EndScreen&amp;rdquo;. Resize to the same size as Menu.&lt;/p&gt;&#xA;&lt;p&gt;Create &amp;ldquo;UI&amp;rdquo; â†’ &amp;ldquo;Text&amp;rdquo; under EndScreen, rename it &amp;ldquo;EndMessage&amp;rdquo;, and type in whatever you like â€” this message is going to be displayed when Nuvi defeats all the aliens and the game ends! In our example, we said: &amp;ldquo;You defeated all the Aliens and helped Nuvi save the Universe!&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Piecing it All Together</title>
      <link>/unity/outline/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/outline/</guid>
      <description>&lt;p&gt;Now that we have all the UI set, we want the game to function as we intend it to. Right now when we simulate the playable game, we can move Nuvi, but the end screen is already showing.&#xA;To fix this, we will have a script that will dictate how the game should go. Under the Scripts folder in the Projects window, create a new script called &amp;ldquo;Outline&amp;rdquo;. Drag this script into the &amp;ldquo;Main Camera&amp;rdquo; inspector which we can locate under the hierarchy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building and Running your Game</title>
      <link>/unity/build-and-run/</link>
      <pubDate>Wed, 06 Oct 2021 11:45:38 -0700</pubDate>
      <guid>/unity/build-and-run/</guid>
      <description>&lt;p&gt;In order to export your game, locate &amp;ldquo;File&amp;rdquo; at the top, left corner of the Unity window and select &amp;ldquo;Build Settings&amp;rdquo;. You will be greeted by this pop-up window:&lt;/p&gt;&#xA;&lt;img src=&#34;../img/14_build_settings.png&#34; alt=&#34;Build Settings pop-up&#34; width=&#34;600&#34;/&gt;&#xD;&#xA;&lt;p&gt;The two most common builds are either the Mac build or PC build. To choose between the two, select the drop-down menu next to &amp;ldquo;Target Platform&amp;rdquo; and choose your platform choice. Finally, simply select &amp;ldquo;Build&amp;rdquo; at the bottom right. You will then be asked to choose where you want to save your game. You can create a new folder and save your game in there! Select your folder and the build process will begin. Once the build process is complete, head to where your newly created folder is located and open it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
