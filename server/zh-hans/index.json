[
{
	"uri": "/zh-hans/python-basics/basics/using-trinket/",
	"title": "从 Trinket 开始学习",
	"tags": [],
	"description": "",
	"content": "今天我们将用Trinket来学习Python。下面这个例子展示了我们要用的Trinket窗口：\n在开始之前，让我们首先了解这个窗口的工作原理。 main.py 文件包含了使计算机运行的代码或指令。运行代码产生的结果会被显示在窗口右侧。这个显示结果的窗口叫做控制台。\n点击 运行 并观看控制台在右侧屏幕上运行代码！在下面的示例中，print (打印) 告诉计算机将括号 () 中的句子打印到控制台（右侧的屏幕）中。在下一课中我们将了解有关print (打印) 的更多信息。\n"
},
{
	"uri": "/zh-hans/python-basics/basics/",
	"title": "基础知识",
	"tags": [],
	"description": "",
	"content": "课程简介 在本节中，我们将介绍将在整个课程中使用的工具，以及一些对学习Python和所有编程语言很重要的基本概念。你将学习如何将文字显示在屏幕上，这些文字包括代码中的注释、存储信息以及从你的程序用户那里获取信息。\n让我们开始吧！\n课程科目\r从 Trinket 开始学习 写入控制台 (print打印语句) 注释 (Comments) 变量 从控制台中读取 "
},
{
	"uri": "/zh-hans/python-basics/conditional-statements-loops/conditional-statements/",
	"title": "条件语句",
	"tags": [],
	"description": "",
	"content": "现在我们已经了解了打印语句、变量以及从用户那里读取输入的基础知识，我们可以将所有这些知识与条件语句结合起来。条件语句允许计算机根据表达式的 值 做出 决定。在现实世界中，我们经常使用条件语句来做决定！例如，如果外面下雨，我就会使用伞。在这个例子中，我评估了外面的天气，因为下雨了，所以我做出了使用伞的决定。\n你能想到在我们日常生活中使用的其他条件语句吗？\nIf语句 我们将从最简单形式的if语句开始！从现实世界的例子中，您可以看到使用了某些词汇，这些词汇也适用于编程语句。如果 外面下雨，那么我会使用伞。if 告诉我们我们需要做一个决定。然后我们有决定要做。下雨了吗？这个问题被称为表达式。然后，如果下雨了，我就使用伞。这是一个在表达式为真时适用的语句。\nif (expr): statement 如上所示，我们有三个不同的部分：\nIf - 告诉计算机我们将根据括号内的表达式做出决定。 Expr - 代表我们正在评估的表达式。如果表达式“真”，那么计算机将进入if语句并执行该语句。 Statement - 如果表达式为“真”，计算机将完成的操作。\nx = 0 y = 5 if (x\u0026lt;y): #真 print(\u0026#39;yes\u0026#39;) if (y\u0026lt;x): #假 print(\u0026#39;yes\u0026#39;) if (x == 10): #假 print(\u0026#39;yes\u0026#39;) 让我们分解上面的示例，看看为什么某些语句是“真”或“假”。\n我们有两个变量 x 和 y，它们分别被赋予一个值。在第一个if语句中，我们测试了 x 的值是否小于 y 的值。由于 0 小于 5，所以这是 true(真) 的！因此，第一个 if 语句将打印“yes”。\n然而，我们可以看到 y 不小于 x，所以它被评估为 false(假)。然后 if 语句内部将不会被执行。对于评估 x 是否等于 10 的 if 语句也是如此。我们看到 x 等于 0，所以这个表达式是 false(假) 的，if 语句的内部也不会被执行。\nElse语句 现在我们知道如何使用if语句有条件地执行单个语句或多个语句，让我们看看 else 我们可以做什么！\n有时，我们需要评估一个条件，以便根据它是否为 true(真) 并采取相应的行动，但如果它为 false(假)，我们会采取不同的行动。这是 else 语句的最简单形式。\nif (expr): statement1 else: statement2 这实际上就像 if 语句！然而，在这里，如果 if 语句为 false(假)（不真实），程序将自动执行 else 语句中的statement2。\n一个现实生活的例子是，如果我饿了，我就会吃东西。否则（换句话说，我不饿），我就不吃。让我们看看Python代码！\nif (hungry): eat else: dont_eat 小挑战 让我们把到目前为止学到的一切结合起来！看看是否可以创建一个程序，提示用户输入他们的名字。用户可以在控制台中输入他们的名字。然后，计算机可以决定他们的名字是否与你的名字相等，并打印出一个响应。否则，打印出不同的响应！\n提示：尝试讨论计算机可以采取的不同路径！确保识别if和else条件是什么。\n"
},
{
	"uri": "/zh-hans/python-basics/data-types/strings/",
	"title": "字符串",
	"tags": [],
	"description": "",
	"content": "任何用引号括起来的内容都被称为 字符串(str)。这是计算机表示单词或句子的方式。例如，\u0026ldquo;a\u0026rdquo;、\u0026ldquo;2\u0026rdquo;、\u0026ldquo;banana!\u0026rdquo; 和 \u0026ldquo;Hello World\u0026rdquo; 都是字符串，但2和Hello World不是字符串，因为缺少引号。您可以使用 + 符号将许多字符串组合在一起！\n你组合的字符串不必是真正的单词！例如，\u0026quot;Ap\u0026quot; + \u0026quot;ple\u0026quot; 将生成字符串 \u0026quot;Apple\u0026quot;。 如果遇到困难，请寻求帮助！\n例如，\n\u0026quot;Apple\u0026quot; + \u0026quot;Pineapple\u0026quot; 生成字符串 \u0026quot;ApplePineapple\u0026quot;\n\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; 生成 \u0026quot;Nuevo Foundation\u0026quot;\n小挑战一 如果你将名字和姓氏组合在一起会发生什么？如何做到这一点？\n小挑战二 删除你代码中的所有 print 语句。从一行 print(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;)开始你的代码。\n如果运行它，会得到以下输出：\nNuevo Foundation\r让我们尝试找出在每个 print 语句中使用两个加号（+）符号打印字符串 \u0026quot;Nuevo Foundation\u0026quot; 的另外两种方法。一旦使其工作，您应该已经打印了字符串 \u0026quot;Nuevo Foundation\u0026quot; 3 次。换句话说，在按运行后，控制台应如下所示：\nNuevo Foundation\rNuevo Foundation\rNuevo Foundation\r"
},
{
	"uri": "/zh-hans/python-basics/data-structures/lists/",
	"title": "列表",
	"tags": [],
	"description": "",
	"content": "列表是有序的项目集合，可以用方括号 [] 内的逗号分隔的值来表示。正如我们在循环课程中所看到的，列表可以包含任何数据类型，例如字符串或整数。\n#创建一个包含 5 个水果的列表 fruits = [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] 如果你想引用列表的特定元素，可以通过在方括号内使用索引（位置）来实现。第一个元素的索引（位置）为 0，列表的索引范围从 0 到 (列表中的元素数量 - 1)。因此，一个包含 6 个元素的列表将具有从 0 到 5 的索引。\n#创建一个包含 5 个水果的列表 fruits = [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] #创建一个包含 5 个水果的列表 print(fruits[2]) ##打印出 banana 索引 项目 0 orange 1 apple 2 banana 3 apple 4 mango 正如我们在这个示例中所看到的，列表可以包含重复的元素。\n在Python中，列表不必全部是相同的数据类型，因此一个列表可以包含字符串和数字的组合。\n# 列表也可以包含不同的数据类型 my_list = [\u0026#39;candy\u0026#39;, 10, 2.5] 列表的长度 我们可以使用 `len(list)`` 函数来获取列表的长度，将列表名称作为参数传递给函数。\nlength = len(fruits) ##length = 5 向列表中添加元素 您可以使用 append 函数来向列表中添加项目，list.append(x) 函数中，list 是列表的名称，x 是要添加的元素。它将元素添加到列表的末尾\n#之前的列表是 [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] fruits.append(\u0026#39;lemon\u0026#39;) #现在的列表是 [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] 在特定索引位置插入元素 如果我们想要控制新元素的位置，可以使用 list.insert(i, x) 函数在列表的特定索引处插入元素。这里 list 是列表的名称，i 是要插入的索引，x 是要插入的元素。注意：这将移动从位置 i 开始的所有元素一个索引。\nfruits.insert(1, \u0026#39;guava\u0026#39;) #现在的列表是 [\u0026#39;orange\u0026#39;, \u0026#39;guava\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] 从列表中删除元素 list.remove(x) 函数搜索给定元素 x 的第一个实例，并将其从列表中删除。\nfruits.remove(\u0026#39;apple\u0026#39;) #现在的列表是 [\u0026#39;orange\u0026#39;, \u0026#39;guava\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] 如果元素 x 不在列表中，list.remove(x) 会引发值错误。\n此外，请注意列表中仍然存在apple的第二个实例。\n在特定位置删除元素 list.pop(i) 函数删除索引 i 处的元素。\nfruits.pop(0) #现在的列表是 [\u0026#39;guava\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] 如果不指定索引，list.pop() 将删除列表中的最后一个元素。\n反转列表中的元素 list.reverse() 函数反转列表的元素。\nfruits.reverse() #现在列表是 [\u0026#39;lemon\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;guava\u0026#39;] 获取列表的最小和最大元素 min(list) 函数返回列表的最小元素，最大元素可以使用 max(list) 函数找到。如果列表是数字列表，它将返回列表中最低或最高的值。如果列表是字符串列表，它将按字母顺序返回第一个或最后一个值。\nmy_list = [4, 1, 2, 5, 3] ## 定义一个新的整数列表 print(min(my_list)) ## 打印 1，my_list 的最小元素 print(max(my_list)) ## 打印 5，my_list 的最大元素 如果你的列表包含字符串和数字的混合，min 和 max 函数将返回一个错误。\n小挑战 现在让我们自己尝试一下。从下面的水果列表开始。打印水果列表，对于每个水果，询问用户是否喜欢它。如果他们喜欢它，就保留它。如果他们不喜欢它，就从列表中删除它。接下来，要求用户添加一个缺少的水果。将其添加到列表中，并打印出用户喜欢的水果数量。\nfruits = [\u0026#39;orange\u0026#39;, \u0026#39;kiwi\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] 提示：你需要使用 str(int) 函数将 length 整数转换为字符串。\n"
},
{
	"uri": "/zh-hans/python-basics/basics/writing-to-console/",
	"title": "写入控制台 (print打印语句)",
	"tags": [],
	"description": "",
	"content": "\n和你的程序对话！ Print 语句用于将内容写入控制台。用 print(\u0026quot;Hello World\u0026quot;) 在屏幕中打印 Hello World。我们稍后会明白其实print 是一个函数， 我们用这个函数来执行打印任务。我们输入到 print 函数中的内容将会被打印在屏幕上。\n让我们从使用 print打印语句开始吧。\n我们将在后面的课程中大量使用打印语句，因此在继续下一个概念之前，请确保你已经理解了上面的内容！\n小挑战一 首先，将以下文本写入您的 Trinket main.py，然后单击运行。\nprint(\u0026#34;Hello, World!\u0026#34;) 观察\u0026quot;Hello, World!\u0026ldquo;显示在你的右侧屏幕上！ print 打印语句告诉计算机将括号 () 中的句子打印到控制台窗口或右侧的屏幕中。\n在打印语句中使用 \u0026quot; 你有没有注意到 Hello, World! 被\u0026quot;包围了？你有没有试过不带 \u0026quot; 符号会导致程序错误？值得注意的是，如果你尝试 print(123) 你会发现程序成功运行且并没有错误产生。这是因为程序中的文本（编程语言中的str字符串）需要使用引号 括起来以指定它是文本。但数字不需要用引号来指定。\n继续尝试打印不同的东西！\n小挑战二 在不删除引号的情况下，尝试将 \u0026quot;Hello, World\u0026quot; 更改为另一个句子。（例如 – \u0026quot;My name is Nuvi!\u0026quot;） 单击 运行 观察是否有任何改变出现。 在第一个打印语句下面添加一个新的打印语句，在第一句话下面打印第二句。 单击运行观察是否两个句子被打印了出来。 我们将在后面的课程中大量使用打印语句，因此在继续之前请确保你已经理解了上面的内容！\n求助！我得到了很多红色文字！ 如果你看到任何红色文字，表示你遇到了一些错误！请寻求帮助。在 Python 中编码时，尤其要注意以下几点：\n确保要打印的句子用引号括起来，并且这个句子在括号内。 Python 中代码的间距非常重要。确保在每行的开头或结尾没有任何不必要的空格或tabs符号，否则 Python 将无法读取代码。例如，不要在 print 之前写任何空格，也不要在 print(\u0026quot;Hello, World!) 的最后一个括号之后写任何空格。 "
},
{
	"uri": "/zh-hans/python-basics/functions/built-in/",
	"title": "内置函数",
	"tags": [],
	"description": "",
	"content": "Python 中有许多内置函数，可以提高编写代码的便捷性。让我们在这里讨论其中一些。\nsort() 此函数用于对数据结构（如数组和列表）中的值进行排序。\narr = [8,5,1,4,6] arr.sort() print(\u0026#39;The sorted arr is :\u0026#39;,arr) #输出 [1,4,5,6,8] find() 返回给定字符串中输入（模式）的第一个出现位置。\nstr1 = \u0026#34;Hello World\u0026#34; index = str1.find(\u0026#34;World)\u0026#34; print(index) #输出 6 len() len() 用于测量给定数据结构的大小。\narr = [10,5,4,2,3] print(len(arr)) #输出 5 isdigit() 此函数判断传递的字符串是否仅由数字组成，是则返回 true；否则返回 false。\ns = \u0026#34;123\u0026#34;; print s.isdigit() #输出 true s = \u0026#34;Hello World\u0026#34;; print s.isdigit() #输出 false s = \u0026#34;123Hello\u0026#34; print s.isdigit() #输出 false 因为其中包含字母和数字 reverse() 此函数用于反转数组或列表的内容。\narr = [5, 6, 7, 8, 9]; arr.reverse(); print(arr) #输出 [9,8,7,6,5] replace() 此函数用第二个参数替换给定字符串中的第一个参数。\ninitial_str = \u0026#34;My name is Harry. Harry is a good boy.\u0026#34; final_str = initial_str.replace(\u0026#34;Harry\u0026#34;, \u0026#34;Potter\u0026#34;) print(final_str) #输出 My name is Potter. Potter is a good boy. append() 此函数用于将数字、字符或任何数据类型的元素添加到列表或数组的末尾。\narr = [1,2,3,4,5]; arr.append(6); print(arr) #输出 [1,2,3,4,5,6] arr = [\u0026#39;Harry\u0026#39;,\u0026#39;Ram\u0026#39;,1,2] arr.append(\u0026#34;Jenifer\u0026#34;) print(arr) #输出 [Harry,Ram,1,2,Jenifer] remove() 删除给定对象的第一次出现。如果尝试删除不在列表中的元素，将引发异常指出元素不在列表中。\narr = [1,1,2,3,3] arr.remove(1) print(arr) #输出 1,2,3,3 arr.remove(4) #引发异常，指出元素不在列表中 小挑战一 创建一个名为 arr 的数组\n将其初始化为 [1,2,3,4,5]\n将数字 6 添加到末尾并打印\n反转 arr 并打印它\n对 arr 进行排序并打印\n打印 arr 的长度\n从 arr 中删除元素 6 并打印\n打印 arr 的长度\n正确输出 [1,2,3,4,5,6]\r[6,5,4,3,2,1]\r[1,2,3,4,5,6]\r6\r[1,2,3,4,5]\r5 小挑战二 将字符串 s 初始化为 \u0026ldquo;Hello all.Hello people\u0026rdquo;。\n查找字符串 s 中单词 Hello 的出现位置并打印。\n将字符串 s 中的单词 Hello 替换为 Hi。\n查找字符串 s 是否仅包含数字，并打印判断结果。\n正确输出 0\rHi all.Hi people.\rFalse "
},
{
	"uri": "/zh-hans/python-basics/data-types/",
	"title": "数据类型",
	"tags": [],
	"description": "",
	"content": "课程简介 在编程中，数据类型是一个重要的概念。变量可以存储不同类型的数据，不同类型的数据可以执行不同的操作。\nPython 默认内置了以下数据类型，按照以下分类：\n类型 示例 文本 str 数值 int, float, complex 序列 list, tuple, range 映射 dict 集合 set, frozenset 布尔值 bool 二进制 bytes, bytearray, memoryview 空 NoneType 在本节中，我们将专注于字符串、数字和布尔值。让我们开始吧！\n课程科目\r字符串 数值 布尔值 "
},
{
	"uri": "/zh-hans/python-basics/data-types/numbers/",
	"title": "数值",
	"tags": [],
	"description": "",
	"content": "计算机也可以进行数学运算。使用 print() 来打印数学表达式的结果。不需要为数字使用引号！与字符串不同，你可以对数字进行数学运算。\nprint(7-3) #输出 4 print(5 * -6 + 7) #输出 -23 print(24 * (8-3) / 6) #输出 20.0 计算机在处理整数除法时与常规计算器不同。整数除法将排除余数或小数部分。\n例如，\n15/4 生成 3 15.0/4.0 生成 3.75\n你还可以尝试使用数学符号创建自己的表达式！\n符号 用途 符号 用途 + 相加 * 相乘 - 相减 / 相除 小挑战一 让我们尝试使用Python找出以下问题的答案。尝试打印出下面表达式的结果（请确保不要漏掉任何括号）：\n2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7)) 小挑战二 你能够打印出这个陈述吗？ `\u0026ldquo;527 乘以 199 等于: __\u0026quot;``\n你可以用(527 * 199)的答案来填写空白处。如果要同时打印字符串和数字，必须首先将数字转换为字符串。\n以下是一个示例： print(\u0026quot;Hello, World!\u0026quot; + str(5))\n使用str(5) 将数字转换为字符串 \u0026quot;5\u0026quot; 。将一种类型的东西转换为另一种类型称为“强制类型转换”。\n趣事: 随机数 以下是如何打印在1（包括）和10（包括）之间的随机数的方法：\n# 这一行代码导入所需的库 from random import # 这一行代码打印在1（包括）和10（包括）之间的随机数 print(randint(1,10)) 想要了解更多？寻求帮助或在互联网上搜索！每个程序员的最佳朋友都是搜索引擎！\n尤其是尝试理解from和import这两个词的含义。在以后的项目中，我们将再次回到这些词。\n"
},
{
	"uri": "/zh-hans/web-basics/basics/",
	"title": "基础知识",
	"tags": [],
	"description": "",
	"content": "什么是网站? 网站只是可以在网路上找到的页面。当你在地址栏中输入网站地址时，网站会通过浏览器显示。\n网站的各个部分 常见的网站元素包括资讯栏，搜索栏和联系资讯。\n网站设计 制作网站的第一步是确定我们想要的元素以及它们的外观。这个过程称为版面设计，它只是将不同部分组合在一起的粗略草图。有很多工具可以帮助你做到这一点，但是最早的也是最受欢迎的工具之一就是笔和纸。这是我的草图：\n这个草图只是一个准则。当我们正式设计网站时，可以感变原来的草图。一个画草图的准则是尽可能的简略些。\n"
},
{
	"uri": "/zh-hans/python-basics/conditional-statements-loops/else-if-statement/",
	"title": "Else-if 条件",
	"tags": [],
	"description": "",
	"content": "在上一个练习中，我们学习了基本的if-else条件语句。如果需要快速复习，你可以查看条件语句。\n在本节中，我们将介绍一个新的条件，叫做 \u0026ldquo;elif\u0026rdquo;。\nElif 条件 Elif关键字 代表\u0026quot;else-if\u0026quot;条件。一个现实世界的例子是：如果我非常饿，我会吃蛋糕，否则如果我只是有点饿，我会吃一个苹果，否则我什么都不吃。您可以看到，当你希望在第一个条件不成立时尝试另一个条件时，可以使用它\n# elif语句的基本格式 if expression: statement(s) elif expression: statement(s) else: statement(s) 让我们再看一个例子 # 一个例子 if 1 \u0026gt; 3: print(\u0026#39;1\u0026gt;3\u0026#39;) elif 1 == 3: print(\u0026#39;1=3\u0026#39;) else: print(\u0026#39;1\u0026lt;3\u0026#39;) 由于我们可以看到第一个语句，1 大于 3，是假的，它评估为 false 。if 语句的内部将不会被执行。然后我们将评估 elif 语句，1 等于 3，这也评估为 false。elif 语句的内部也不会执行。因此，将打印 else 中的内容。\n注意: elif 与 if 语句不同 让我们来看两个例子 示例 A # 两个if语句的示例 A if 1 == 1: print(\u0026#39;1=1\u0026#39;) if 3 == 3: print(\u0026#39;3=3\u0026#39;) else: print(\u0026#39;wrong\u0026#39;) 示例A将打印:\n1 = 1\r3 = 3 示例 B # elif语句的示例 B if 1 == 1: print(\u0026#39;1=1\u0026#39;) elif 3 == 3: print(\u0026#39;3=3\u0026#39;) else: print(\u0026#39;wrong\u0026#39;) 示例B将打印:\n1 = 1 在示例A中，我们将评估第一个 if 语句（1==1）为 true 。然后将执行第一个 if 语句的内部。然后，我们将评估第二个 if 语句（3==3），它也将评估为 true 。第二个 if 语句的内部也将执行。\n在示例B中，我们将评估第一个 if 语句（1==1）为 true。然后，elif 和 else 的其余部分都不会被评估，因为 if 已经正确。\n小挑战 你能利用您在 \u0026ldquo;Python基础:布尔值\u0026rdquo; 中学到的知识来制作自己的elif示例吗？你可能需要复习布尔值来完成这个挑战。\n布尔值 "
},
{
	"uri": "/zh-hans/python-basics/conditional-statements-loops/loops/",
	"title": "循环",
	"tags": [],
	"description": "",
	"content": "Python 中的循环 如果你想多次执行一个任务，Python 有一种简单的方法来实现，即使用循环。Python 中有两种基本的循环类型：for 循环和 while 循环。\nFor 循环 For 循环用于遍历序列。假设你想重复一个简单的任务 5 次。下面是如何做的示例。\n以下 for 循环遍历列表 [1,2,3,4,5] 中的每个数字，将值 x 赋给它，然后执行 for 循环内的代码。\nfor x in [1,2,3,4,5]: print(\u0026#34;We\u0026#39;re on loop number\u0026#34;,x) 如果你想重复一个任务 10 次怎么办？100 次？1000 次？？\n编写包含 1000 个数字 [1,2,3,4,5,6,\u0026hellip;\u0026hellip;\u0026hellip;.,998,999,1000] 的列表将会很困难。有一个函数可以为你创建这个列表。\n以下是使用 range 函数创建列表的示例：\n下面的代码创建了一个从 1 开始到 10 结束的列表。\nrange(1,11) 现在尝试将上面示例中的列表 [1,2,3,4,5] 替换为这个 range 函数！\n在 for 循环中的列表不仅可以是数字，还可以是任何东西！下面是另一个示例：\nfruits = [\u0026#34;apple\u0026#34;,\u0026#34;banana\u0026#34;,\u0026#34;orange\u0026#34;] for x in fruits: print(x) While 循环 While 循环与 for 循环类似，但它们不是遍历序列，而是在满足某个条件的情况下重复执行。\n例如，让我们创建一个重复 5 次的 while 循环。\ncount = 0 while count \u0026lt; 5: print(\u0026#34;The current count is\u0026#34;, count) count += 1 #这等同于count = count + 1 我们发现，只要变量count小于5，while循环下面的所有代码都会执行。\n要小心！确保该条件在某个时候变为 false，否则循环将无限继续。\nBreak语句 我们之前学习了for循环和while循环在遍历完列表或满足某个条件之前都会继续执行。\n还有一种方法可以在列表结束之前或在满足条件之前停止运行这些循环。\n你可以使用 break 语句来实现这一点。它允许我们在for循环或while循环中退出循环。\n以下是一个在while循环中使用 break 的示例：\ncount = 0 while True: #这将使while循环一直运行下去！除非在循环中的某个地方有break语句。 print(\u0026#34;count is\u0026#34;, count) if (count == 10): #这表示如果计数等于10，然后退出while循环 print(\u0026#34;Breaking out of the loop!\u0026#34;) break count += 1 #这等同于count = count + 1 小挑战 给定一个食物列表，编写一个程序，除非它是用户最不喜欢的食物，否则输出 \u0026ldquo;I like [name of food]\u0026rdquo; foodList = [\u0026#34;apples\u0026#34;, \u0026#34;ice cream\u0026#34;, \u0026#34;pizza\u0026#34;, \u0026#34;bananas\u0026#34;, \u0026#34;carrots\u0026#34;, \u0026#34;squash\u0026#34;, \u0026#34;cucumbers\u0026#34;, \u0026#34;sandwich\u0026#34;, \u0026#34;oatmeal\u0026#34;, \u0026#34;cookies\u0026#34;, \u0026#34;cake\u0026#34;, \u0026#34;spinach\u0026#34;, \u0026#34;kale\u0026#34;] 给定一个大列表，例如下面的列表，编写一个程序，可以从该列表中找到特定的数字。 numList = [69, 430, 363, 80, 166, 476, 250, 38, 84, 405, 41, 302, 480, 57, 155, 17, 350, 87, 313, 36, 191, 367, 163, 167, 185, 93, 131, 314, 444, 452, 47, 457, 28, 21, 405, 350, 241, 121, 411, 152, 244, 207, 199, 371, 193, 4, 286, 482, 496, 283, 23, 466, 8, 84, 47, 231, 112, 329, 328, 85, 208, 161, 42, 251, 277, 207, 496, 3, 137, 138, 436, 447, 442, 313, 479, 464, 191, 19, 78, 333, 480, 36, 378, 232, 438, 451, 139, 444, 392, 75, 245, 151, 225, 50, 369, 49, 73, 325, 430, 335] 例如，请用户在控制台中输入一个数字，然后将是否找到了该数字的结果写入控制台。 提示：我们需使用 int(x) 将用户输入的信息转换为整数。\n提问 如果列表非常大，我们要如何更改这个程序？如果找到一个数字，是否需要继续搜索列表的其余部分？\n"
},
{
	"uri": "/zh-hans/python-basics/data-structures/tuples/",
	"title": "元组",
	"tags": [],
	"description": "",
	"content": "元组也是一种有序的元素集合，就像列表一样，但元组是不可变的。这意味着一旦分配了元组，就无法更改元组的元素（与列表不同，列表允许更改）。这种不可变性使得元组非常适用于当你不希望在整个程序中更改数据的情况。此外，元组通常用于存储不同数据类型的元素。在定义列表时使用方括号（[]）的地方，可以通过将所有元素放在括号（()）中并用逗号分隔来创建元组。\n#创建包含两个字符串类型元素的元组 my_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;) 元组也可以不使用括号创建。但最好使用括号。\n元组也可以包含不同类型的元素。\n#包含不同数据类型的元组 my_tuple = (\u0026#39;apple\u0026#39;, 1, 4.5) 访问元组的元素 我们可以使用方括号 [] 内的索引来访问元组的元素，就像列表一样。与列表一样，索引从 0 开始。\n#创建包含三个字符串类型元素的元组 my_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(my_tuple[0]) ## 输出 apple print(my_tuple[2]) ## 输出 mango 合并两个元组 我们可以使用 + 运算符将两个元组合并。\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) numbers = (1, 2, 3) #合并两个元组 fruits 和 numbers combined_tuple = fruits + numbers print(combined_tuple) ## 输出 (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;, 1, 2, 3) 元组的长度 len(tuple) 函数可以得到元组中的元素数。\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(len(fruits)) ## 输出 3 重新分配元组 由于元组是不可变的，我们无法更改元组的元素。所以 fruits[0] = 'lemon' 会产生错误，因为我们在尝试更改 'fruits' 的索引 0 处的元素。 但是，我们可以重新分配一个元组（替换整个元组）。\nmy_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(my_tuple) ## 输出 (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) # 重新分配 my_tuple my_tuple = (1, 2, 3) print(my_tuple) ## 输出 (1, 2, 3) 删除元组 我们可以使用 del 完全删除一个元组。\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(fruits) ## 输出 (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) # 删除 fruits del fruits print(fruits) ## 由于元组 fruits 不再存在，因此会出现错误 小挑战 让我们尝试一下刚才使用列表完成的相同练习，但使用元组。\n从下面的水果列表开始。打印水果列表，对于每个水果，询问用户是否喜欢它。如果他们喜欢它，就保留它。如果他们不喜欢它，就从列表中删除它。接下来，要求用户添加一个缺少的水果。将其添加到列表中，并打印出用户喜欢的水果数量。\nfruits = [\u0026#39;orange\u0026#39;, \u0026#39;kiwi\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] "
},
{
	"uri": "/zh-hans/python-basics/conditional-statements-loops/",
	"title": "条件语句和循环",
	"tags": [],
	"description": "",
	"content": "课程简介 在前一节中，我们学习了有关打印、注释和变量的知识。在本节中，我们将介绍条件语句的概念以及如何在Python中应用它们。条件语句就像\u0026quot;如果我饿了，我会吃点零食\u0026quot;和\u0026quot;在你饿的时候吃零食\u0026quot;这样的语句。\n让我们开始吧！\n课程科目\r条件语句 Else-if 条件 循环 嵌套循环 "
},
{
	"uri": "/zh-hans/python-basics/data-types/booleans/",
	"title": "布尔值",
	"tags": [],
	"description": "",
	"content": "布尔值是True（真）或False（假）的语句。与字符串或数字不同，布尔值 存储了关于真假的陈述：一件事物是真还是假？\n例如，如果我说：“你是机器人”，一个布尔值可以存储这个陈述是否为真。在这种情况下，由于你不是机器人（希望如此！），我们将存储False。\n关于以下问题，你的布尔值答案是什么？\n我是人类。 _______ 我有25个手指。 _______ 我喜欢饼干。 _______ 我最喜欢的颜色是蓝色。 ______\n最常见的布尔运算符是比较运算符，如小于或大于。在Python中，如何编写这些运算符如下所示。打印以下结果：fal\n运算符 描述 运算符 描述 \u0026lt; 小于 \u0026gt; 大于 \u0026lt;= 小于等于 \u0026gt;= 大于等于 == 等于 != 不等于 小挑战一 像往常一样，我们使用 print 打印以下结果：\nprint(5 + 8 \u0026lt; 10) print((3 + 5) * 6) == (65 - 17) 第一个陈述应返回False。第二个应返回True。\n小挑战二 尝试使用print打印以下表达式的答案。如果其中任何陈述的结果不合理，请寻求帮助！\n54 \u0026lt; (10 + 32) (37 / 5) != 7 \u0026ldquo;Hello\u0026rdquo; + \u0026ldquo;World\u0026rdquo; == \u0026ldquo;Hello World\u0026rdquo; False == False 小挑战三 尝试创建自己的表达式！\n趣事: 使用AND和OR运算符连接布尔值 你还可以使用AND和OR运算符将布尔表达式连接在一起。以下是描述我们如何连接布尔表达式时会发生什么情况的图表：\n表达式 结果 True and True True True and False False False and True False False and False False True or True True True or False True False or True True False and False False 总结一下，AND要求两个布尔表达式都为true，而OR只需要其中一个布尔表达式为true。以下是一些更多的例子：\n(5 \u0026lt; 8) and (9 != 10) 生成 True 因为5小于8，而9不等于10。 (8 \u0026lt;= 2) or (\u0026ldquo;h\u0026rdquo; + \u0026ldquo;e\u0026rdquo; == \u0026ldquo;he\u0026rdquo;) 生成 True 因为\u0026quot;h\u0026quot; + \u0026ldquo;e\u0026quot;的结果是\u0026quot;he\u0026rdquo;，即使8不小于或等于2。 (6 != 2 * 3) or (8 \u0026lt; 2 * 4) 生成 False 因为6不等于2 * 3，8小于2 * 4，都生成 False. 以下这些表达式会产生什么结果? (11-2 \u0026lt; 10) and (7+3 \u0026gt; 10) (True or 3 \u0026lt; 1) and (False or 3\u0026gt;1) "
},
{
	"uri": "/zh-hans/web-basics/putting-together/",
	"title": "组合网站的各个部分",
	"tags": [],
	"description": "",
	"content": "为了使你的浏览器了解你网站的每个网站元素是什么，我们需要使用HTML标签(label)对其进行标记。 HTML又称做超文本标记语言(HyperText Markup Language)。标签(label)是被符号 \u0026lt;, \u0026gt;包围的单词。例如，\u0026lt;img\u0026gt; 标记告诉你的浏览器 “这是个图像”。 \u0026lt;button\u0026gt; 标记告诉它 “这是一个按钮”。\n标签可以用来组织你的网页！下图概述了基本网页的结构。\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;通常包含其他使用的资讯库(library)和页面标题，而\u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;包含大部分显示的内容。\n大多数标签都需要一个开始标签和一个结束标签。例如，你将看到所有页面的顶部都有\u0026lt;html\u0026gt;开头标签，而结尾有\u0026lt;/html\u0026gt;结束标签。这告诉浏览器HTML元素在何处开始和在何处结束。将标签视为引号； 例如，电脑理解在\u0026lt;html\u0026gt;和\u0026lt;/html\u0026gt;标记之间的所有内容都是HTML网站的一部分。\n有一些标签（例如图像标签\u0026lt;img\u0026gt;）是 self-closing，这表示它们仅需要一个开始标签，而无需关闭标签。\n这是一个例子：\nSee the Pen HTML Basics by Deliana Escobari (@Sunny-Dee)\ron CodePen.\r"
},
{
	"uri": "/zh-hans/python-basics/functions/built-in-math/",
	"title": "内置数学函数",
	"tags": [],
	"description": "",
	"content": "Python 提供了许多重要的内置函数，我们可以在不需要提供函数定义的情况下使用它们。在本节中，我们将学习一些内置数学函数，使用这些函数可以对数字执行数学任务。\nmax() 和 min() 函数分别给我们提供了列表中的最大值和最小值：\nx = min(20, 10, 50, 25)\t#x = 10 print(x) y = max(20, 10, 50, 25)\t#y = 50 print(y) abs() 函数给我们提供了数字的绝对值（正数）：\nx = abs(-34)\t#x = 34 print(x) y = abs(90)\t#y = 90 print(y) pow(a, b) 函数给我们提供了 a 的 b 次方的值（ab）：\nx = pow(3,4)\t#x = 81 print(x) 小挑战 让我们把这些知识整合起来！我们看看能否创建一个程序，从用户那里获取 5 个数字，并打印出这些数字中最小的数的幂次最大值。例如，给定数字 2、7、4、11、9，返回 211。如果你能将它拆分成函数，那将获得额外的奖励分数！\n"
},
{
	"uri": "/zh-hans/python-basics/data-structures/sets/",
	"title": "集合",
	"tags": [],
	"description": "",
	"content": "就像列表一样，集合也是一组项目。集合和列表的区别在于集合不能包含重复项。因此，如果你原来有 5 块巧克力，将它们放入一个集合中，你将只剩下 1 块巧克力，因为重复项将被删除。 😢\n上图中，左边表示 室内游戏（国际象棋和乒乓球），右边表示 室外游戏（板球和足球）。中间表示这两个集合的共同部分。这些是既可以在室内又可以在室外玩的游戏（篮球和羽毛球）。中间部分也称为两个集合之间的交集。\n可以使用 set() 函数或将所有元素放在一对花括号中来创建集合。\nindoorGames = set([\u0026#34;Chess\u0026#34;, \u0026#34;Table Tennis\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;]) outdoorGames = {\u0026#34;Cricket\u0026#34;, \u0026#34;Football\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;} print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) print(\u0026#39;** Outdoor Games **\u0026#39;) print(outdoorGames) 输出\n** Indoor Games - 室内游戏 **\rset([\u0026#34;Chess\u0026#34;, \u0026#34;Table Tennis\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;])\r** Outdoor Games - 室外游戏 **\rset([\u0026#34;Cricket\u0026#34;, \u0026#34;Football\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;]) 集合的并集 如果我们有上面的 2 个集合，这两个集合的并集包含来自两个集合的游戏。输出将是一个新的集合。重复项将被删除。\n并集的符号是 |。\nallGames = indoorGames | outdoorGames print(\u0026#39;** All Games **\u0026#39;) print(allGames) 输出\n** All Games - 所有游戏 **\rset([\u0026#34;Chess\u0026#34;, \u0026#34;Table Tennis\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;, \u0026#34;Cricket\u0026#34;, \u0026#34;Football\u0026#34;]) 集合的交集 2 个集合的交集将是包含室内和室外游戏的集合。\n交集的符号是 \u0026amp;。\ncommonGames = indoorGames \u0026amp; outdoorGames print(\u0026#39;** Common Games **\u0026#39;) print(commonGames) 输出\n** Common Games - 室内和室外都能玩的游戏 **\rset([\u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;]) 集合的差异 2 个集合的差异将是包含一个集合中存在但在另一个集合中不存在的游戏的集合。\n差异的符号是 -。\nindoorOnlyGames = indoorGames - outdoorGames print(\u0026#39;** Indoor Only Games **\u0026#39;) print(indoorOnlyGames) 输出\n** Indoor Only Games - 只能在室内玩的游戏 **\rset([\u0026#34;Chess\u0026#34;, \u0026#34;Table Tennis\u0026#34;]) 打印集合的项目 我们不能像列表一样使用项目编号来打印集合的项目。集合的元素不是固定顺序的。\n因此，不能像在列表中那样做 indoorGames[0] 或 indoorGames[1]。但是，您可以使用 for 循环遍历集合的元素。\nfor g in indoorGames: print(g) 输出\nChess\rTable Tennis\rBasketball\rBadminton 向集合中添加项目 我们可以使用 .add 函数将新游戏添加到集合中。\nindoorGames.add(\u0026#34;Carrom\u0026#34;) print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) 输出\n** Indoor Games - 室内游戏**\rset([\u0026#34;Chess\u0026#34;, \u0026#34;Table Tennis\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;, \u0026#34;Carrom\u0026#34;]) 从集合中删除项目 我们可以使用 .discard 函数从集合中删除项目。\nindoorGames.discard(\u0026#34;Chess\u0026#34;) print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) 输出\n** Indoor Games - 室内游戏**\rset([\u0026#34;Table Tennis\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;, \u0026#34;Carrom\u0026#34;]) 如果你删除一个不在集合中的项目，你将不会得到任何错误。另一方面，如果你尝试从列表中删除一个不在集合中的项目，将得到 ValueError！\n小挑战 让我们尝试一下刚才使用列表和元组完成的相同练习，但使用集合。\n从下面的水果列表开始。打印水果列表，对于每个水果，询问用户是否喜欢它。如果他们喜欢它，就保留它。如果他们不喜欢它，就从列表中删除它。接下来，要求用户添加一个缺少的水果。将其添加到列表中，并打印出用户喜欢的水果数量。\nfruits = [\u0026#39;orange\u0026#39;, \u0026#39;kiwi\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] "
},
{
	"uri": "/zh-hans/python-basics/basics/comments/",
	"title": "注释 (Comments)",
	"tags": [],
	"description": "",
	"content": "\n在写Python 程序时，我们可以用 # 来添加注释。注释 在代码中并不会对程序造成影响。 # 符号之后的任何内容都是注释的一部分，会在程序执行时被忽略。我们在代码中加注释来告诉读者这些代码在做什么。它们可以使维护代码变得更容易，还可以帮助查找代码中的错误。\n在编写代码时，我们一直用 # 来添加注释来帮助理解。\n# This is my first line of code print(\u0026#34;Hello, World!) 小心，如果你删除了 # 符号， 代码就无法正常运行了！\n试着在你的第一行代码前添加注释然后点击运行。你会发现电脑会在程序运行时忽略你的注释。\n"
},
{
	"uri": "/zh-hans/python-basics/basics/variables/",
	"title": "变量",
	"tags": [],
	"description": "",
	"content": "在前面的练习中，我们学习了使用 print(\u0026quot;\u0026quot;) 语句打印不同的内容。虽然打印出一个数字或一个句子很棒，但我们还没有给这个数字和句子赋予含义。变量就是我们可以赋予字符串(str)、数字(int, float, complex)和布尔值(bool)等值的名称。以下是在 Python 中创建名为 s 的变量的方法。我们说 s 是一个字符串，它的值为 \u0026quot;Hello, World!\u0026quot;。\ns = \u0026#34;Hello, World!\u0026#34; x = 88 happy = True 单击运行.\n请注意，变量不会被打印到控制台。相反，变量只是将字符串、数字或布尔值保存到计算机的内存中。我们可以在其他语句中使用这些变量。例如，以下代码会将 \u0026quot;Hello Nuevo Foundation\u0026quot; 打印到控制台：\nstr1 = \u0026#34;Hello\u0026#34; str2 = \u0026#34;Nuevo Foundation\u0026#34; print(str1 + \u0026#34; \u0026#34; + str2) 你还可以运行以下代码将字符串打印在一起，同时在单词之间添加空格。\nstr1 = \u0026#34;Hello\u0026#34; str2 = \u0026#34;Nuevo Foundation\u0026#34; print(str1, str2) 变量是什么类型！ 在学习如何创建变量之前，我们需要学习 类型 的概念。类型描述了被存储的变量信息。\nPython 是一种动态类型语言，这意味着与 Java 等语言不同，在为变量赋值之前，我们不必指定它的类型。 而且，如果你原先有一个整数，但你删除了这个整数并在原先整数的地方创建了一个字符串，python 将允许你这样做。但是，你必须根据类型使用变量。\n以下是Python中重要的数据类型：\n类型 描述 示例 int 整数 20, 30, 35 char 字符，例如符号或单个字母 'A','b', '(', ']' String 一串字符 char \u0026quot;Hello\u0026quot;, \u0026quot;Bonjour\u0026quot;, \u0026quot;Hola\u0026quot; boolean 是 true 或否 false true, false double 小数 2.0, 3.14, 9.33 让我们回到在第一个示例中提到的三个变量，并确定它们的数据类型。s 是字符串，x 是整数，happy 是布尔值。\n小挑战 创建两个新变量：一个名为 comp 的变量，用于存储字符串 \u0026quot;Computer\u0026quot;。 一个名为为 five 的变量，用于存储数字 5。 接下来，使用这些变量和在前面的活动中学到的内容将以下内容用 print 语句打印到控制台。你_必须_使用变量！\nComputer\r5\rComputerComputer\r10\rComputerComputerComputer\r15\r提示：如果你遇到困难，请考虑使用 + 运算符。请记住，你可以在同一行中多次使用变量 comp 和 five！\n"
},
{
	"uri": "/zh-hans/python-basics/conditional-statements-loops/nested-loops/",
	"title": "嵌套循环",
	"tags": [],
	"description": "循环的高阶应用",
	"content": "嵌套循环 嵌套循环 是我们在前面练习中学到的关于for循环和while循环知识的拓展。在继续学习之前，你可能需要回顾一下 For循环和While循环页面。\n在本节课中，我们将在一个循环中使用另一个循环，这称为 嵌套循环。\n嵌套while循环 #这是嵌套while循环的格式 while expressionA: while expressionB: statement(B) statement(A) 在上面的 while 循环中，当表达式A产生 false 时，我们将跳过整个代码块。当表达式A产生 true 时，我们将进入内部while循环并检查表达式B。如果表达式B产生 true ，则将执行语句(B)。如果表达式B产生 false，我们将跳过内部while循环并执行语句(A)。\n如果表达式A产生false，则不会执行任何语句；只有当表达式A和表达式B都产生true时，才会执行语句(A)和语句(B)。\n让我们看一个嵌套while循环的示例。\n#这是嵌套while循环的示例。 x = 0 y = 0 #以下是外部循环 while x \u0026lt; 3: #如果\u0026#34;x \u0026lt; 3\u0026#34;是true，则打印 print(\u0026#34;Go through outer while loop, x is\u0026#34;, x, \u0026#34;y is\u0026#34;, y, sep = \u0026#34; \u0026#34;) #以下是内部循环 while y \u0026lt; 5: #如果\u0026#34;y \u0026lt; 5\u0026#34;是true，则打印 print(\u0026#34;Go through inner while loop, x is\u0026#34;, x, \u0026#34;y is\u0026#34;, y, sep = \u0026#34; \u0026#34;) y += 1 #完成每个内部循环后执行以下代码。 x += 1 y = 0 这是我们示例的输出。\nGo through outer while loop, x is 0 y is 0\rGo through inner while loop, x is 0 y is 0\rGo through inner while loop, x is 0 y is 1\rGo through inner while loop, x is 0 y is 2\rGo through inner while loop, x is 0 y is 3\rGo through inner while loop, x is 0 y is 4\rGo through outer while loop, x is 1 y is 0\rGo through inner while loop, x is 1 y is 0\rGo through inner while loop, x is 1 y is 1\rGo through inner while loop, x is 1 y is 2\rGo through inner while loop, x is 1 y is 3\rGo through inner while loop, x is 1 y is 4\rGo through outer while loop, x is 2 y is 0\rGo through inner while loop, x is 2 y is 0\rGo through inner while loop, x is 2 y is 1\rGo through inner while loop, x is 2 y is 2\rGo through inner while loop, x is 2 y is 3\rGo through inner while loop, x is 2 y is 4 提问 你能否尝试找出x和y值的变化并解释原因？\n(提示: 我们分别执行外部循环和内部循环多少次？)\n小挑战一 尝试更改嵌套while循环中的整数并预测输出结果。然后运行代码并观察输出结果。它们是否与您的预测相符？\n嵌套for循环 #这是嵌套for循环的格式 for variableA in rangeA: for variableB in rangeB: statements(B) statements(A) 在上面的 for 循环中，当变量A不在范围A内时，我们将跳过整个代码块。当变量A在范围A内时，我们将进入内部for循环。如果变量B在范围B内，将执行语句(B)。如果变量B不在范围B内，我们将跳过内部for循环并进入外部循环。\n如果变量A不在范围A内，将不会执行任何语句；只有当变量A在范围A内且变量B在范围B内时，才会执行语句(A)和语句(B)。\n让我们看一个示例。\n#这是嵌套for循环的示例 #以下是外部循环 for n in range(0, 3): #以下是内部循环 for m in range(0, 3): #如果m在范围(0, 3)内，则打印 print(\u0026#34;(\u0026#34;, n, \u0026#34;,\u0026#34;, m, \u0026#34;)\u0026#34;, end = \u0026#34; \u0026#34;) #如果n在范围(0, 3)内，则打印 print(\u0026#34;\u0026#34;) 这是我们示例的输出。\n( 0 , 0 ) ( 0 , 1 ) ( 0 , 2 ) ( 1 , 0 ) ( 1 , 1 ) ( 1 , 2 ) ( 2 , 0 ) ( 2 , 1 ) ( 2 , 2 ) 提问 你能否尝试解释打印的规律？\n(提示: 我们分别执行外部循环和内部循环多少次？)\n小挑战二 尝试更改嵌套for循环中的整数并预测输出结果。 然后运行代码并观察输出结果。它们是否与预测相符？\n提问 尝试初始化n和m。这会改变我们的嵌套循环的输出吗？为什么？ 然后运行代码并观察输出结果。它们是否与预测相符？\n提问 在本节课结束时，让我们思考以下问题：\n为什么初始化不会改变输出？ (提示: for循环中的变量代表什么？)\n如果我们想从(1, 1)开始打印，应该怎么做？ (提示: 如果更改范围会发生什么？)\n小挑战三 使用嵌套 for 循环或 while 循环，尝试打印以下排列\n```\r1 1 2 1 2 3 1 2 3 4 1 2 3 4 5\r```\r提示: 打印而不换行，可以使用 print(x, end=\u0026quot; \u0026quot;)。如果要强制换行，可以使用 print()。\n"
},
{
	"uri": "/zh-hans/web-basics/activity-1/",
	"title": "挑战1 - 创建一个基本的网站",
	"tags": [],
	"description": "",
	"content": "挑战1 - 创建一个基本的网站 打开网络编辑器CodePen（单击下面的\u0026quot;尝试一下\u0026quot;按钮） 使用标题标签(\u0026lt;head\u0026gt;)添加标题，使用段落标签(\u0026lt;p\u0026gt;)写有关Benji的段落 如果有时间：写一份Benji最喜欢的食物清单：火鸡，花生酱和奶酪 尝试一下！\n使用此参考图可以自己尝试一些HTML标签。\n标签 说明 例子 \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt; 描述一个HTML文档。任何网站都必须以开始标记开头，并以结束标记结尾。 上述的网络编辑器 CodePen 有例子 \u0026lt;!-- --\u0026gt; 描述评论。注释供其他网站设计人员查看，但不会显示在网站上。 \u0026lt;!-- This line will not show in the browser --\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; 包含所有向浏览器提供信息以正确显示网站的HTML元素。 \u0026lt;head\u0026gt;和\u0026lt;/head\u0026gt; 之内的HTML元素不会显示 上述的网络编辑器 CodePen 有例子。 \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; 包含用于命名浏览器选项卡的网站标题。 \u0026lt;head\u0026gt;\n\u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; 包含页面中显示的所有HTML元素，例如文本和图片。 上述的网络编辑器 CodePen 有例子。 \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt;\n\u0026hellip; \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; 定义标题。 \u0026lt;h1\u0026gt;定义最重要（最大）的标题，而\u0026lt;h6\u0026gt;定义最不重要（最小）的标题。 \u0026lt;h1\u0026gt;This will be a big title\u0026lt;/h1\u0026gt;\n\u0026lt;h4\u0026gt;This will be a smaller title\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; 描述一个段落。 \u0026lt;p\u0026gt;Dogs evolved to love humans. In conclusion, dogs are a human’s best friend.\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 在网站上一个部分。 \u0026lt;div\u0026gt;\n\u0026lt;h1\u0026gt;All about me\u0026lt;/h1\u0026gt;\n\u0026lt;/div\u0026gt; \u0026lt;img\u0026gt; 一个图像。这是一个自动关闭的代码，但你必须指定图片来源，以便浏览器知道从何处获取图片。 \u0026lt;img src=\u0026quot;aka.ms/Benji-the-dog\u0026quot;\u0026gt; \u0026lt;hr\u0026gt; 画一条水平线。如果你想分页的内容，另一个有用的自动关闭标签。 \u0026hellip;\n\u0026lt;hr\u0026gt;\n\u0026hellip; \u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt; 一个列表。要开始列表，请使用\u0026lt;ul\u0026gt;标记。对于要添加到列表中的每个项目，请在项目周围加上\u0026lt;li\u0026gt;和\u0026lt;/ li\u0026gt;标记。用\u0026lt;/ul\u0026gt;标记完成列表。 \u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;This is a list item.\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt; "
},
{
	"uri": "/zh-hans/python-basics/data-structures/",
	"title": "数据结构",
	"tags": [],
	"description": "",
	"content": "课程简介 在前一节中，我们学到了有关条件语句和循环的知识。在本节中，我们将介绍不同的数据结构。数据结构是一种组织和存储数据和信息的方法，以便用户可以高效地利用它们。在Python中，有三种主要的数据结构：列表、元组和集合。我们将在本部分中深入研究并使用它们。\n让我们开始吧！\n课程科目\r列表 元组 集合 "
},
{
	"uri": "/zh-hans/python-basics/functions/",
	"title": "函数",
	"tags": [],
	"description": "",
	"content": "\r函数 是组织相似或重复代码的一种方式。与其重复写相同的代码，我们可以将所需的代码放在函数中，然后在需要使用它的任何地方调用它。\n注意 函数的目的是帮助减少程序中的重复代码。\n创建函数 定义函数 - 名称与参数 要在Python中创建函数，我们必须使用 def 关键字。该关键字告诉代码编辑器以下是一个函数。def 后面跟着函数的名称。函数的名称用于从程序的其他部分调用您的函数。 为了通用化函数（我们可以在多个地方使用它），我们可能需要向函数传递一些信息。这通过参数实现。它们位于括号 () 中，并紧跟在函数名称之后。如果不需要参数，则可以忽略它们。函数声明以冒号结尾。 每次调用函数时，后续行上的语句都会被执行。在这里，Tab符号非常重要，所以你需要确保代码有正确缩进。函数定义行之后的每个缩进行（除了注释之外）都会在调用函数时执行。\n以下是一个函数的格式：\ndef functionName(parameter1, parameter2, ...): # 编写一些代码 # 从代码的其他部分使用 functionName 调用此函数 确保函数的第一行始终以冒号 : 结尾。\n编写函数内容 In Python, indentation defines which code is controlled by the function. In the example below, in order to call the function sectionA, you must specify 2 parameters, startMeasure and endMeasure. When you call sectionA, the 3 fitMedia function lines are run. The 2 fitMedia function calls at the bottom are outside of the sectionA function body.\n在Python中，缩进定义了由函数控制的代码。在下面的示例中，要调用函数 sectionA，你必须指定 2 个参数 startMeasure 和 endMeasure。当调用 sectionA 时，会运行 3 个 fitMedia 函数代码行。底部的 2 个 fitMedia 函数调用位于 sectionA 函数内容之外。\n#Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9) 位于 sectionA 函数下面缩进的代码是每次调用函数 sectionA 时执行的代码。\n注意： 由于 Python 中缩进非常重要，请确保函数的内容始终以 2 个空格开始\n从函数返回一个值 许多情况下，我们不仅想要打印结果或执行操作，还想要函数将执行操作的结果返回。为此，我们可以使用 return 关键字。\ndef my_function(x): return 5 * x print(my_function(3)) # 输出 15 print(my_function(5)) # 输出 25 使用函数 - 函数调用 要调用函数，请在你希望执行函数的任何地方输入函数的名称和其参数。例如，要调用函数 sectionA，我们可以这样做：\nsectionA(1,9) 在此示例中，sectionA 将以 startMeasure 值为 1 和 endMeasure 值为 9 进行调用。\n小心： 在 Python 中创建函数时，必须在调用函数之前定义函数及其内容。换句话说，在代码中，你需要将函数声明放在函数调用之前。否则，将收到类似下面的 NameError。参考以下示例图： 小挑战一 - 创建你自己的函数！ 挑战： 创建一个名为 addNumbers 的函数，它接受名为 number1 和 number2 的 2 个参数，并在控制台上打印它们的总和。使用参数 3 和 5 调用函数 addNumbers。 控制台上会打印什么？\n小挑战二 让我们尝试创建一些简单的数学函数。创建一个名为 add 的函数，该函数接受两个参数 number1 和 number2，并返回这两个数字的总和。\n首先复制 triple 函数的结构。更改 triple 函数的名称，并将参数 number 替换为 number1 和 number2，用逗号分隔。number1 和 number2 都应为整数(int)，不要忘记将它们相加！\n为了检查你的函数是否正常工作，请在函数定义之后添加以下代码，该代码调用 add() 函数并将其值保存在一个变量中。例如：\nvalue2 = add(2, 3)\rprint(\"This should print 5: \" + str(value2))\r小挑战三 你能否创建减法、乘法和除法的函数？\n通过调用每个函数并保存其返回值来测试这些函数，然后将其打印到控制台上。\n"
},
{
	"uri": "/zh-hans/web-basics/html-attributes/",
	"title": "HTML属性",
	"tags": [],
	"description": "",
	"content": "每个标签还可以具有其他信息，例如可以更改元素的样式属性(style attribute)。我们可以使用一些属性来更改元素的视觉外观，例如大小，颜色和文本字体。\n所有属性的格式为：属性=“内容”。例如，我们可以使用以下代码将段落的颜色更改为红色：\u0026lt;p style=\u0026quot;color:red\u0026quot;\u0026gt;This text is red\u0026lt;/p\u0026gt;.\n图像标签需要照片的位置，因此我们需要标签内的属性来告诉浏览器从何处获取图像。\n这是一个例子：\n结果如下： "
},
{
	"uri": "/zh-hans/python-basics/basics/reading-from-console/",
	"title": "从控制台中读取",
	"tags": [],
	"description": "",
	"content": "现在我们已经学习了变量的基础知识，我们可以让用户输入一些内容到我们的程序。使用以下代码告诉我们的程序等待直到用户在控制台中键入内容。然后，计算机会得到在控制台中键入的任何内容，并将其存储到名为 value 的变量中。\nvalue = input() 以下是如何使用 input() 得到用户输入的例子：\nprint(\u0026#34;What\u0026#39;s your name?\u0026#34;) value = input() print(\u0026#34;Hello \u0026#34; + value + \u0026#34;!\u0026#34;) 试一试！当单击运行时，你会注意到下面的图像尚未出现在控制台上。\n这是因为程序正在等待你输入一些内容！在右侧的控制台中输入您的名字或 \u0026lsquo;Nuvi\u0026rsquo;，然后按Enter键，检查它是否正确打印出来。\n即使我们输入一个数字，比如 8，变量 value 仍然会包含字符串 \u0026quot;8\u0026quot;。在尝试对输入变量进行数学运算时要小心！\n小挑战 让我们看看是否可以编写一个程序，首先将以下两行内容打印到控制台：\nWelcome!\rHow can I help you today?\r然后，控制台等待用户输入。用户在控制台中键入内容并按下 \u0026ldquo;Enter\u0026rdquo; 键后，计算机会打印出：\nYou asked: [input]?\rI don’t know the answer to [input]. Goodbye!\r[input] 应该替换为用户在控制台中输入的内容。例如，如果您想问 \u0026ldquo;How old am I?\u0026quot;，计算机将打印出 \u0026ldquo;I don’t know the answer to \u0026hellip; \u0026quot;\n这与我们上面一起学习的示例非常相似。尝试对我们提供的内容进行一些小的更改。\n"
},
{
	"uri": "/zh-hans/web-basics/activity-2/",
	"title": "挑战2 - CSS",
	"tags": [],
	"description": "",
	"content": "用CSS设计网站的样式 HTML标签告诉浏览器要使用哪些网站元素（标题，照片，表格，等）。但是我们还需要告诉它如何显示和摆放这些元素。我们可能希望标题位于中间或网站的右侧; 我们也可能想要放张图片再右侧。我们可以通过两种方式来设计网站的样式：\n使用HTML属性 使用阶层式样式表 (CSS)。 阶层式样式表（CSS） 虽然HTML属性很容易使用，但它们很快就会变得混乱。如果我们希望做很多样式设计，HTML元素可能会变得很长且难以阅读。此外，如果我们想用相同的方式设置许多元素的样式呢，我们将不得不复制每个元素的所有属性。这样不但效率不高并且容易出错。对于设计大多网站样式，最好使用CSS。\nCSS文件与HTML标记紧密配合。每个HTML标签可以具有一个class 属性或一个 id 有助于标识每个元素的属性。不同的元素可以有相同的类（class），一个元素可以有多个不同的类(class)。但是，一个元素只能有一个单一的id，并且该id无法在元素之间共享。 CSS文件会使用这些属性来显示与class或id相关的网站元素。\n以下是一的例子：\nSee the Pen Styling it up by Deliana Escobari (@Sunny-Dee) on CodePen.\n单击左上角的“HTML”选项以查看HTML程式编码 ，然后单击“CSS”选项以查看CSS程式编码 。\n让我们看一下HTML代码。找具有属性\u0026quot;info\u0026quot;的标签\u0026lt;div\u0026gt;，看起来像\u0026lt;div id=\u0026quot;info\u0026quot;\u0026gt;。通过\u0026lt;div\u0026gt;的id，我们可以使用CSS来为这个HTML元素指定样式。\n切换到CSS文件。在这，我们还可以为特定类型的所有元素赋予样式。例如，我们可以使用CSS为所有\u0026lt;header\u0026gt;元素赋予相同的样式。在\u0026lt;header\u0026gt;\u0026lt;/header\u0026gt;中，我们告诉浏览器为所有标题(header)着#0097A7色（蓝绿色）。\n让我们讨论一下CSS的语法。\n首先，如果要为所有具有相同标签的元素（例如: \u0026lt;header\u0026gt;）设置统一样式，只需输入名称即可（例如: header） 如果要使用class或id设置元素样式，请分别在class或id名称前放置 . 或 #。 然后，对于要更改的每个属性，使用这个格式：属性名称(attribute-name)：值 (value) 并且以 ; 结尾。所有这些样式都应由 { 和 } 包围。 本教程中无法涵盖所有样式元素。上网查询，如果你不确定如何使用CSS完成所需的样式。\n尽管CSS可以识别140种颜色名称，例如“green(绿色)”，“red(红色)”和“blue(蓝色)”，但这仍然是有限制性的。例如，如果我们想要深绿色或稍浅的绿色怎么办？为此，我们可以引用十六进制或RGB形式的颜色。检查此链接以查看颜色及其对应的十六进制形式。\n添加新字体 正如你可能知道的，有多种字体可以使用。这一部分将告诉你如何将不同的字体导入你的网站。\n让我们从网上导入Heebo字体。首先，复制贴上以下文字于CSS文件顶部: @import url('https://fonts.googleapis.com/css?family=Heebo|Open+Sans'); 然后，我们将body标签设定适用此字体。由于body标签包含所有HTML元素，所有元素都会使用此字体。 请注意，花括号内的格式为： 名称(name): 值(value); \u0026lt;span style=\u0026quot;color:purple\u0026quot;\u0026gt;@import url('https://fonts.googleapis.com/css?family=Roboto+Mono'); \u0026lt;/span\u0026gt;\nfont-family: 'Roboto Mono', monospace; \u0026lt;span style=\u0026quot;color:purple\u0026quot;\u0026gt; @import url('https://fonts.googleapis.com/css?family=Indie+Flower');\u0026lt;/span\u0026gt;\nfont-family: 'Indie Flower', cursive; \u0026lt;span style=\u0026quot;color:purple\u0026quot;\u0026gt;@import url('https://fonts.googleapis.com/css?family=Pacifico'); \u0026lt;/span\u0026gt;\nfont-family: 'Pacifico', cursive; \u0026lt;span style=\u0026quot;color:purple\u0026quot;\u0026gt;@import url('https://fonts.googleapis.com/css?family=Permanent+Marker');\u0026lt;/span\u0026gt;\nfont-family: 'Permanent Marker', cursive; 挑战2 打开网络编辑器（单击下面的“尝试一下！”按钮） 添加id属性到一个header标签。例如，\u0026lt;header id=\u0026quot;page-title\u0026quot;\u0026gt; 切换到CSS页面，写下 #page-title\n{\n} 改标题颜色：例如，color: yellow; 在花括号内更改字体：例如，Roboto Mono 。并添加 @import url('https://fonts.googleapis.com/css?family=Roboto+Mono') 于页面顶部。 尝试一下！\n"
},
{
	"uri": "/zh-hans/web-basics/media-elements/",
	"title": "媒体元素",
	"tags": [],
	"description": "",
	"content": "添加GIF GIF代表“图形交换格式”，它是一种图像文件。 GIF和一般图像的区别是该文件包含许多图像。当显示在浏览器中时，图像将按顺序播放，类似于手翻书。\n新增影片 除了文字和图像，我们也可以增加视频。视频文件非常大，因此最好上传此视频于网路，例如YouTube。一旦上传到YouTube，我们将如何播放它？我们将使用一个称为iframe的特殊元素\niframe会显示其他网站的HTML。这就像一个窗口，你可以在你的网站中查看其他网站发生的情况。此过程称为嵌入（embedding）。例如，下面的视频是Benji Instragram的iframe：\nView this post on Instagram Push yourself to try new things! 🍉 I stick to the paleo diet most days (usually just the meat part) but on occasion I go for something crazy\nA post shared by Benji Escobari Marquez (@benjimite_thegudboi) on Aug 25, 2018 at 10:05pm PDT\n许多网站都提供iframe嵌入你的网站。例如，以下是查找YouTube视频的iframe代码的方法：\niframe 例子 复制以下代码：\n\u0026lt;iframe width=\u0026#34;560\u0026#34; height=\u0026#34;315\u0026#34; src=\u0026#34;https://www.youtube.com/embed/lQsqEBSGdyc\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt; \u0026lt;/iframe\u0026gt; 将其黏贴到你的CodePen上，它将显示如下:\n"
},
{
	"uri": "/zh-hans/web-basics/activity-3/",
	"title": "挑战3 - 添加Nuvi的GIF",
	"tags": [],
	"description": "",
	"content": " 点击此链接以查看可用的GIF 单击你喜欢的一个，然后选择“嵌入”（Embed）\n从“ GIF嵌入代码”（GIF Embed Code）下方的白框中复制代码 将其贴上于\u0026lt;body\u0026gt;标签内。 尝试一下！\n"
},
{
	"uri": "/zh-hans/web-basics/activity-4/",
	"title": "挑战4 - 添加联系表格",
	"tags": [],
	"description": "",
	"content": "添加联系表格 最后，我们将添加联系表格，以便人们对Benji感兴趣时与我们联系。\n大多数浏览器不支持直接从联系表单发送电子邮件，因为用户能轻易发送垃圾邮件。垃圾邮件是通过网路发送的不相关或不适当的邮件。因此，要发送表单，我们将使用FormSpree\r的免费服务。如果我们希望联系表中的消息发送到我们的电子邮件中，我们首先需要通过FormSpree进行确认。这种确认方法可以防止不良行为者发送垃圾邮件。\nSee the Pen Contact Form by Deliana Escobari (@Sunny-Dee)\ron CodePen.\n挑战4 单击自己“尝試一下！”按钮打开编辑器 更改 \u0026lt;YOUR EMAIL HERE!\u0026gt; 成为你的个人电子邮件或者使用 email@nuevofoundation.org 尝试发送讯息 将任何样式添加到窗体。例如，更改字体或颜色 尝试一下！\n"
},
{
	"uri": "/zh-hans/web-basics/activity-5/",
	"title": "挑战5 - 最后的挑战",
	"tags": [],
	"description": "",
	"content": "使用你所学的知识，让我们尝试创建一个关于你的网站！尝试使用以下某些部分或全部：\n标题和段落标签 不同的字体 不同的颜色 将图片添加到你的网站 一个列表 加入GIF或视频 尝试一下！\n"
},
{
	"uri": "/zh-hans/web-basics/hosting/",
	"title": "托管你的网站",
	"tags": [],
	"description": "",
	"content": "在网上托管你的网站！ 现在，你已经创建了自己的个人网站，让我们将其托管在网路上，以便每个人都可以点阅它！你将需要一个GitHub帐户。如果你没有，请在此处\r创建一个。\n创建帐户并验证电子邮件地址后，你将进入此页面。\n现在，你将需要创建一个新的存储库（repository）来存储网站的内容！将存储库视为一个巨大的文件夹，可以为给定项目存储许多其他文件和文件夹。你可以通过选择\u0026quot;启动项目(Start a Project)\u0026quot; 或 \u0026ldquo;创建新存储库(Create a new repository)\u0026ldquo;来创建一个。需要牢记以下两个非常重要的事情：\n你的存储库名称不能有任何空格，但是你可以使用破折号(\u0026ndash;)或大写字母来仿造空格！ 选中\u0026quot;Initialize this repository with a README\u0026quot;框 恭喜你！你已经创建了第一个存储库！在此处上传属于你网站的所有文件和文件夹。现在，当你转到个人资料页面时，新的存储库现在将显示在\u0026quot;存储库（Repositories）\u0026ldquo;下。\n上传了为网站创建的所有内容后，回该存储库并选择\u0026quot;设置（Settings）\u0026quot;。\n在此网页，一直向下滚动到GitHub Pages部分。\n将Source 从\u0026quot;None\u0026rdquo; 更改为 \u0026ldquo;master branch\u0026rdquo;。然后点击\u0026quot;GitHub Pages\u0026quot;顶部的链接（在下面的示例中，该链接为https://exampleaccount1234.github.io/myFirstSite/）。现在，任何人都可以使用此网址访问你的网站！\n"
},
{
	"uri": "/zh-hans/web-basics/conclusion/",
	"title": "如果你想知道",
	"tags": [],
	"description": "",
	"content": "\n你可能会担心Benji，但我们很高兴地告诉你，他通过自己的网站找到了自己的家。现在，Benji 是一个有家庭快乐的小狗。\n"
},
{
	"uri": "/zh-hans/python-basics/help/",
	"title": "求助, 我有困难!",
	"tags": [],
	"description": "Setting up headphones",
	"content": "别担心！看看以下的信息是否有帮助，如果没有，随时联系我们之一，我们会提供更多帮助。 缩进在Python中非常重要。在代码中要小心空格和Tab符号，因为缩进错误有时可能很难发现。\n但好的一方面是，严格的格式使Python代码非常干净和有组织。你的所有变量和函数是否都按照指示正确缩进了吗？\nSyntaxError: 无效的语法 验证你的关键字是否拼写正确，以及是否遵循了定义的结构。\nIndentationError: 意外的缩进 如果看到这个错误，请检查缩进。\nNameError: 全局名称'---'未定义 在函数内定义的变量只能在函数内部使用。如果尝试在另一个函数中使用来自一个函数的变量，将收到此错误消息。\n要使信息可用于其他函数，可以使用return语句将其传递出一个函数，你可以将它分配给一个变量。然后，可以使用参数将其传递到另一个函数。有关详细解释，请阅读函数教程链接。\n无法识别错误：拼写错误？ 通常在关键字拼写错误时会收到此错误消息。检查所有的关键字。\nTypeError: 无法隐式将\u0026rsquo;int\u0026rsquo;对象转换为str 请确保你没有尝试在字符串操作中使用整数（无法将字符串与整数连接起来。必须首先将整数转换为字符串）。\n"
},
{
	"uri": "/zh-hans/web-basics/answer-key/",
	"title": "Answer Key - Web Basics",
	"tags": [],
	"description": "",
	"content": "Special note: This curriculum allows students to be creative. The below is just an example of what they can do, please use your best judgement and ask for guidance if needed. The answer key provided here is fairly long because we are including snippets of full HTML for context.\nWhen a student clicks on the \u0026lsquo;Try it yourself!\u0026rsquo; it\u0026rsquo;ll open a new tab with some of the HTML code (and CSS code) already scaffolded.\nChallenge 1 Solution should have:\nHeader tags to add a title and the paragraph tags to write a paragraph about Benji. (optional) A list of Benji’s favorite treats: turkey, peanut butter, and string cheese \u0026lt;head\u0026gt; \u0026lt;!-- Challenge 1: Add title and header tags. --\u0026gt; \u0026lt;title\u0026gt;My exciting title!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Content goes inside the body --\u0026gt; \u0026lt;!-- Challenge 1: Add a header, a paragraph. --\u0026gt; \u0026lt;h1\u0026gt;About benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Benji is a cute pup. His favorite sport is fetch. He likes long walks in the woods. Once he found a big stick.\u0026lt;/p\u0026gt; \u0026lt;!-- Challenge 1 (optional) Add a list. --\u0026gt; \u0026lt;h5\u0026gt; Benji\u0026#39;s favorite snacks \u0026lt;/h5\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Turkey\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Peanut Butter\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;String Cheese\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; Challenge 2 Solution should have:\nHTML: An id attribute to one of the header tag. For example, \u0026lt;header id=\u0026quot;page-title\u0026quot;\u0026gt; CSS: A different title color by adding color: yellow; inside the curly braces CSS: A different font by adding font-family: ‘Roboto Mono’, monospace; inside the curly braces and adding @import url(‘https://fonts.googleapis.com/css?family=Roboto+Mono\u0026rsquo;); at the top of the CSS tab \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Challenge 2: page-title id attribute --\u0026gt; \u0026lt;header id=\u0026#34;page-title\u0026#34;\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;img id=\u0026#34;dog\u0026#34; src=\u0026#34;https://aka.ms/Benji-the-dog\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; @import url(\u0026#39;https://fonts.googleapis.com/css?family=Roboto+Mono\u0026#39;); #page-title { color: yellow; font-family: \u0026#39;Roboto Mono\u0026#39;, monospace; } Challenge 3 Nuevo Foundation GIFs: https://giphy.com/nuevofoundation\rClick on \u0026rsquo;embed\u0026rsquo; and copy the GIF embed code. Paste the GIF embed code anywhere in the \u0026lt;body\u0026gt; tag Example iframe code:\n\u0026lt;iframe src=\u0026#34;https://giphy.com/embed/oywrR92C9YBlrSuUKP\u0026#34; width=\u0026#34;480\u0026#34; height=\u0026#34;480\u0026#34; frameBorder=\u0026#34;0\u0026#34; class=\u0026#34;giphy-embed\u0026#34; allowFullScreen\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://giphy.com/gifs/nuevofoundation-rockstar-nuvi-oywrR92C9YBlrSuUKP\u0026#34;\u0026gt;via GIPHY\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; Integrated into sample \u0026lsquo;Try it yourself code!\u0026rsquo;:\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;!-- Challenge 3: Paste your code here! --\u0026gt; \u0026lt;iframe src=\u0026#34;https://giphy.com/embed/oywrR92C9YBlrSuUKP\u0026#34; width=\u0026#34;480\u0026#34; height=\u0026#34;480\u0026#34; frameBorder=\u0026#34;0\u0026#34; class=\u0026#34;giphy-embed\u0026#34; allowFullScreen\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://giphy.com/gifs/nuevofoundation-rockstar-nuvi-oywrR92C9YBlrSuUKP\u0026#34;\u0026gt;via GIPHY\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Challenge 4 The contact form is already added for the students. They will simply need to modify their email in the email section and then alter any styling they want!\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Challenge 4: Contact Form --\u0026gt; \u0026lt;div class=\u0026#34;contact-section\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Contact me\u0026lt;/h3\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;!-- Change the following line --\u0026gt; \u0026lt;form action=\u0026#34;https://formspree.io/email@nuevofoundation.com\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Tell Benji who you are\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026#34;message\u0026#34;\u0026gt;Your message: \u0026lt;/label\u0026gt; \u0026lt;textarea name=\u0026#34;message\u0026#34; placeholder=\u0026#34;Tell me about you\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Hi!\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;img id=\u0026#34;dog\u0026#34; src=\u0026#34;https://aka.ms/Benji-the-dog\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; .contact-section { width: 250px; margin: 10px; padding: 10px; background-color: #FCFC69; /* Challenge 4: change the color here for styling */ } Challenge 5 No solution here - the students are creating their own sites based on what they learned. A few notes:\nEncourage students to use all of the different things they learned (ie. CSS, form, GIF) Encourage students to create something they would want to show other people. Have fun!\n"
},
{
	"uri": "/zh-hans/python-basics/",
	"title": "Python: 基础入门",
	"tags": [],
	"description": "学习使用 Python 编程语言的基础知识",
	"content": "课程简介 欢迎来到 Python: 基础入门 课程, 在这里，我们将学习一种广泛使用的高级编程语言。 通过使用Python我们可以为计算机提供指令来编写令人激动的程序！\nPython是由Guido van Rossum在1985-1990年间创建的高级编程语言。\n高级编程语言之所以“高级”，是因为它与在计算机的中央处理器 （CPU） 上运行的原始代码有很大不同。高级编程语言是以我们人类的日常语言为基础的一种编程语言，它比低级程序语言更易于理解。高级代码在被翻译成低级语言后，由特定的CPU接收和运行。为了使代码运行，用高级语言编写的每一行代码都必须在被计算机执行之前被翻译成机器语言。\n如今，Python被世界各地的开发人员使用。具体来说，Python被用于网站开发，软件组件和应用，还有数据科学，人工智能和机器学习技术等等。\n在本课程中，我们将介绍Python的所有基本功能和概念。\n如果你在任何时候遇到困难和问题, 可以访问 求助, 我有困难!\r页面，了解一些小提示和常见错误的修复。\n目录 课程科目\r基础知识 从 Trinket 开始学习 写入控制台 (print打印语句) 注释 (Comments) 变量 从控制台中读取 数据类型 字符串 数值 布尔值 条件语句和循环 条件语句 Else-if 条件 循环 嵌套循环 数据结构 列表 元组 集合 函数 内置函数 内置数学函数 求助, 我有困难! "
},
{
	"uri": "/zh-hans/web-basics/",
	"title": "HTML &amp; CSS: 入门网站设计",
	"tags": [],
	"description": "有关如何从头开始制作简单网站的入门指南",
	"content": "让我们建立一个网站！ Benji出生于德克萨斯州休斯顿。Benji出生后不久，毁灭性的飓风袭击了休斯顿。哈维飓风使Benji家人和3万多人流离失所。Benji不会说人话，所以我们不知道细节。我们所知道的是，Benji正在寻找家园，并致力于成为一个好孩子，无论他走到哪里。让我们建立一个网站，以便我们分享他的信息，并找到他永远的家！\n目录 科目\r基础知识 组合网站的各个部分 挑战1 - 创建一个基本的网站 HTML属性 挑战2 - CSS 媒体元素 挑战3 - 添加Nuvi的GIF 挑战4 - 添加联系表格 挑战5 - 最后的挑战 托管你的网站 如果你想知道 "
},
{
	"uri": "/zh-hans/",
	"title": "Nuevo Foundation 研讨会",
	"tags": [],
	"description": "",
	"content": "研讨会 HTML \u0026amp; CSS: 入门网站设计\r有关如何从头开始制作简单网站的入门指南\nPython: 基础入门\r学习使用 Python 编程语言的基础知识\n贡献 想帮助改进我们的研讨会或网站吗？请点击这里： Workshop Contributor Guidelines\r!\n"
},
{
	"uri": "/zh-hans/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/zh-hans/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]