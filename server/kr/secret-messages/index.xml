<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43;: 비밀 메시지 on Nuevo Foundation Workshops</title>
    <link>/kr/secret-messages/</link>
    <description>Recent content in C&#43;&#43;: 비밀 메시지 on Nuevo Foundation Workshops</description>
    <generator>Hugo</generator>
    <language>kr</language>
    <lastBuildDate>Fri, 27 Mar 2020 20:24:33 -0700</lastBuildDate>
    <atom:link href="/kr/secret-messages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Repl.It 사용하기</title>
      <link>/kr/secret-messages/using-repl-it/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/using-repl-it/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/sdO27-l4aqM&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;왕과 왕비를 돕기 위해, 우리는 C++이라는 프로그래밍 언어로 프로그램을 개발할 것입니다. 이 프로그램을 사용하면 메시지를 입력하고, 프로그램이 메세지를 비밀 메시지로 변환할 수 있습니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;replit-사용법&#34;&gt;Repl.It 사용법&lt;/h2&gt;&#xA;&lt;p&gt;오늘 우리는 Repl.It을 사용할 것입니다. 시작하기 전에, Repl.It 계정이 없다면 먼저 가입해야 합니다.&#xA;아래 버튼을 클릭하여 Repl.It 계정을 생성하세요. 가입하려면 이메일 계정이 필요합니다. 이미 Repl.It 계정이 있다면, 아래 버튼을 사용해 로그인할 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a class=&#34;my-2 mx-4 btn btn-info&#34; href=&#34;https://replit.com/signup&#34; target=&#34;_blank&#34;&gt;Replit 가입 하기&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 1 - 출력하기t</title>
      <link>/kr/secret-messages/activity-1/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/activity-1/</guid>
      <description>&lt;p&gt;우리가 비밀 메시지를 생성할 수 있으려면, 먼저 프로그램에 입력할 메시지를 작성해야 합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a class=&#34;my-2 mx-4 btn btn-info&#34; href=&#34;https://replit.com/@nuevofoundation/activity-1-english&#34; target=&#34;_blank&#34;&gt;Replit 실행하기&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;이를 위해, 먼저 메시지가 누구를 위한 것인지 콘솔에 출력하도록 컴퓨터에 지시할 것입니다. 아래는 우리가 사용할 명령어입니다:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cout &amp;lt;&amp;lt; &amp;#34;Hello Developer!&amp;#34; &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 코드 줄에 대해 더 알아봅시다.&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;정보&#34;&gt;&lt;h3 id=&#34;문자열-strings&#34;&gt;문자열 (Strings)&lt;/h3&gt;&#xA;&lt;p&gt;따옴표(&amp;quot;&amp;quot;)로 감싸인 모든 것은 문자열(String)이라고 부릅니다. 문자열은 문자, 숫자, 글자 또는 기호로 이루어진 연속적인 데이터입니다.&#xA;예를 들어, 위 코드 줄에서 &lt;code&gt;&amp;quot;Hello Developer!&amp;quot;&lt;/code&gt;는 문자열입니다. &lt;code&gt;&amp;quot;123&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;abc!&amp;quot;&lt;/code&gt; , 또는 &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; 또한 문자열의 예입니다. 하지만 , &lt;code&gt;123&lt;/code&gt;, &lt;code&gt;abc!&lt;/code&gt; , 또는 , &lt;code&gt;Hello!&lt;/code&gt;는 따옴표로 감싸지 않았으므로 문자열이 아닙니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 2 - 변수와 입력</title>
      <link>/kr/secret-messages/activity-2/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/activity-2/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/umCdJDmdf3s&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;멋져요! 이제 한 단계 더 나아가 봅시다. 이번에는 메시지를 출력하는 것뿐만 아니라, 수신자의 이름을 입력 받아 프로그램이 &amp;ldquo;Hello&amp;quot;라고 말하도록 만들어 보겠습니다.&lt;/p&gt;&#xA;&lt;p&gt;이를 위해, 우리는 **변수(Variable)**가 필요합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;정보&#34;&gt;&lt;h3 id=&#34;변수variable&#34;&gt;변수(Variable)&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;변수&lt;/strong&gt;는 정보를 저장하는 컨테이너입니다. 변수에는 다양한 종류가 있으며, 각 변수는 서로 다른 유형의 정보를 저장합니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;string&lt;/strong&gt;: :  문자, 숫자, 기호의 연속적인 데이터(문자열)를 나타냅니다. 문자열은 항상 따옴표(&amp;quot;&amp;quot;)로 감싸야 합니다.&#xA;예시: &amp;ldquo;hello&amp;rdquo;, &amp;ldquo;1,2,3&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;int&lt;/strong&gt;: 양수 또는 음수의 정수를 나타냅니다.&#xA;예시: 1, 100, -250&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;char&lt;/strong&gt;: 단일 문자를 나타냅니다. 문자는 항상 작은따옴표(&amp;rsquo;&amp;rsquo;)로 감싸야 합니다.&#xA;예시: &amp;lsquo;A&amp;rsquo;, &amp;rsquo;e&amp;rsquo;, &amp;lsquo;I&amp;rsquo;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;bool&lt;/strong&gt;: true(참) 또는 false(거짓)의 값을 나타냅니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;변수를 생성하려면 다음과 같이 선언합니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 3 - 반복문 (Loops)</title>
      <link>/kr/secret-messages/activity-3/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/activity-3/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/zEQkGgS779g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;좋아요!&lt;/p&gt;&#xA;&lt;p&gt;이제 왕께서 메시지를 문자를 통해 입력하도록 요청하셨습니다. 나중에 메시지를 수정할 수 있도록 하기 위함입니다.&lt;/p&gt;&#xA;&lt;p&gt;이를 위해 **반복문(Loop)**이라는 것을 사용해야 합니다. 반복문은 특정 코드 블록을 여러 번 실행할 수 있게 합니다. 아래의 예제를 살펴보세요. 이 코드는 반복문을 사용하여 숫자를 출력합니다.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for(int i=0; i&amp;lt;3; i++){&#xD;&#xA;  cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s try to understand what this line of code does.&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;정보&#34;&gt;&lt;h3 id=&#34;반복문loops&#34;&gt;반복문(Loops)&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;for(int i=0; i&amp;lt;3; i++) { }&lt;/code&gt;&#xA;이 코드는 중괄호 {} 안에 있는 명령어를 반복문(loop)으로 실행하도록 프로그램에 지시합니다. 이 명령어에는 세 가지 주요 부분이 있습니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 4 - 조건문 (Conditions)</title>
      <link>/kr/secret-messages/activity-4/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/activity-4/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/eweOJoWtuwg&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;좋아요!&lt;/p&gt;&#xA;&lt;p&gt;우리는 점점 비밀 메시지를 완성하는 데 가까워지고 있습니다. 하지만 이 메시지를 해독(decrypt)할 수 있어야 한다는 점도 잊지 마세요!&lt;/p&gt;&#xA;&lt;p&gt;이를 위해 콘솔에서 입력 값을 받을 것입니다:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;1을 입력하면 메시지를 암호화(encrypt)합니다.&lt;/li&gt;&#xA;&lt;li&gt;2를 입력하면 메시지를 해독(decrypt)합니다.&#xA;이 작업을 위해 **조건문(Condition)**이 필요합니다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;정보&#34;&gt;&lt;h3 id=&#34;조건문-ifelse&#34;&gt;조건문 if/else&lt;/h3&gt;&#xA;&lt;p&gt;프로그래밍에서 조건문이란 특정 조건이 참(true)인지에 따라 명령어 또는 명령어 그룹을 실행하거나 실행하지 않도록 지시하는 것입니다. 이는 다음과 같이 동작합니다:&#xA;만약(if) 특정 조건이 충족되면, 이 명령어를 실행합니다. &lt;strong&gt;그렇지 않다면(if not)(else)&lt;/strong&gt; 다른 명령어를 실행합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 5 - ASCII 코드</title>
      <link>/kr/secret-messages/activity-5/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/activity-5/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MeOQFpey0pA&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;좋아요!&#xA;이번 활동에서는 수신자의 이름을 암호화(Encrypt)해 보겠습니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;ASCII Code&lt;/strong&gt; 써 봅시다!&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;정보&#34;&gt;&lt;h3 id=&#34;ascii-코드&#34;&gt;ASCII 코드&lt;/h3&gt;&#xA;&lt;p&gt;ASCII 코드는 각 문자에 숫자 값이 있음을 보여줍니다. 예를 들어 &amp;lsquo;A&amp;rsquo; 문자는 숫자 65, &amp;lsquo;B&amp;rsquo;는 66, &amp;lsquo;C&amp;rsquo;는 67 등입니다.&lt;/p&gt;&#xA;&lt;p&gt;다음 목록은 가장 일반적으로 사용되는 문자의 값을 보여줍니다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../media/ascii-english.png&#34; alt=&#34;ASCII 코드 목록&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;각 문자에는 숫자 값이 있으므로 이를 사용하여 이 문자에 값을 더하거나 뺄 수 있으므로 특정 방식으로 문자의 순서를 변경할 수 있습니다. 문자(&amp;lsquo;char&amp;rsquo;)를 숫자(&amp;lsquo;int&amp;rsquo;)로 변환하거나 그 반대로 변환할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 6 - 함수 (Functions)</title>
      <link>/kr/secret-messages/activity-6/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/activity-6/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/hSsqsvhyYAA&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;좋아요!&lt;/p&gt;&#xA;&lt;p&gt;여러분은 이미 프로그램의 많은 부분을 완성했습니다!&lt;/p&gt;&#xA;&lt;p&gt;이번 활동에서는 **함수(Function)**를 사용하여 코드를 섹션 별로 그룹화합니다.&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;정보&#34;&gt;&lt;h3 id=&#34;함수function&#34;&gt;함수(Function)&lt;/h3&gt;&#xA;&lt;p&gt;함수를 사용하면 프로그램의 작업을 작은 작업 단위로 나누어 메인 함수(main function)와 분리할 수 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;함수를 하나의 기계로 생각할 수 있습니다.&#xA;•&#x9;기계를 켜면 명령어가 실행되어 최종 결과를 반환합니다.&#xA;•&#x9;서로 다른 프로세스를 수행하는 여러 기계를 만들 수 있으며, 각각의 기계는 이름과 반환 결과 유형으로 구별됩니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 7 - 입력 줄 (Input Line)</title>
      <link>/kr/secret-messages/activity-7/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/activity-7/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xLAq5HggT6E&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;축하합니다!&lt;/p&gt;&#xA;&lt;p&gt;여러분은 이제 왕국을 완전히 구해내는 것에 아주 가까워졌습니다. 이제 남은 것은 전체 문장을 입력할 수 있는 기능을 추가하는 것뿐입니다! 이를 위해 몇 가지만이 필요합니다.&#xA;먼저, &lt;code&gt;string:getline()&lt;/code&gt; 문장을 사용하여 입력을 받아야 합니다.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;string phrase;&#xD;&#xA;getline(cin, phrase);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이 방법을 사용하면 콘솔에서 한 단어만이 아니라 전체 메시지를 입력할 수 있게 됩니다.&lt;/p&gt;&#xA;&lt;p&gt;다음 단계를 따라 프로그램을 완성하여 왕국을 구하세요:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 함수에서  &lt;code&gt;cin &amp;gt;&amp;gt; name;&lt;/code&gt; 문장을 &lt;code&gt;getline(cin, name);&lt;/code&gt;으로 변경하세요.&lt;/p&gt;</description>
    </item>
    <item>
      <title>결론</title>
      <link>/kr/secret-messages/activity-8/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/secret-messages/activity-8/</guid>
      <description>&lt;p&gt;축하합니다!&lt;/p&gt;&#xA;&lt;p&gt;정말 멋진 일을 해냈어요. 왕국을 구했고, 그 과정에서 C++ 프로그래밍도 배웠습니다! :)&lt;/p&gt;&#xA;&lt;p&gt;배운 내용을 복습해 보겠습니다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;콘솔&lt;/strong&gt;을 사용하여 암호화되거나 복호화된 메시지를 입력하고 전송했습니다.&lt;/li&gt;&#xA;&lt;li&gt;발송될 메시지를 저장하기 위해 &lt;strong&gt;변수&lt;/strong&gt;를 사용했습니다.&lt;/li&gt;&#xA;&lt;li&gt;메시지의 각 글자를 분석하기 위해 &lt;strong&gt;루프&lt;/strong&gt;를 사용했습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;조건&lt;/strong&gt;를 사용하여 암호화 또는 복호화가 필요한지 확인했습니다.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ASCII 코드&lt;/strong&gt;는 메시지를 암호화하거나 복호화할 수 있도록 각 문자의 값을 알려주는 데 도움이 되었습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;왕께서 특별한 암호화된 감사 메시지를 보내주셨습니다. C++ 프로그램의 도움으로 해독하고 읽을 수 있습니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; Secret Messages - Answer Key</title>
      <link>/kr/secret-messages/answer-key/</link>
      <pubDate>Fri, 27 Mar 2020 20:24:33 -0700</pubDate>
      <guid>/kr/secret-messages/answer-key/</guid>
      <description>&lt;p&gt;The following 5 lines are needed for all the activities.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xD;&#xA;using namespace std;&#xD;&#xA;&#xD;&#xA;int main() {&#xD;&#xA;  &#xD;&#xA;  return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-1&#34;&gt;Activity 1&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cout &amp;lt;&amp;lt; &amp;#34;Hello programmer!&amp;#34; &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-2&#34;&gt;Activity 2&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  string name;&#xD;&#xA;  cin &amp;gt;&amp;gt; name;&#xD;&#xA;  cout &amp;lt;&amp;lt; &amp;#34;Hello &amp;#34; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-3&#34;&gt;Activity 3&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;string name;&#xD;&#xA;cin &amp;gt;&amp;gt; name;&#xD;&#xA;for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;  cout &amp;lt;&amp;lt; name[i] &amp;lt;&amp;lt; endl;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-4&#34;&gt;Activity 4&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int number;&#xD;&#xA;cin &amp;gt;&amp;gt; number;&#xD;&#xA;if(number == 1){&#xD;&#xA;  cout &amp;lt;&amp;lt; &amp;#34;Encrypt a message&amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;}else{&#xD;&#xA;  cout &amp;lt;&amp;lt; &amp;#34;Decrypt a message&amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-5&#34;&gt;Activity 5&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xD;&#xA;using namespace std;&#xD;&#xA;&#xD;&#xA;int main() {&#xD;&#xA;  string code;&#xD;&#xA;  string name;&#xD;&#xA;  cin &amp;gt;&amp;gt; code;&#xD;&#xA;  cin &amp;gt;&amp;gt; name;&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    int sum = name[i]+code[counter]-&amp;#39;a&amp;#39;;&#xD;&#xA;    if(sum &amp;gt; &amp;#39;z&amp;#39;){&#xD;&#xA;     sum-=25;&#xD;&#xA;    }&#xD;&#xA;    name[i]=sum;&#xD;&#xA;    counter+=1;&#xD;&#xA;    if(counter &amp;gt;= code.size()){&#xD;&#xA;      counter=0;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  cout &amp;lt;&amp;lt; &amp;#34;Encrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;  cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-6&#34;&gt;Activity 6&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xD;&#xA;using namespace std;&#xD;&#xA;&#xD;&#xA;void encrypt (string &amp;amp;name, string code){&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    int sum = name[i]+code[counter]-&amp;#39;a&amp;#39;;&#xD;&#xA;    if(sum &amp;gt; &amp;#39;z&amp;#39;){&#xD;&#xA;     sum-=25;&#xD;&#xA;    }&#xD;&#xA;    name[i]=sum;&#xD;&#xA;    counter+=1;&#xD;&#xA;    if(counter &amp;gt;= code.size()){&#xD;&#xA;      counter=0;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void decrypt (string &amp;amp;name, string code){&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    int sum = name[i]-code[counter]+&amp;#39;a&amp;#39;;&#xD;&#xA;    if(sum &amp;lt; &amp;#39;a&amp;#39;){&#xD;&#xA;     sum+=25;&#xD;&#xA;    }&#xD;&#xA;    name[i]=sum;&#xD;&#xA;    counter+=1;&#xD;&#xA;    if(counter &amp;gt;= code.size()){&#xD;&#xA;      counter=0;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int main() {&#xD;&#xA;  string code;&#xD;&#xA;  string name;&#xD;&#xA;  int number;&#xD;&#xA;  cin &amp;gt;&amp;gt; number;&#xD;&#xA;  cin &amp;gt;&amp;gt; code;&#xD;&#xA;  cin &amp;gt;&amp;gt; name;&#xD;&#xA;  if(number == 1){&#xD;&#xA;      cout &amp;lt;&amp;lt; &amp;#34;Encrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;      encrypt(name, code);&#xD;&#xA;      cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  }else{&#xD;&#xA;    cout &amp;lt;&amp;lt; &amp;#34;Decrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;    decrypt(name, code);&#xD;&#xA;    cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  }&#xD;&#xA;  return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-7&#34;&gt;Activity 7&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xD;&#xA;using namespace std;&#xD;&#xA;&#xD;&#xA;void encrypt (string &amp;amp;name, string code){&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    if(name[i]!=&amp;#39; &amp;#39;){&#xD;&#xA;      int sum = name[i]+code[counter]-&amp;#39;a&amp;#39;;&#xD;&#xA;      if(sum &amp;gt; &amp;#39;z&amp;#39;){&#xD;&#xA;      sum-=25;&#xD;&#xA;      }&#xD;&#xA;      name[i]=sum;&#xD;&#xA;      counter+=1;&#xD;&#xA;      if(counter &amp;gt;= code.size()){&#xD;&#xA;        counter=0;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void decrypt (string &amp;amp;name, string code){&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    if(name[i]!=&amp;#39; &amp;#39;){&#xD;&#xA;      int sum = name[i]-code[counter]+&amp;#39;a&amp;#39;;&#xD;&#xA;      if(sum &amp;lt; &amp;#39;a&amp;#39;){&#xD;&#xA;      sum+=25;&#xD;&#xA;      }&#xD;&#xA;      name[i]=sum;&#xD;&#xA;      counter+=1;&#xD;&#xA;      if(counter &amp;gt;= code.size()){&#xD;&#xA;        counter=0;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int main() {&#xD;&#xA;  string code;&#xD;&#xA;  string name;&#xD;&#xA;  int number;&#xD;&#xA;  cin &amp;gt;&amp;gt; number;&#xD;&#xA;  cin &amp;gt;&amp;gt; code;&#xD;&#xA;  getline(cin, name);&#xD;&#xA;  if(number == 1){&#xD;&#xA;      cout &amp;lt;&amp;lt; &amp;#34;Encrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;      encrypt(name, code);&#xD;&#xA;      cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  }else{&#xD;&#xA;    cout &amp;lt;&amp;lt; &amp;#34;Decrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;    decrypt(name, code);&#xD;&#xA;    cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  }&#xD;&#xA;  return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
