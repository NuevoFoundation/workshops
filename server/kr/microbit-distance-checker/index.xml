<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>블록: 마이크로빗을 활용한 무선 거리두기 on Nuevo Foundation Workshops</title>
    <link>/kr/microbit-distance-checker/</link>
    <description>Recent content in 블록: 마이크로빗을 활용한 무선 거리두기 on Nuevo Foundation Workshops</description>
    <generator>Hugo</generator>
    <language>kr</language>
    <lastBuildDate>Thu, 25 Jul 2019 13:24:17 -0700</lastBuildDate>
    <atom:link href="/kr/microbit-distance-checker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>마이크로빗이란?</title>
      <link>/kr/microbit-distance-checker/what-is-microbit/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/microbit-distance-checker/what-is-microbit/</guid>
      <description>&lt;h2 id=&#34;마이크로빗이란&#34;&gt;마이크로빗이란?&lt;/h2&gt;&#xA;&lt;p&gt;마이크로빗은 프로그래밍 마이크로컨트롤러입니다! JavaScript, Python, Scratch, Blocks와 같은 다양한 언어를 사용하여 웹 브라우저에서 코딩할 수 있습니다. 이번 세션에서는 MakeCode Blocks를 사용합니다.&lt;/p&gt;&#xA;&lt;p&gt;마이크로빗에는 다음과 같이 다양한 동작이 가능한 기능과 센서가 포함되어 있습니다:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;25개의 개별적으로 제어 가능한 LED&lt;/li&gt;&#xA;&lt;li&gt;2개의 물리적 버튼&lt;/li&gt;&#xA;&lt;li&gt;2개의 입력/출력(IO) 핀&lt;/li&gt;&#xA;&lt;li&gt;자력계 센서&lt;/li&gt;&#xA;&lt;li&gt;가속도계(모션 센서)&lt;/li&gt;&#xA;&lt;li&gt;블루투스&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!---![Image of simulated micro:bits with the radio highlighted](../img/simulatorStart.png) ---&gt;&#xD;&#xA;&lt;img src=&#34;../img/microbit-hardware-access.jpg&#34; alt=&#34;microbit components&#34; style=&#34;width:800px;&#34;/&gt;&#xD;&#xA;&lt;p&gt;마이크로빗의 개별 구성 요소와 기능에 대해 모두 알고 싶다면 &lt;a href=&#34;https://micro:bit.org/guide/features/&#34; target=&#34;_blank&#34;&gt;여기&lt;sup&gt;&lt;span class=&#34;glyphicon glyphicon-new-window&#34; aria-hidden=&#34;true&#34;&gt;&lt;/span&gt;&lt;/sup&gt;&lt;/a&gt;&#xD;&#xA;에서 확인할 수 있습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>신호 방송하기</title>
      <link>/kr/microbit-distance-checker/broadcasting/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/microbit-distance-checker/broadcasting/</guid>
      <description>&lt;h2 id=&#34;라디오-켜기&#34;&gt;라디오 켜기&lt;/h2&gt;&#xA;&lt;p&gt;마이크로빗의 블루투스 라디오를 사용하여 다른 마이크로빗과 얼마나 떨어져 있는지 확인합니다. 먼저 라디오를 켜고 채널에 맞추는 작업을 해야 합니다. “Radio” 섹션을 클릭하세요. 화면에서 다섯 번째에 있는 분홍색 섹션입니다. “radio set group 1”을 선택하고 이를 작업 영역의 파란색 “on start” 블록으로 끌어다 놓으세요. 모든 참가자가 동일한 그룹 번호를 사용하도록 하세요. 다른 그룹 번호를 사용하면 마이크로빗 간 통신이 이루어지지 않습니다. 작업 영역은 아래와 같이 보여야 합니다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/radioMenu.png&#34; alt=&#34;MakeCode menu showing the Radio section selected&#34;&gt;&#xA;&lt;img src=&#34;../img/setRadioGroup.png&#34; alt=&#34;MakeCode workspace showing the “radio set group” block in the “on start” block&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>메시지 수신하기</title>
      <link>/kr/microbit-distance-checker/receiving/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/microbit-distance-checker/receiving/</guid>
      <description>&lt;p&gt;이제 메시지를 보내고 청취할 준비가 되었으니, 받은 정보를 사용해 마이크로빗 간 거리를 계산할 준비를 해야 합니다. 이를 위해, 수신 신호의 강도를 알아야 합니다. “Radio” 섹션으로 돌아가 이번에는 “on radio received (receivedNumber)” 블록을 작업 영역의 빈 공간으로 끌어다 놓으세요.&lt;/p&gt;&#xA;&lt;p&gt;이 블록은 다른 마이크로빗에서 전송된 숫자를 받을 때 마이크로빗이 수행할 동작을 지정합니다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/onRadioReceived.png&#34; alt=&#34;“On radio received” block added to the workspace&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;다음으로, 빨간색 “Variables” 섹션을 클릭하고 “Make a Variable…”을 선택합니다. 텍스트 상자에 “strength”라는 이름을 입력하고 “Ok ✔”를 클릭하세요.&lt;/p&gt;</description>
    </item>
    <item>
      <title>신호 강도 해석하기</title>
      <link>/kr/microbit-distance-checker/signal-strength/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/microbit-distance-checker/signal-strength/</guid>
      <description>&lt;p&gt;이제 마이크로빗이 수신한 신호 강도를 알게 되었으니, 이를 사용하여 거리를 계산해 봅시다. Logic 섹션을 클릭한 뒤 “if true then / else” 블록을 가져와 radio received 블록 안으로 끌어다 놓습니다. 그런 다음 Logic 섹션으로 돌아가 “0 = 0” 비교 블록을 가져와 “if true then” 라인의 true 부분 위에 드롭하세요. 이 단계가 끝나면 코드가 아래와 같이 보여야 합니다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/addedLogic.png&#34; alt=&#34;Workspace with if/then/else statement added to event block&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;이제 마이크로빗이 우리가 6피트(약 2미터) 이상 떨어져 있는지 확인하는 방법을 설정해 봅시다. Variables 메뉴를 열고 strength 버블을 선택한 뒤, 이를 if 블록의 첫 번째 0 위에 드롭하여 &lt;code&gt;if strength = 0 then&lt;/code&gt;로 변경하세요. 그런 다음, 등호(=) 기호를 클릭하여 다른 기호들의 목록을 표시합니다. 여기에서 “&amp;gt;” 기호를 선택하세요. 마지막으로, if 문 안의 마지막 0을 클릭하여 `-67로 바꿔줍니다. 완성된 “on radio received” 블록은 다음과 같이 보여야 합니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>시각적 표시</title>
      <link>/kr/microbit-distance-checker/light-it-up/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/microbit-distance-checker/light-it-up/</guid>
      <description>&lt;p&gt;이제 논리적 코드를 작성했으니, 6피트 이상 떨어졌는지 확인할 수 있도록 시각적 표시를 추가해 봅시다. Basic 섹션을 클릭하여 “show icon” 블록을 가져와 논리 블록의 if 부분 안에 넣습니다. 아이콘을 클릭하여 다른 아이콘 목록을 표시한 뒤, 슬픈 찡그린 얼굴을 선택하세요. 다시 Basic 메뉴로 돌아가 “show icon” 블록을 하나 더 가져온 뒤, 논리 블록의 else 부분 안에 배치합니다. 이번에는 웃는 얼굴 아이콘으로 변경하세요. 작업이 완료되면 코드가 다음과 같이 보여야 합니다:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/finalCode.png&#34; alt=&#34;The final, completed code for the project&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>코드 다운로드 및 테스트</title>
      <link>/kr/microbit-distance-checker/running-code/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/kr/microbit-distance-checker/running-code/</guid>
      <description>&lt;p&gt;코드를 작성했으니 이제 실행해 보겠습니다. 먼저 마이크로빗을 컴퓨터와 연결해야 합니다. USB 케이블을 찾아 마이크로빗 상단의 은색 USB 포트에 작은 쪽을 연결하고, 다른 큰 쪽은 컴퓨터의 USB 포트에 연결하세요. MakeCode 작업 공간에서 Download 버튼 옆의 작은 … 아이콘을 클릭하여 메뉴를 엽니다. 이 메뉴에서 “Pair device”를 선택하세요.&lt;/p&gt;&#xA;&lt;p&gt;새로 뜨는 창에서 오른쪽 하단의 보라색 “Pair device” 버튼을 클릭합니다. 마지막으로 또 다른 창이 나타나면 “BBC micro:bit CMSIS-DAP”를 클릭한 뒤 하단의 “Connect” 버튼을 선택하세요. 이제 마이크로빗이 연결되었으며 코드를 다운로드할 준비가 되었습니다. 이 연결 과정은 한 번만 수행하면 됩니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
