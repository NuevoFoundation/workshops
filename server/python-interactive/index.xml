<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python: Interacting with the Console on Nuevo Foundation Workshops</title>
    <link>/python-interactive/</link>
    <description>Recent content in Python: Interacting with the Console on Nuevo Foundation Workshops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Jul 2019 13:24:17 -0700</lastBuildDate><atom:link href="/python-interactive/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Activity 1 - Create your Restaurant Banner</title>
      <link>/python-interactive/activity-1/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      
      <guid>/python-interactive/activity-1/</guid>
      <description>Pre-reqs Printing with Python Create your Restaurant Banner When setting up your restaurant&amp;rsquo;s virtual cashier, we&amp;rsquo;re going to have to first make sure we have a restaurant banner with the name of your restaurant. Since we want an actual banner, not just plain text for the name, let&amp;rsquo;s use ASCII art! ASCII art uses special symbols such as (), {}, * and other keys to create images and words. For this activity, we can make use of this online resource to convert text into ASCII art.</description>
    </item>
    
    <item>
      <title>Activity 2 - How to Create and Store your Menu</title>
      <link>/python-interactive/activity-2/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      
      <guid>/python-interactive/activity-2/</guid>
      <description>Pre-reqs Lists How to Create and Store your Menu Now that we have a banner for your restaurant, let&amp;rsquo;s start thinking about how to organize the information about your dishes. Remember how earlier you decided what foods and beverages you wanted to sell at your restaurant? Well, now we need to figure out how to store all of that information. We need to store the name, price, and description of every item on your menu.</description>
    </item>
    
    <item>
      <title>Activity 6 - Show the Customer their Receipt</title>
      <link>/python-interactive/activity-6/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      
      <guid>/python-interactive/activity-6/</guid>
      <description>Show Customer their Receipt Yay! You&amp;rsquo;ve calculated the price of the customer&amp;rsquo;s order, now we just need to display it as a Receipt. Below is an example that would work. Display all of the items ordered by the customer, the price per item, and the total price.
&amp;mdash;&amp;ndash;Receipt&amp;mdash;&amp;ndash;
Spring Rolls $16.0
Creamy Pesto Pasta $15.99
Total Price: $31.99</description>
    </item>
    
    <item>
      <title>Activity 7 - Thank the Customer for their Business</title>
      <link>/python-interactive/activity-7/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      
      <guid>/python-interactive/activity-7/</guid>
      <description>Thank Customer for their Business Include an ASCII art pic that will pop up on the console.
Thank the customer for ordering from your restaurant by displaying another text to ASCII art image like &amp;ldquo;Thank you!&amp;rdquo;, &amp;ldquo;Come again soon!&amp;rdquo;, &amp;ldquo;Bon Appetit&amp;rdquo;, or anything else along those lines by using the same art generator we used when printing out the restaurant banner.
Here&amp;rsquo;s the link to the ASCII art generator for your convenience :) https://onlineasciitools.</description>
    </item>
    
    <item>
      <title>Activity 3 - Welcome Customer to your Restaurant &amp; Display Menu</title>
      <link>/python-interactive/activity-3/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      
      <guid>/python-interactive/activity-3/</guid>
      <description>Welcome Customer to your Restaurant &amp;amp; Display Menu Now that we have both a restaurant banner to display to the customer and a menu stored in your Python Program, let&amp;rsquo;s display your menu to the customer and welcome them in. In this activity, we&amp;rsquo;re going to write 2 helper functions to accomplish this.
Helper Functions Helper functions are functions that get called in a main function that runs all of the code for this program.</description>
    </item>
    
    <item>
      <title>Activity 4 - Interacting with the Customer</title>
      <link>/python-interactive/activity-4/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      
      <guid>/python-interactive/activity-4/</guid>
      <description>Interacting with the Customer Let&amp;rsquo;s continue interacting with the customer and get their order! In the main() function, the next thing we need to do is create an empty list stored in the variable listOrderItems so that any items they will eventually order are stored here.
Now let&amp;rsquo;s use our knowledge of if-else statements and while loops to receive the customer&amp;rsquo;s order. If the customer responded No to the question asking them whether they would like to order anything from the menu, then print out a Goodbye statement.</description>
    </item>
    
    <item>
      <title>Activity 5 - Analyzing the customer&#39;s order</title>
      <link>/python-interactive/activity-5/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      
      <guid>/python-interactive/activity-5/</guid>
      <description>Pre-reqs Functions Loops Analyzing the customer&amp;rsquo;s order We&amp;rsquo;ve got the customer&amp;rsquo;s order, and now we have to simply calculate how much their order costs!
Creating a dictionary from the customer&amp;rsquo;s order The first function we&amp;rsquo;ll be writing is createDictOrderItems(listOrderItems) and it takes the list of items in the customer&amp;rsquo;s order as a parameter. We&amp;rsquo;ll be returning a dictionary of all the items ordered and their respective quantities. Currently we only have a list of strings that contain both the item name and quantity, however, we need to separate this information out and convert the quantity into an integer type since it&amp;rsquo;s a number.</description>
    </item>
    
    <item>
      <title>Python Interactive - Answer Key</title>
      <link>/python-interactive/answer-key/</link>
      <pubDate>Fri, 27 Mar 2020 20:24:33 -0700</pubDate>
      
      <guid>/python-interactive/answer-key/</guid>
      <description>Here is a full solution to the workshop. The solutions to each activity cannot stand alone so instead, there will be comments indicating where each activity&amp;rsquo;s solution is within the larger block of code.
# Activity 2 dictMenu = {&amp;#39;Creamy Pesto Pasta&amp;#39;:[15.99, &amp;#39;Penne pasta tossed in a creamy pesto sauce, topped with black olives and sundried tomatoes&amp;#39;], &amp;#39;Spring Rolls&amp;#39;:[8.00, &amp;#39;Stir fried vegetables such as cabbage and carrot mixed with vermicelli and thin strips of fried tofu, wrapped in a crunchy outer layer.</description>
    </item>
    
  </channel>
</rss>
