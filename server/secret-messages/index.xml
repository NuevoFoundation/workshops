<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43;: Secret messages on Nuevo Foundation Workshops</title>
    <link>/secret-messages/</link>
    <description>Recent content in C&#43;&#43;: Secret messages on Nuevo Foundation Workshops</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 27 Mar 2020 20:24:33 -0700</lastBuildDate>
    <atom:link href="/secret-messages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Repl.It</title>
      <link>/secret-messages/using-repl-it/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/using-repl-it/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/sdO27-l4aqM&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;In order to help the Kin and Queen, we will develop a program, in a programming language called C++.  With that program we will be able to input a message, and the program will modify it to make it secret.&lt;/p&gt;&#xA;&lt;h2 id=&#34;using-replit&#34;&gt;Using Replit&lt;/h2&gt;&#xA;&lt;p&gt;Today you will be using Replit. Before starting, you will need to sign up for a Replit account, if you do not yet have one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 1 - Output</title>
      <link>/secret-messages/activity-1/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/activity-1/</guid>
      <description>&lt;p&gt;We first need to enter a message for our program to be able to create secret messages.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a class=&#34;my-2 mx-4 btn btn-info&#34; href=&#34;https://replit.com/@nuevofoundation/activity-1-english&#34; target=&#34;_blank&#34;&gt;Launch Replit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;To do that we are going to start by telling the computer to show in console for whom is that message. This is the command that we will be using.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cout &amp;lt;&amp;lt; &amp;#34;Hello Developer!&amp;#34; &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s learn more about this line of code, shall we?&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;Tip&#34;&gt;&lt;h3 id=&#34;strings&#34;&gt;Strings&lt;/h3&gt;&#xA;&lt;p&gt;Everything that we see wrapped in quotation marks (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;) are called &lt;strong&gt;string&lt;/strong&gt;s. A string is sequence of characters, numbers, letters or symbols.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 2 - Variables and Inputs</title>
      <link>/secret-messages/activity-2/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/activity-2/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/umCdJDmdf3s&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Awesome! Now let&amp;rsquo;s go a step further. We will now not only print the message, but input the name of the receiver and make our program say &amp;ldquo;Hello&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;To do that we will need &lt;strong&gt;variables&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;Tip&#34;&gt;&lt;h3 id=&#34;variables&#34;&gt;Variables&lt;/h3&gt;&#xA;&lt;p&gt;A &lt;strong&gt;variable&lt;/strong&gt; is a container that stores information. There are many kinds of variables, each storing different types of information:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;string&lt;/strong&gt;: represents a sequence of characters, letters, numbers, and symbols. &lt;strong&gt;string&lt;/strong&gt;s are always wrapped in double quotes. Examples: &lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;1,2,3&amp;quot;&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;int&lt;/strong&gt;: represents positive or negative integer numbers. Examples: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;-250&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;char&lt;/strong&gt;: represents a single character. Examples: &lt;code&gt;&#39;A&#39;&lt;/code&gt;, &lt;code&gt;&#39;e&#39;&lt;/code&gt;, &lt;code&gt;&#39;I&#39;&lt;/code&gt;. &lt;strong&gt;char&lt;/strong&gt;s are always wrapped between single quotes.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;bool&lt;/strong&gt;: represents either a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;To create a variable, declare it as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 3 - Loops</title>
      <link>/secret-messages/activity-3/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/activity-3/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/zEQkGgS779g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Great!&lt;/p&gt;&#xA;&lt;p&gt;The King has now requested that we input our message letter by letter so that we can change them afterwards.&lt;/p&gt;&#xA;&lt;p&gt;To do this we need something called &lt;strong&gt;loops&lt;/strong&gt;. Loops allow us to execute a block of code multiple times. Let&amp;rsquo;s see the below example which uses a loop to print out some numbers.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for(int i=0; i&amp;lt;3; i++){&#xD;&#xA;  cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s try to understand what this line of code does.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 4 - Conditions</title>
      <link>/secret-messages/activity-4/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/activity-4/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/eweOJoWtuwg&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Very well!&lt;/p&gt;&#xA;&lt;p&gt;We are getting closer and closer to making our secret messages. But let&amp;rsquo;s also not forget that we have to be able to decipher these messages!&lt;/p&gt;&#xA;&lt;p&gt;For that, we are going to enter in the console a &lt;code&gt;1&lt;/code&gt;, if we want to encrypt a message, or the number &lt;code&gt;2&lt;/code&gt;, if we want to decrypt it.&lt;/p&gt;&#xA;&lt;p&gt;For this we will need &lt;strong&gt;conditions&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 5 - ASCII Code</title>
      <link>/secret-messages/activity-5/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/activity-5/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MeOQFpey0pA&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;That&amp;rsquo;s great!&lt;/p&gt;&#xA;&lt;p&gt;In this activity we will encrypt (make secret) the name of the recipient.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s use the &lt;strong&gt;ASCII Code&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;Tip&#34;&gt;&lt;h3 id=&#34;ascii-code&#34;&gt;ASCII Code&lt;/h3&gt;&#xA;&lt;p&gt;The ASCII code shows that each character has a numeric value. For example, the character &lt;code&gt;A&lt;/code&gt; is the number 65, &lt;code&gt;B&lt;/code&gt; is 66, &lt;code&gt;C&lt;/code&gt; is 67, etc.&lt;/p&gt;&#xA;&lt;p&gt;The following list shows the value of the most commonly used characters:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 6 - Functions</title>
      <link>/secret-messages/activity-6/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/activity-6/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/hSsqsvhyYAA&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Very well!&lt;/p&gt;&#xA;&lt;p&gt;You&amp;rsquo;ve already done a lot of the program!&lt;/p&gt;&#xA;&lt;p&gt;In this activity we will use &lt;strong&gt;functions&lt;/strong&gt; to group sections of the code.&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;Tip&#34;&gt;&lt;h3 id=&#34;functions&#34;&gt;Functions&lt;/h3&gt;&#xA;&lt;p&gt;Functions allow us to divide the work of a program into smaller tasks separate from the main section, that is, from the &lt;code&gt;main&lt;/code&gt; function.&lt;/p&gt;&#xA;&lt;p&gt;We can think of functions as a machine such that when we turn it on, it executes instructions to return a final result. You can have several machines that perform different processes, and we identify each one with a name, and the type of result it returns.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity 7 - Input line</title>
      <link>/secret-messages/activity-7/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/activity-7/</guid>
      <description>&lt;p style=&#34;text-align: center;&#34;&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xLAq5HggT6E&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;&#xD;&#xA;&lt;p&gt;Congratulations!&lt;/p&gt;&#xA;&lt;p&gt;You are very close to completely saving the nation. All that remains is to be able to enter a complete sentence! For this we only have to make a few small changes. First, you need to use the statement to enter the &lt;code&gt;string:getline()&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;string phrase;&#xD;&#xA;getline(cin, phrase);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By doing it this way, the console will be able to accept a complete message, not just a single word.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Conclusion</title>
      <link>/secret-messages/activity-8/</link>
      <pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate>
      <guid>/secret-messages/activity-8/</guid>
      <description>&lt;p&gt;Congratulations!&lt;/p&gt;&#xA;&lt;p&gt;You have done an amazing job. You have saved the kingdom and while doing that you learned C++ programming as well! :)&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s review what you learned:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You have used the &lt;strong&gt;console&lt;/strong&gt; to input and send encrypted or decrypted messages.&lt;/li&gt;&#xA;&lt;li&gt;You used&lt;strong&gt;variables&lt;/strong&gt; to store the messages that were going to be sent out.&lt;/li&gt;&#xA;&lt;li&gt;You used &lt;strong&gt;loops&lt;/strong&gt; to analyze each letter in the messages.&lt;/li&gt;&#xA;&lt;li&gt;You used &lt;strong&gt;conditionals&lt;/strong&gt; to determine if encryption or decryption was needed.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;ASCII code&lt;/strong&gt; helped you know the value of each character so that we were able to encrypt or decrypt the message.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The King has sent you a special encrypted thank you message. With the help of your C++ program, you will be able to decrypt it and read it:&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; Secret Messages - Answer Key</title>
      <link>/secret-messages/answer-key/</link>
      <pubDate>Fri, 27 Mar 2020 20:24:33 -0700</pubDate>
      <guid>/secret-messages/answer-key/</guid>
      <description>&lt;p&gt;The following 5 lines are needed for all the activities.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xD;&#xA;using namespace std;&#xD;&#xA;&#xD;&#xA;int main() {&#xD;&#xA;  &#xD;&#xA;  return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-1&#34;&gt;Activity 1&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cout &amp;lt;&amp;lt; &amp;#34;Hello programmer!&amp;#34; &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-2&#34;&gt;Activity 2&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  string name;&#xD;&#xA;  cin &amp;gt;&amp;gt; name;&#xD;&#xA;  cout &amp;lt;&amp;lt; &amp;#34;Hello &amp;#34; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-3&#34;&gt;Activity 3&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;string name;&#xD;&#xA;cin &amp;gt;&amp;gt; name;&#xD;&#xA;for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;  cout &amp;lt;&amp;lt; name[i] &amp;lt;&amp;lt; endl;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-4&#34;&gt;Activity 4&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int number;&#xD;&#xA;cin &amp;gt;&amp;gt; number;&#xD;&#xA;if(number == 1){&#xD;&#xA;  cout &amp;lt;&amp;lt; &amp;#34;Encrypt a message&amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;}else{&#xD;&#xA;  cout &amp;lt;&amp;lt; &amp;#34;Decrypt a message&amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-5&#34;&gt;Activity 5&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xD;&#xA;using namespace std;&#xD;&#xA;&#xD;&#xA;int main() {&#xD;&#xA;  string code;&#xD;&#xA;  string name;&#xD;&#xA;  cin &amp;gt;&amp;gt; code;&#xD;&#xA;  cin &amp;gt;&amp;gt; name;&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    int sum = name[i]+code[counter]-&amp;#39;a&amp;#39;;&#xD;&#xA;    if(sum &amp;gt; &amp;#39;z&amp;#39;){&#xD;&#xA;     sum-=25;&#xD;&#xA;    }&#xD;&#xA;    name[i]=sum;&#xD;&#xA;    counter+=1;&#xD;&#xA;    if(counter &amp;gt;= code.size()){&#xD;&#xA;      counter=0;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;  cout &amp;lt;&amp;lt; &amp;#34;Encrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;  cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-6&#34;&gt;Activity 6&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xD;&#xA;using namespace std;&#xD;&#xA;&#xD;&#xA;void encrypt (string &amp;amp;name, string code){&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    int sum = name[i]+code[counter]-&amp;#39;a&amp;#39;;&#xD;&#xA;    if(sum &amp;gt; &amp;#39;z&amp;#39;){&#xD;&#xA;     sum-=25;&#xD;&#xA;    }&#xD;&#xA;    name[i]=sum;&#xD;&#xA;    counter+=1;&#xD;&#xA;    if(counter &amp;gt;= code.size()){&#xD;&#xA;      counter=0;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void decrypt (string &amp;amp;name, string code){&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    int sum = name[i]-code[counter]+&amp;#39;a&amp;#39;;&#xD;&#xA;    if(sum &amp;lt; &amp;#39;a&amp;#39;){&#xD;&#xA;     sum+=25;&#xD;&#xA;    }&#xD;&#xA;    name[i]=sum;&#xD;&#xA;    counter+=1;&#xD;&#xA;    if(counter &amp;gt;= code.size()){&#xD;&#xA;      counter=0;&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int main() {&#xD;&#xA;  string code;&#xD;&#xA;  string name;&#xD;&#xA;  int number;&#xD;&#xA;  cin &amp;gt;&amp;gt; number;&#xD;&#xA;  cin &amp;gt;&amp;gt; code;&#xD;&#xA;  cin &amp;gt;&amp;gt; name;&#xD;&#xA;  if(number == 1){&#xD;&#xA;      cout &amp;lt;&amp;lt; &amp;#34;Encrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;      encrypt(name, code);&#xD;&#xA;      cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  }else{&#xD;&#xA;    cout &amp;lt;&amp;lt; &amp;#34;Decrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;    decrypt(name, code);&#xD;&#xA;    cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  }&#xD;&#xA;  return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;activity-7&#34;&gt;Activity 7&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xD;&#xA;using namespace std;&#xD;&#xA;&#xD;&#xA;void encrypt (string &amp;amp;name, string code){&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    if(name[i]!=&amp;#39; &amp;#39;){&#xD;&#xA;      int sum = name[i]+code[counter]-&amp;#39;a&amp;#39;;&#xD;&#xA;      if(sum &amp;gt; &amp;#39;z&amp;#39;){&#xD;&#xA;      sum-=25;&#xD;&#xA;      }&#xD;&#xA;      name[i]=sum;&#xD;&#xA;      counter+=1;&#xD;&#xA;      if(counter &amp;gt;= code.size()){&#xD;&#xA;        counter=0;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void decrypt (string &amp;amp;name, string code){&#xD;&#xA;  int counter = 0;&#xD;&#xA;  for(int i=0; i&amp;lt;name.size(); i++){&#xD;&#xA;    if(name[i]!=&amp;#39; &amp;#39;){&#xD;&#xA;      int sum = name[i]-code[counter]+&amp;#39;a&amp;#39;;&#xD;&#xA;      if(sum &amp;lt; &amp;#39;a&amp;#39;){&#xD;&#xA;      sum+=25;&#xD;&#xA;      }&#xD;&#xA;      name[i]=sum;&#xD;&#xA;      counter+=1;&#xD;&#xA;      if(counter &amp;gt;= code.size()){&#xD;&#xA;        counter=0;&#xD;&#xA;      }&#xD;&#xA;    }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;int main() {&#xD;&#xA;  string code;&#xD;&#xA;  string name;&#xD;&#xA;  int number;&#xD;&#xA;  cin &amp;gt;&amp;gt; number;&#xD;&#xA;  cin &amp;gt;&amp;gt; code;&#xD;&#xA;  getline(cin, name);&#xD;&#xA;  if(number == 1){&#xD;&#xA;      cout &amp;lt;&amp;lt; &amp;#34;Encrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;      encrypt(name, code);&#xD;&#xA;      cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  }else{&#xD;&#xA;    cout &amp;lt;&amp;lt; &amp;#34;Decrypted message: &amp;#34; &amp;lt;&amp;lt; endl;&#xD;&#xA;    decrypt(name, code);&#xD;&#xA;    cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; endl;&#xD;&#xA;  }&#xD;&#xA;  return 0;&#xD;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
