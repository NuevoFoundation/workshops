<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java: Basics on Nuevo Foundation Workshops</title>
    <link>/es/java-basics/</link>
    <description>Recent content in Java: Basics on Nuevo Foundation Workshops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Tue, 07 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="/es/java-basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Usando Repl.It</title>
      <link>/es/java-basics/activity-0/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/activity-0/</guid>
      <description>Usando Replit Hoy estaremos usando Replit para aprender como programar en Java. Aqu√≠ est√° un ejemplo del portal interactivo que estaremos usando hoy:
Lanza Replit
Antes de empezar, primero vamos a repasar y entender c√≥mo funciona el portal. El archivo Main.java tiene el codigo, o instrucciones que ejecutar√° la computadora. Al presionar el bot√≥n de run, le dir√°s a la computadora que ejecute las instrucciones que est√°n en el codigo. Los resultados de la ejecuci√≥n del codigo se pueden ber al final de la pantalla blanca, debajo de la pesta√±a de result.</description>
    </item>
    
    <item>
      <title>Imprimir Declaraciones y A√±adir Comentarios</title>
      <link>/es/java-basics/activity-1/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/activity-1/</guid>
      <description>1. Deja que el programa hable! Vamos a escribir un programa que diga Hello World luego de escribir la siguiente l√≠nea de c√≥digo System.out.print(&amp;quot;Hello World&amp;quot;);
El programa imprimir√° lo que escribas entre los par√©ntesis de System.out.print(. Cada l√≠nea de c√≥digo termina con ;.
A√±ada m√°s declaraciones para imprimir n√∫meros, escribiendo los n√∫meros entre los par√©ntesis (i.e. System.out.print(2020)) o cualquier s√≠mbolo, escribiendo el s√≠mbolo entre 2 comillas simples &#39; (i.e. System.out.print(&#39;@&#39;)).</description>
    </item>
    
    <item>
      <title>Variables and Types</title>
      <link>/es/java-basics/activity-2/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/activity-2/</guid>
      <description>1. Variables: Define el nombre En el √∫ltimo ejercicio, aprendimos como imprimir distintas delcaraciones con el m√©todo System.out.print().
Est√° genial saber como imprimir n√∫meros y oraciones. Pero todav√≠a no les hemos dado un significado m√°s profundo.
En Java, ahora vamos a introducir el concepto de una variable. Una variable es como una caja donde guardas un pedazo de data o informaci√≥n con un nombre.
Por ejemplo, puede haber una variable llamada myName que guarda la informaci√≥n &amp;quot;Patrick&amp;quot;, y otra variable llamada loveMusic que guarda el valor de true, y otra variable llamada age que guarda el valor 3.</description>
    </item>
    
    <item>
      <title>Operadores</title>
      <link>/es/java-basics/activity-3/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/activity-3/</guid>
      <description>1. Matem√°tica : Operadores de Artim√©tic En el √∫ltimo ejercicio, aprendimos sobre distintos tipos de variables y c√≥mo podemos aignarles un valor. Por ejemplo:
int age = 3; // declara la variable age de type int con valor de 3 age = 4; // asingnale el valor de 4 a la variable age El c√≥digo de arriba le suma 1 a la variable age.
Y en Java, podemos realizar operaciones matem√°ticas directamente en las variables y con los siguientes opereadores aritm√©ticos: +, -, *, /, %.</description>
    </item>
    
    <item>
      <title>Control Structures</title>
      <link>/es/java-basics/activity-4/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/activity-4/</guid>
      <description>1. Tomanndo Una Decision: If-Statement Patrick üê• es un pato muy cordial que le gusta saludar a todo el que conoce con &amp;ldquo;Good Morning,&amp;rdquo; &amp;ldquo;Good Afternoon,&amp;rdquo; o &amp;ldquo;Good Night&amp;rdquo; dependiendo del tiempo del d√≠a.
(image by National Geographic: giphy.com/natgeochannel)
Como aprendimos antes, podemos imprimir las siguientes oraciones:
System.out.println(&amp;#34;Good Morning&amp;#34;); // se dice entre 0:00 - 11:59 System.out.println(&amp;#34;Good Afternoon&amp;#34;); // se dice entre 12:00 - 19:59 System.out.println(&amp;#34;Good Night&amp;#34;); // se dice entre 20:00 - 23:59 Sin embargo, tambi√©n sabemos que Patrick üê• solo puede decidir que decir dependiendo la hora.</description>
    </item>
    
    <item>
      <title>M√©todos</title>
      <link>/es/java-basics/activity-5/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/activity-5/</guid>
      <description>1. Qu√© son los m√©todos? Ya aprendimos como guardar data en variables, imprimir data, imprimir oraciones, y como tomar decisiones con los if-statement, for-loop, y while-loop.
En nuestro √∫ltimo ejemplo, aprendimos que el siguiente c√≥digo calcula la suma del 1 al 100:
int total = 0; int num = 1; while(num &amp;lt;= 100){ total = total + num; num = num + 1; } System.out.println(&amp;#34;Sum: &amp;#34; + total); Pero si en vez queremos calcular la suma del 1 al 77?</description>
    </item>
    
    <item>
      <title>Objetos y Clases</title>
      <link>/es/java-basics/activity-6/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/activity-6/</guid>
      <description>1. Creando una Clase Java es un lenguaje de programaci√≥n orientado a objetos, cual significa que todo en Java est√° asociado con un objeto y una clase (el plano para un objeto).
Por ejemplo, la l√≠nea de c√≥digo que usamos en la actividad 1 es una llamada de un m√©todo de una clase pre definida llamada System.
System.out.println(&amp;#34;Hello World&amp;#34;); System es una clase que se usa para manejar entradas y salidas del usuario.</description>
    </item>
    
    <item>
      <title>Data Structures (Array &amp; ArrayList)</title>
      <link>/es/java-basics/activity-7/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/activity-7/</guid>
      <description>En los √∫ltimos ejercicios, aprendimos sobre varilables que nos permiten accesar y guardar un pedazo de data. Pero, y si quereos guardar mucha data parecida? Habr√° una manera buena de organizarlas sin declarar multiples variables?
En programaci√≥n, estructuras de dato son escructuras que permiten que programadores guarden multiples pedazos de data del mismo tipo. Usando estructuras de data es una manera eficiente de guardar y accesar pedazos grandes de data. En este ejercisio, aprederemos sobre 2 estructucas de data usadas en Java: array y ArrayList.</description>
    </item>
    
    <item>
      <title>Java: Basics - Answer Key</title>
      <link>/es/java-basics/answer-key/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/es/java-basics/answer-key/</guid>
      <description>activity-1: Print Statements and Comments Hello World class Main { public static void main(String[] args) { System.out.print(&amp;#34;Hello World&amp;#34;); System.out.print(2020); System.out.print(&amp;#39;@&amp;#39;); } } Output:
Hello World2020@Owl class Main { public static void main(String[] args) { System.out.println(&amp;#34;Hello world!&amp;#34;); System.out.println(&amp;#34; ‚Äã, ___ / ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ \\&amp;#34;); System.out.println(&amp;#34;‚Äã`\\/{o,o} &amp;lt; Hi, I am Minerva. Patrick&amp;#39;s friend! |&amp;#34;); System.out.println(&amp;#34;‚Äã ‚Äã/ /) ) \\ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ /&amp;#34;); System.</description>
    </item>
    
  </channel>
</rss>
