<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stacks: The Driver on Nuevo Foundation Workshops</title>
    <link>/java-datastructures/stacks/</link>
    <description>Recent content in Stacks: The Driver on Nuevo Foundation Workshops</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Feb 2020 13:24:17 -0700</lastBuildDate>
    <atom:link href="/java-datastructures/stacks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>/java-datastructures/stacks/introduction/</link>
      <pubDate>Mon, 10 Feb 2020 13:24:17 -0700</pubDate>
      <guid>/java-datastructures/stacks/introduction/</guid>
      <description>&lt;h2 id=&#34;visualizing-a-stack&#34;&gt;Visualizing a Stack&lt;/h2&gt;&#xA;&lt;p&gt;A stack is very similar to a queue and many of the concepts that you learned about a queue can be applied on a stack. Unlike the queue with the FIFO logic, a stack is different in that uses the opposite logic, LIFO (Last In, First Out).&lt;/p&gt;&#xA;&lt;p&gt;A common example to think about a stack is a stack of plates. Imagine 5 plates stacked on top of one another. If you add a sixth plate onto the top of the stack, your stack of plates is now a stack of 6. However, what if you wanted to remove a plate? Well, you wouldn&amp;rsquo;t reach for the bottom of the stack and take a plate; you would take a plate out from the top.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Methods</title>
      <link>/java-datastructures/stacks/methods/</link>
      <pubDate>Mon, 10 Feb 2020 13:24:17 -0700</pubDate>
      <guid>/java-datastructures/stacks/methods/</guid>
      <description>&lt;h2 id=&#34;stacks&#34;&gt;Stacks&lt;/h2&gt;&#xA;&lt;p&gt;A stack is similar to a queue. The only difference are the method names and the manner in which we retrieve the items.&lt;/p&gt;&#xA;&lt;p&gt;Before we create a stack, we will have to &lt;code&gt;import&lt;/code&gt; the &lt;code&gt;stack&lt;/code&gt; class. To make life easier, we can use a &lt;code&gt;*&lt;/code&gt; instead to import all classes in the library. It will look something like this.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This will import stack, among other classes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;util&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are several methods to use on a stack. If you are interested, you may search the internet for more information about these methods. However, we are only going to explain the most important methods for now: &lt;code&gt;push()&lt;/code&gt;, &lt;code&gt;peek()&lt;/code&gt;, and &lt;code&gt;pop()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Problem 1: Stack Basics</title>
      <link>/java-datastructures/stacks/problem-1/</link>
      <pubDate>Mon, 10 Feb 2020 13:24:17 -0700</pubDate>
      <guid>/java-datastructures/stacks/problem-1/</guid>
      <description>&lt;h2 id=&#34;task-1-reversing-using-stack&#34;&gt;Task 1: Reversing Using Stack&lt;/h2&gt;&#xA;&lt;p&gt;Oh no! A new intern was hired and messed up the list of restaurants! The inputs of the restaurants are in &lt;strong&gt;reverse&lt;/strong&gt; order! Luckily the stack is the perfect data structure for this. Can you create a new stack in the correct order?&lt;/p&gt;&#xA;&lt;div class=&#34;notices tip&#34; &gt;&#xD;&#xA;    &lt;p header-value=&#34;Tip&#34;&gt;&lt;ol&gt;&#xA;&lt;li&gt;Remember the stack is Last In First Out (LIFO; think of a stack of plates).&lt;/li&gt;&#xA;&lt;li&gt;How does the original stack look like?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
