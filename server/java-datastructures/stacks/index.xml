<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stacks: The Driver on Nuevo Foundation Workshops</title>
    <link>/java-datastructures/stacks/</link>
    <description>Recent content in Stacks: The Driver on Nuevo Foundation Workshops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Feb 2020 13:24:17 -0700</lastBuildDate><atom:link href="/java-datastructures/stacks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>/java-datastructures/stacks/introduction/</link>
      <pubDate>Mon, 10 Feb 2020 13:24:17 -0700</pubDate>
      
      <guid>/java-datastructures/stacks/introduction/</guid>
      <description>Visualizing a Stack A stack is very similar to a queue and many of the concepts that you learned about a queue can be applied on a stack. Unlike the queue with the FIFO logic, a stack is different in that uses the opposite logic, LIFO (Last In, First Out).
A common example to think about a stack is a stack of plates. Imagine 5 plates stacked on top of one another.</description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>/java-datastructures/stacks/methods/</link>
      <pubDate>Mon, 10 Feb 2020 13:24:17 -0700</pubDate>
      
      <guid>/java-datastructures/stacks/methods/</guid>
      <description>Stacks A stack is similar to a queue. The only difference are the method names and the manner in which we retrieve the items.
Before we create a stack, we will have to import the stack class. To make life easier, we can use a * instead to import all classes in the library. It will look something like this.
// This will import stack, among other classes import java.util.*; There are several methods to use on a stack.</description>
    </item>
    
    <item>
      <title>Problem 1: Stack Basics</title>
      <link>/java-datastructures/stacks/problem-1/</link>
      <pubDate>Mon, 10 Feb 2020 13:24:17 -0700</pubDate>
      
      <guid>/java-datastructures/stacks/problem-1/</guid>
      <description>Task 1: Reversing Using Stack Oh no! A new intern was hired and messed up the list of restaurants! The inputs of the restaurants are in reverse order! Luckily the stack is the perfect data structure for this. Can you create a new stack in the correct order?
Remember the stack is Last In First Out (LIFO; think of a stack of plates). How does the original stack look like? // Example of current stack Stack&amp;lt;String&amp;gt; restaurants = new Stack&amp;lt;&amp;gt;(); restaurants.</description>
    </item>
    
  </channel>
</rss>
