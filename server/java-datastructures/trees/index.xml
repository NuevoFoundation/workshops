<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trees on Nuevo Foundation Workshops</title>
    <link>/java-datastructures/trees/</link>
    <description>Recent content in Trees on Nuevo Foundation Workshops</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Aug 2022 13:24:17 -0700</lastBuildDate>
    <atom:link href="/java-datastructures/trees/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>/java-datastructures/trees/introduction/</link>
      <pubDate>Sat, 06 Aug 2022 13:24:17 -0700</pubDate>
      <guid>/java-datastructures/trees/introduction/</guid>
      <description>&lt;p&gt;Trees are made up of two components: &lt;strong&gt;edges&lt;/strong&gt; and &lt;strong&gt;nodes&lt;/strong&gt;. Let&amp;rsquo;s take a look at each of these components in a bit more detail.&lt;/p&gt;&#xA;&lt;h3 id=&#34;edges&#34;&gt;Edges&lt;/h3&gt;&#xA;&lt;p&gt;You can imagine an edge as the line that connects two nodes. Edges always connect exactly two nodes. Edges can carry some information, but they don&amp;rsquo;t need to.&lt;/p&gt;&#xA;&lt;h3 id=&#34;nodes&#34;&gt;Nodes&lt;/h3&gt;&#xA;&lt;p&gt;Nodes are just points on a tree that represent some data. A tree needs at least one node and each node can have as many edges as it wants, as long as there is another different node that it is connected to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Methods</title>
      <link>/java-datastructures/trees/methods/</link>
      <pubDate>Sat, 06 Aug 2022 13:24:17 -0700</pubDate>
      <guid>/java-datastructures/trees/methods/</guid>
      <description>&lt;h2 id=&#34;binary-trees&#34;&gt;Binary Trees&lt;/h2&gt;&#xA;&lt;p&gt;Trees are a special type of data structure because they are made up of a collection of nodes connected by edges. There isn&amp;rsquo;t a one stop initializer to create a new, generic tree like the other data structures we&amp;rsquo;ve looked at. To make things easier, we will look specifically at &lt;strong&gt;Binary Trees&lt;/strong&gt;, which are a specific type of tree with strict rules about where each node should go.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Problem 1: Tree Basics</title>
      <link>/java-datastructures/trees/problem-1/</link>
      <pubDate>Sat, 06 Aug 2022 13:24:17 -0700</pubDate>
      <guid>/java-datastructures/trees/problem-1/</guid>
      <description>&lt;h2 id=&#34;task-1-find-a-value-in-a-binary-tree&#34;&gt;Task 1: Find a Value in a Binary Tree&lt;/h2&gt;&#xA;&lt;p&gt;Now that we know the basics of traversing through a tree, implement binary search based on the process (or algorithm) we talked about in the previous page. Here&amp;rsquo;s a quick refresher:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If the current value is less than what we want, go to the right node.&lt;/li&gt;&#xA;&lt;li&gt;If the current value is more than what we want, go to the left node.&lt;/li&gt;&#xA;&lt;li&gt;If the current value is what we want, you&amp;rsquo;re done!&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;iframe height=&#34;800px&#34; width=&#34;100%&#34; src=&#34;https://replit.com/@nuevofoundation/BinarySearch?lite=true&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; allowtransparency=&#34;true&#34; allowfullscreen=&#34;true&#34; sandbox=&#34;allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals&#34;&gt;&lt;/iframe&gt;&#xD;&#xA;&lt;style&gt;&#xD;&#xA;    details summary::-webkit-details-marker {&#xD;&#xA;        display: none;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    details summary {&#xD;&#xA;        width: 100%;&#xD;&#xA;&#x9;    padding: .5rem 1rem .5rem 2.5rem;&#xD;&#xA;        color: #fff;&#xD;&#xA;        position: relative;&#xD;&#xA;        cursor: pointer;&#xD;&#xA;        background:#6bb1e0;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    details summary:before {&#xD;&#xA;        content: &#34;+&#34;;&#xD;&#xA;        color: #fff;&#xD;&#xA;        position: absolute;&#xD;&#xA;        line-height: 0;&#xD;&#xA;        margin-top: 1rem;&#xD;&#xA;        left: 1rem;&#xD;&#xA;        font-weight: 200;&#xD;&#xA;        transform-origin: center;&#xD;&#xA;        transition: 200ms linear;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    details[open] summary:before {&#xD;&#xA;        transform: rotate(45deg);&#xD;&#xA;        font-size: 2rem;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    details {&#xD;&#xA;        margin: 2rem 0;&#xD;&#xA;        position: relative;&#xD;&#xA;         &#xD;&#xA;         &#xD;&#xA;        padding: 0px;&#xD;&#xA;        display: block;&#xD;&#xA;        background: #e6f3fb;&#xD;&#xA;&#x9;    color: rgba(47, 103, 141, 0.995) !important&#xD;&#xA;    }&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&lt;details&gt;&#xD;&#xA;    &lt;summary&gt;SPOILER: Click here if you need help with the solution!&lt;/summary&gt;&#xD;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;findValue&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;root&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// We start at the root of the tree&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75af00&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;root&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// We follow the logic we described above &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00a8c8&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75af00&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;current value is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#75af00&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// If we are here, we reached the node with&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the correct value!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/details&gt;&#xD;&#xA;&lt;h3 id=&#34;congrats-if-youve-made-it-this-far-then-you-have-officially-programmed-binary-search&#34;&gt;Congrats! If you&amp;rsquo;ve made it this far, then you have officially programmed binary search!&lt;/h3&gt;</description>
    </item>
  </channel>
</rss>
