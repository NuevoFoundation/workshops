<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phaser: Space Shooter Game on Nuevo Foundation Workshops</title>
    <link>/phaser-space-invaders-game/</link>
    <description>Recent content in Phaser: Space Shooter Game on Nuevo Foundation Workshops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 Aug 2020 11:45:38 -0700</lastBuildDate><atom:link href="/phaser-space-invaders-game/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Starting Up</title>
      <link>/phaser-space-invaders-game/starting-up/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/starting-up/</guid>
      <description>Starting Up Today you will be using Replit to learn how to code your Space Invaders game. Before starting, you will need to sign up for a Replit account, if you do not yet have one.
Click the button below to sign up for a Replit account - you will need an email account in order to sign up. If you already have a Replit account, you can login to your account using the below button as well.</description>
    </item>
    
    <item>
      <title>The Game&#39;s File Structure</title>
      <link>/phaser-space-invaders-game/game-structure/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/game-structure/</guid>
      <description>As you can see, we&amp;rsquo;ve already created many files for you. The structure of the game has already been laid out, and you will be filling each file with content. So, in order to begin, we must first have at least a basic understanding of what each file does and how they relate to each other.
Firstly, phaser.min.js is simply a JavaScript file that contains code that allows the game to run Phaser, the framework we are using to make the game.</description>
    </item>
    
    <item>
      <title>Phaser Fundamentals</title>
      <link>/phaser-space-invaders-game/phaser-fundementals/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/phaser-fundementals/</guid>
      <description>Part 1: The Config Variable Let&amp;rsquo;s go over some of the fundamentals of Phaser, a game framework that uses HTML and JavaScript to create games for the web! This is what you&amp;rsquo;ll be learning to use in this workshop.
Go to game.js. Every Phaser game will start out off with a variable that stores the configurations for the game (often named config like we have here).
var config = { type: Phaser.</description>
    </item>
    
    <item>
      <title>Preload, Create, and Update</title>
      <link>/phaser-space-invaders-game/preload-create-update/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/preload-create-update/</guid>
      <description>The Preload, Create, and Update methods So now let&amp;rsquo;s look at our scenes, which will eventually hold the code for our game. If you scroll through, you will see that each scene has a constructor (because it is a class), and also three large methods: preload(), create(), update(). There are also a number of helper functions in Scene 2, but we will talk about the aforementioned three methods because they are integral to understanding Phaser.</description>
    </item>
    
    <item>
      <title>Placing things into Phaser</title>
      <link>/phaser-space-invaders-game/placing-things/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/placing-things/</guid>
      <description>Placing Text Now, you will learn how to place things within Phaser. Look at the repl below.
Let&amp;rsquo;s first go over how to place text!
message = this.add.text(20, 10, &amp;#34;Hello World!&amp;#34;, { font: &amp;#34;25px Arial&amp;#34;, fill: &amp;#34;white&amp;#34; }); These lines of code create a variable named &amp;ldquo;message.&amp;rdquo; This variable adds the text &amp;ldquo;Hello World&amp;rdquo; to the (X, Y) coordinate (20, 10) on our game window. The code also specifices that the text is created to be the color white, have font Arial, and have font size 25 px.</description>
    </item>
    
    <item>
      <title>Activity 1 - Place Background and Player Ship</title>
      <link>/phaser-space-invaders-game/activity-1/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-1/</guid>
      <description>This activity will have two parts: loading in the game&amp;rsquo;s background and loading in the ship that the player will eventually control (it will just be an image that doesn&amp;rsquo;t move for now). For both of these activities, the method will be very similar: we will first upload the image into the game on Scene 1 and then make it visible with Scene 2. You can think of Scene 1 as being used to upload the picture into the game and Scene 2 being used to create things that we&amp;rsquo;ve uploaded.</description>
    </item>
    
    <item>
      <title>Creating Animations</title>
      <link>/phaser-space-invaders-game/animation/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/animation/</guid>
      <description>Animation in Phaser Animation works by showing a set of images back to back very quickly. When we do this quickly, our mind sees it as movement. In a way, you&amp;rsquo;re tricking the mind to think that this set of images is just one thing that is moving.
We use spritesheets for things we want to be animated because we can create that animation by scrolling through the spritesheets. In order to animate spritesheets, there are two steps we must do.</description>
    </item>
    
    <item>
      <title>Activity 2 - Animating the Player&#39;s Ship</title>
      <link>/phaser-space-invaders-game/activity-2/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-2/</guid>
      <description>To add some life to our game, let’s get things moving around! Animate the player we have created.
Once your ship is animated, it should look like this. Notice the flames coming out of the ship&amp;rsquo;s engine! (Although it may be faster or slower depending on the frame rate that you picked).
We will make one final touch to the animation - we will move the background as well. Change the background from a regular image to a TileSprite like this:</description>
    </item>
    
    <item>
      <title>Enabling User Inputs</title>
      <link>/phaser-space-invaders-game/input/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/input/</guid>
      <description>User Inputs Inputs are essential because without the user inputting things with controls, our game isn&amp;rsquo;t really much of a game. Although Phaser supports a variety of different input options, we are going to go over three that you will use in the Space Invaders Game.
Arrow Keys Let&amp;rsquo;s start with one of the most important controls: arrow keys. First, we will create a variable that is able to detect when the player presses an arrow key.</description>
    </item>
    
    <item>
      <title>Activity 3 - Add Keyboard Input to Move the Player</title>
      <link>/phaser-space-invaders-game/activity-3/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-3/</guid>
      <description>Now, let&amp;rsquo;s allow our ship to move when the player uses the keyboard. The first step is to create a cursor attribute in the create() method in Scene2.js:
The most efficient way to create movement is to create a helper function that uses the cursor attribute to check whether the keyboard has been pressed. We have already made this function for you, and it is called movePlayer():
We then move the player with this function.</description>
    </item>
    
    <item>
      <title>Activity 4 - Adding Enemies</title>
      <link>/phaser-space-invaders-game/activity-4/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-4/</guid>
      <description>Now, let’s make some enemies for our player to fight! Let’s first load a sprite sheet for our enemies in Scene 1 just like we did for the player. Use the same syntax you used to load in the player, but use a different name, assets/enemies.png as the source of the sprite sheet, and a frameWidth and frameHeight of 16:
In addition, create another animation in Scene 1 in the same way you created the player&amp;rsquo;s animation (you can use the same arguments for frameRate and repeat, but remember to use enemies for frames:</description>
    </item>
    
    <item>
      <title>Activity 5 - Making the Enemies Move</title>
      <link>/phaser-space-invaders-game/activity-5/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-5/</guid>
      <description>At the moment, the enemies are a bit boring because they’re just sitting still. Let’s make them move a little bit! Our goal will be to make them move from left to right like this: Let’s start by making the enemies move to the left once they’re created. We can do this by simply adding one line of code:
enemy.body.velocity.x = -90; Place in our createEnemies() method:
But if you test out the code now, we can see that the enemies just keep going to the left infinitely because of Phaser’s infinite canvas.</description>
    </item>
    
    <item>
      <title>Activity 6 - Restarting the Player after Being Destroyed</title>
      <link>/phaser-space-invaders-game/activity-6/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-6/</guid>
      <description>We have made some pretty solid enemies, but now there&amp;rsquo;s something wrong - they don&amp;rsquo;t actually do anything to you! Specifically, they can&amp;rsquo;t actually hurt you in any way. Let&amp;rsquo;s change that. In the final game, there will be two ways you can get damaged: getting shot by an enemy laser, or directly touching the enemy. Let&amp;rsquo;s start with the latter since it is a bit easier.
Collision is relatively easy in Phaser.</description>
    </item>
    
    <item>
      <title>Activity 7 - Allowing the Player to Shoot</title>
      <link>/phaser-space-invaders-game/activity-7/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-7/</guid>
      <description>Now, we we want to add one of the most important parts of the game - shooting the enemies! Although we can defeat enemies by crashing into them, this won&amp;rsquo;t be a good idea once we add lives later. We will create a shooting effect by creating an object for the beam using a separate JavaScript file (like we did for the explosion).
We will start with some basic stuff - loading a spritesheet and animation in Scene 1 for the player&amp;rsquo;s beams:</description>
    </item>
    
    <item>
      <title>Activity 8 - Allowing the Enemies to Shoot</title>
      <link>/phaser-space-invaders-game/activity-8/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-8/</guid>
      <description>Now, we will make the enemies shoot back at the player. Each enemy will shoot randomly, and the difficulty (which will later be escaleted with each level) is defined by how often they randomly shoot.
The enemy beam is rather similar to the player’s beam. We will again make a very similar enemyBeam.js file with nearly the same code as the playerBeam.js but with different variable names and numbers:
We will share sprite and animation for the player&amp;rsquo;s beams and enemy&amp;rsquo;s beams.</description>
    </item>
    
    <item>
      <title>Activity 9 - Adding Score, Levels, and Lives</title>
      <link>/phaser-space-invaders-game/activity-9/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-9/</guid>
      <description>Now, we will add some numbers to quantify our game! The easiest one to implement is the score. Create a text variable on the top left of the screen that displays Score: and the value of a num variable that stores the player&amp;rsquo;s score.
this.scoreText = this.add.text(20, 10, &amp;#34;Score: &amp;#34; + this.score, { font: &amp;#34;25px Arial&amp;#34;, fill: &amp;#34;white&amp;#34; }); This line print score variable at the top left of the screen.</description>
    </item>
    
    <item>
      <title>Activity 10 - Adding a Title Screen</title>
      <link>/phaser-space-invaders-game/activity-10/</link>
      <pubDate>Thu, 20 Aug 2020 11:45:38 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/activity-10/</guid>
      <description>Now, we will put our separation of scene 1 and scene 2 to good use by adding a title screen to finish off our game!
This is very simple! we will first comment out startGame() line from the bottom of create() in Scene 1. We are going to use startGame() function to start game instead of start automatically as before:
The console will go back to a black canvas. To make a title screen, we need to import the background screen and some text in start page section from scene 1:</description>
    </item>
    
    <item>
      <title>Answer Key - Phaser Space Invaders Game</title>
      <link>/phaser-space-invaders-game/answer-key/</link>
      <pubDate>Sat, 28 Mar 2020 10:24:17 -0700</pubDate>
      
      <guid>/phaser-space-invaders-game/answer-key/</guid>
      <description>Activity 1 Scene1.js
preload(){ this.load.image(&amp;#34;background&amp;#34;, &amp;#34;assets/space.png&amp;#34;); this.load.spritesheet(&amp;#39;player&amp;#39;, &amp;#39;assets/player.png&amp;#39;, { frameWidth: 32, frameHeight: 48 }); } Scene2.js
create(){ this.background = this.add.image(config.width/2, config.height/2, &amp;#34;background&amp;#34;); this.player = this.physics.add.sprite(config.width / 2, config.height - 75, &amp;#34;player&amp;#34;); } Activity 2 Scene1.js
create(){ this.anims.create({ key: &amp;#34;player_anim&amp;#34;, frames: this.anims.generateFrameNumbers(&amp;#34;player&amp;#34;), frameRate: 20, repeat: -1 }); } Scene2.js
create(){ // delete your previous background code and create it again as a tile sprite this.background = this.add.tileSprite(0, 0, config.width, config.height, &amp;#34;background&amp;#34;); this.</description>
    </item>
    
  </channel>
</rss>
