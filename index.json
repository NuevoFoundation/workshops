[{"uri":"https://nuevofoundation.github.io/workshops/java-tictactoe/using-repl-it/","title":"Introduction","tags":[],"description":"","content":"Tic Tac Toe Summary Using Repl.it Today you will be using Repl.it to code in Java. Here is the starter code you will use today:\n Before we start, let\u0026rsquo;s first understand how the window works. The Main.java file contains code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the bottom screen, under the Console tab.\n Click the icon next to the Run button that says open in repl.it. This will be the window where you will type all the code for the TicTacToe program. Have fun!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/activity-0/","title":"Using Repl.It","tags":[],"description":"","content":"Using Repl.it Today you will be using Repl.it to learn how to code in Java. Here is an example interactive window that you will use today:\n Before we start, let\u0026rsquo;s first understand how the window works. The Main.java file contains code, or instructions for the computer to run. By pressing the run button (the green button with the triangle in the middle at the top of the frame), you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the bottom screen, under the Console tab.\nIn the Objects and Classes exercise, you will need to switch between the Main.java file and the Birds.java file. You can do this by clicking on the icon on the right that looks like a document. This will open the Files menu and will allow you to access the other files.\nTry and press the run button. If you see Let\u0026rsquo;s learn Java!, that means you\u0026rsquo;re ready. Let\u0026rsquo;s get started!\n"},{"uri":"https://nuevofoundation.github.io/workshops/unity/install-unity/","title":"Installing Unity","tags":[],"description":"","content":"We need to help Nuvi defeat the aliens, but programming everything from scratch might be a bit too hard for us. Unity is a tool that has some basic parts of game-building simplified for us, so all we need to do is drag and drop some things, and write a bit of simple C# code.\nWhy use Unity \u0026hellip;when there are other tools out there?\nWell, Unity has some great aspects, especially if you\u0026rsquo;re just starting your game development journey. It\u0026rsquo;s cross-platform (meaning you can develop a game for, say, both computers and phones); its coding is beginner-friendly; and above all, it has a large, supportive community.\nSome games developed in Unity include: Subway Surfers, Hearthstone, Cytus, Pokemon Go, Overcooked, Cuphead, Hollow Knight, Among Us, and Genshin Impact. Just from this short list, you can notice that there are both indie titles and AAA titles, and there are games for a variety of platforms. Whether you want to develop in a big company or develop on your own, it\u0026rsquo;s a good idea to have some experience with Unity!\n So, before we can do anything, you need to download and install Unity! Even if you already have Unity installed, look through this activity to make sure you have the right version of Unity.\nDownloading Unity First, let\u0026rsquo;s choose and download Unity .\nClick on \u0026ldquo;Choose your Unity + download\u0026rdquo;.\nThen, click on \u0026ldquo;Individual\u0026rdquo; and under \u0026ldquo;Personal\u0026rdquo;, select \u0026ldquo;Get Started\u0026rdquo;. After that, we would want to select \u0026ldquo;Start here\u0026rdquo; Under \u0026ldquo;First-Time Users\u0026rdquo;. This will begin to download Unity.\nAfter Unity finishes downloading, open up Unity, which will then begin the Unity Hub setup, an application that will help you manage your Unity projects.\nA pop up window will appear. Agree to the user agreements, select the destination folder to where you want to download in your computer, install, and then run Unity Hub by selecting \u0026ldquo;Finish\u0026rdquo;!\nUnity Hub The Unity Hub installer will then appear. Make sure your Unity version is \u0026ldquo;2019.4\u0026rdquo;. If not, we can worry about that later. Once you hit install, you will then be taken to a page where you have to create a Unity ID. If you don\u0026rsquo;t have one yet, create a new ID. If you already have one, select, \u0026ldquo;I already have a Unity ID\u0026rdquo; and input your information. After inputting your information, the page will then ask you to choose a template for a microgame. This only occurs because we chose \u0026ldquo;First-Time Users\u0026rdquo;, so Unity wants new users to play around with the given projects to help them understand Unity better. We will be using our own projects to teach, so for now, you can choose a random template you might want to explore later and hit \u0026ldquo;continue\u0026rdquo; and \u0026ldquo;Launch Unity\u0026rdquo;. Unity will then launch the microgame, but since we are not using it, simply close Unity.\nIf your version of Unity is not 2019.4, then open up the Unity hub and to the left of the window, select \u0026ldquo;Installs\u0026rdquo;. Click the \u0026ldquo;ADD\u0026rdquo; button and select the version you want. You can select the latest version or the version we are using for this project, \u0026ldquo;2019.4.19f1 (LTS)\u0026quot;. Then, the Unity Hub will take you to a page where you can choose the libraries you can include. Make sure that the Mac and Windows Build Support are selected! Then click done.\nNow, to start working on a new project, open Unity Hub and click on the blue button that says \u0026ldquo;NEW\u0026rdquo;. Name your project however you like, and choose a place to create your project folder. Make sure you have \u0026ldquo;2D\u0026rdquo; chosen as your project template, as shown in the screenshot.\nFor this workshop, we used the version \u0026ldquo;2019.4.19f1\u0026rdquo;; however, by the time you\u0026rsquo;re reading this, there may be a more updated version. We will use version \u0026ldquo;2019.4.10f1\u0026rdquo; in this workshop (including for screenshots). If you choose to go down the path of game developing in Unity, then don\u0026rsquo;t forget to check out the latest versions! (However, beware that there may be minor changes in the user interface in later versions.)\n "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/getting-started/","title":"Getting Started","tags":[],"description":"","content":"What is Android? Android is currently the most used mobile operating system in the world! Android Studio lets you create apps that can be used by these Android devices. In fact, if you have an Android phone, then you can even download the app you\u0026rsquo;re making today onto your phone!\nAbout this Project In this project we\u0026rsquo;ve given you a mostly working Android application that\u0026rsquo;s a game of Tic-Tac-Toe. It needs your help to fix some problems and add a few parts to make it a great game!\nDownload the Project Files To get started, download the project files using the steps below:\n Download the project files for your game. Find the TicTacToe.zip file in your downloads folder. Unzip the file.  On Windows: Right-click on TicTacToe.zip and select Extract All.... A folder named \u0026lsquo;TicTacToe\u0026rsquo; will be created containing the project code.    On this adventure, you will need to solve the puzzles marked with PUZZLE tags to complete the game!\n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/","title":"Linux Basics","tags":[],"description":"An introductory guide to using the Linux command line.","content":"This tutorial requires:\n A computer that is not a Chromebook 3GB of free space on your computer ~10 minutes to download VirtualBox ~30 minutes to download the virtual machine image \n  Welcome Thank goodness you\u0026rsquo;re here! I am Nuvi, an agent from the Secret Hub Headquarters (SHH). We just got word that someone might have hacked my computer. We need your help to find out what is going on. We\u0026rsquo;re afraid that our secret message might have been leaked!\nAn Operating System (OS) is a software which acts as an interface between you and the computer hardware. Every computer must have at least one OS to run other programs. The OS helps you to communicate with the computer without knowing how to speak the computer\u0026rsquo;s language.\nMicrosoft Windows is the OS you are probably most familiar with using at home. Another common one you might have seen is Mac OS from Apple. There are many options out there, but today we will using a Linux based OS, called Kali Linux. It is a popular OS for security experts and hackers!\nThe biggest differnce between Windows and Linux is what they are best at doing. Windows is really good for multimedia and games! Mac OS falls between Windows and Linux. It is great for multimedia too, but cannot play all the games. Linux is usually better for programming and hosting servers.\nTable of Contents Sections  Using Virtual Machines Part 1 \n   Using Virtual Machines Part 2 \n   Starting up the Virtual Machine \n   Activity 1 - Determine User Account \n   Activity 2 - Determine User Location \n   Answer Key - Linux Basics \n   Activity 3 - Explore Current Directory \n   Activity 4 - Note Taking Practice \n   Activity 5 - Secure User Permissions \n   Activity 6 - A BAD File \n   Activity 7 - What's wrong with the file? \n   Activity 8 - What's different? \n   Activity 9 - Remove the Bad File \n   Activity 10 - Let's move and replace \n   Activity 11 - Store and protect files \n   Closing \n    "},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/vbox-setup/","title":"Using Virtual Machines Part 1","tags":[],"description":"An introductory guide to using virtual machines","content":" So you can help us, we are providing you with a copy of the hacked computer as a virtual machine.\nWhat is a virtual machine? A virtual machine (commonly called a VM) is a computer file (called an image), that behaves like an actual computer.\nIn other words, creating a computer within a computer. It runs in a window, much like any other program.\nThis gives you the same experience on a VM as you would on a regular computer.\nThe VM is sandboxed from the rest of the system, meaning that the software inside a VM can’t affect the computer itself.\nThis produces an ideal environment for testing other operating systems, accessing virus-infected data, and creating new software or applications.\n Setting up VirtualBox VirtualBox is a virtualization software, also called a hypervisor. It allows your computer to host virtual machines.\nDownloading VirtualBox VirtualBox is available at this link:\nDownload link  If you are using Windows: Select \u0026ldquo;Windows hosts\u0026rdquo;\nIf you are using Mac: Select \u0026ldquo;OS X hosts\u0026rdquo;\nIf you are using something else, we recommend using Windows or Mac for this workshop. Anything else is beyond the scope for this workshop.\nNext run the installer that you just downloaded. The default options will be good enough for today! Keep clicking \u0026ldquo;Next\u0026rdquo; on the installer.\nNote some option selections are on the third page. If you see this warning, do not worry, this is expected. Once you arrive at this page click \u0026ldquo;install\u0026rdquo; to finish the setup. Now the installation is complete!\nFinally, you can keep the checkbox selected to start VirtualBox after installing. "},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/welcome/","title":"Welcome to your new Summer job!","tags":[],"description":"","content":"Hey there, congratulations! You have been hired at an apparel returns processing warehouse for the summer!\nYour job is to take returns of clothing and sort them based on the type of clothing they are. At orientation, your supervisor shows you the traditional, by-hand method to sorting this clothing. On your first day, you notice it is more time consuming than you expected. Not wanting to do more work than you have to of course, you convince your supervisors that you can devise a more efficient method using machine learning.\nYou will grab some sample pieces of clothing and hop on to your computer and get to work on this program\u0026hellip;\n"},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/starting-up/","title":"Starting Up","tags":[],"description":"","content":"Starting Up To begin, open your preferred internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer), and go to https://repl.it/@nuevofoundation/Phaser-Space-Invaders. Your screen should look like this:\nFor now, we will ignore the content of the project (the code), and we will instead go over the basics of how to use the website. On the left hand of the screen, you will see a list of files that contain code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the right side, called the console.\nIf you press run now, you will only see a black screen. This is because the code is not yet completed - this will be your job!\nClick the fork button to create a copy of the code for yourself to work on. Any activities under the Activity sections will be done in this browser tab.\n"},{"uri":"https://nuevofoundation.github.io/workshops/guidelines/site-architecture/","title":"How the site is built","tags":[],"description":"","content":"How the site is built The workshops subdomain content is built using the DocDock theme for Hugo. Hugo is a static site generator with a number of benefits:\n Content authors can focus on content using markdown and not on the technical implementation of the site or CSS/page styling. Workshops are automagically added to the left table-of-contents and the workshops home page. Hugo works great locally (ex: on an airplane), and Hugo is the fastest static site generator, building the entire workshop site in \u0026lt;2 seconds. Students benefit from a consistent UX across workshops, built-in accessibility, localization, responsive design supporting mobile-to-desktop, automated links to the GitHub repo, and fast global site performance using the Azure CDN. Nuevo Dev Team benefits from the ability to build and customize workshop pages including custom page templates, built-in page controls for alerts, notes, buttons, warnings and more , custom controls (ex: the Nuevo header), iframe interactivity, custom metadata, automated cross-page linking, page theming, automated site map creation, built-in icons, and built-in automation using GitHub Actions and Azure DevOps for build / deployment.  "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/repl-it/","title":"Starting up with Repl.it","tags":[],"description":"","content":"Today you will be using Repl.it to build JSappy bird. Here is an example interactive window that you will use today:\nOpen your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer) and go to https://repl.it .\nYou should see something like the following screen:\nHere is the final output of the game:\nhttps://jsappybird-answers--nuevofoundation.repl.co/\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/introduction/","title":"Introduction","tags":[],"description":"","content":"JavaScript Basics Hi there! If you\u0026rsquo;re reading this, it hopefully means that you\u0026rsquo;re here to learn JavaScript 😁🥳. Whether this is your first time coding or you want a way to quickly pick up a new language - you\u0026rsquo;re in the right place! Get ready to discover the power of programming and have fun.\nWhat is Code? We can\u0026rsquo;t learn how to code without first understanding what exactly code is. Think of your favorite website, if you can\u0026rsquo;t think of one let\u0026rsquo;s take NuevoFoundation.org. As a user, all you have to do is type the web address in your browser and before you know it - ta da! - the website appears, with all of its pretty colors and pictures of nuvi.\nEasy right? Not exactly, behind what seems like a simple interaction there exists hundreds - if not thousands! - lines of code to make it all work. Let\u0026rsquo;s take just one step of this interaction, searching and going to the Nuevo Foundation website. There are billions of websites (1.7 billion last time I checked), how does your browser get to the website you want so quickly? Think about that for a second\u0026hellip;\nThere are people who coded that, and people that coded your browser, and the Nuvi website, and this curriculum you\u0026rsquo;re reading, and \u0026hellip; well you get the point. Code is how we humans design and build things like websites, apps, and games. It\u0026rsquo;s the language we use to tell computers what to do.\nWhat is JavaScript and what is it used for? Just like there exists a bunch of human languages, there exists a bunch of programming languages. Perhaps you\u0026rsquo;ve heard of some of them, such as Python or Java. Each programming language has its strengths and purposes - for example, CSS is used for styling websites, Python is really good for data science, and so on.\nJavaScript is sometimes referred to as the \u0026ldquo;language of the web.\u0026rdquo; Pretty much any website you can think of uses JavaScript in some way of form. JavaScript is really good at controlling website behavior, for example, controlling what happens when you click a button or transferring data between pages.\nThe good thing is that once you learn one language, you can learn another one pretty quick as the fundamentals tend to stay the same.\nEnvironment Set Up Environment? I thought this was a coding workshop?\nEnvironment is just what programmers like to call their setup for coding. You know how you use things like Microsoft Word or Google Docs to write essays? You can think of that as your \u0026ldquo;writing essay\u0026rdquo; environment.\nFor programmers, there exists applications called IDEs, which stand for Integrated Development Environment. These are the types of applications that let us write and run code.\nFor this workshop, we will be using playcode.io.\nOnce you open playcode.io, there are a few things you need to do before we get started:\n close all files in the top left except for script.js. Delete everything in the script.js file. Turn off live by clicking once on the live button in the top right.  If you\u0026rsquo;ve done all the above steps correctly, your screen should look like this: Now we are finally ready to go and learn some JavaScript!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-1/","title":"Activity 1: Create a color board","tags":[],"description":"","content":" Example for basic colorboard Here is an example of how to make a color board with the color red, a width of 60, and a length of 30.\n#This is the example for creating a colorboard. from PIL import Image img = Image.new(\u0026#39;RGB\u0026#39;, (60, 30), \u0026#39;red\u0026#39;) img.save(\u0026#39;pil_red.png\u0026#39;) Create your own colorboard! Choose your favorite color and make a color board to play with! Here are some example colors you can choose from, but you can also pick your own color.\nYou can use color picker to choose a color: In order to see your image, please click on top left corner (which says \u0026lsquo;Files\u0026rsquo;), and then click on the image file to see the result.\n      \n  "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/","title":"Basics","tags":[],"description":"","content":"Topics  Starting up with Repl.it \n   Writing to Console (Print statement) \n   Comments \n   Variables \n   Reading from the Console \n    "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/queues/examples/","title":"Examples","tags":[],"description":"","content":"-- Visualizing a Queue  Imagine that you are designing NuevoEats for a business, and perhaps this business is McDonalds.\nWe want to serve our new potential clients in the most efficient way possible for our large business; one at a time. When customers place their to-go order on the NuevoEats app, it is almost as if they are forming an orderly line in front of our restaurant, with new customers joining at the rear. Customers should essentially \u0026ldquo;line up\u0026rdquo; when they place their order and we should be serving those same customers from front to back.\nQueues in Java work in a similar way. After we declare our Queue, we can add new elements to the back, and remove them from the front.\nIn fact, most queues we\u0026rsquo;ll encounter in Java work in this First In, First Out manner – often abbreviated to FIFO.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/stacks/examples/","title":"Examples","tags":[],"description":"","content":"-- Visualizing a Stack  A stack is very similar to a queue and many of the concepts that you learned about a queue can be applied on a stack. Unlike the queue with the FIFO logic, a stack is different in that uses the opposite logic, LIFO (Last In, First Out)\nA common example to think about a stack is a stack of plates. Imagine 5 plates stacked on top of one another. If you add a sixth plate onto the top of the stack, your stack of plates is now a stack of 6. However, what if you wanted to remove a plate? Well, you wouldn\u0026rsquo;t reach for the bottom of the stack and take a plate; you would ake a plate out from the top. This Last In, First Out (LIFO) logic applies to stacks in Java as well.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/colors_and_pixels/load_image_module/","title":"Import an image module","tags":[],"description":"","content":"Setting up the project To get started let’s start with importing a module. What does that mean? To do fun stuff with images, we need to unlock some functions to use. To get these functions we need to import a module. In this case if we import the module Pillow, we can use some functions that will help us modify images.\nFirstly, let’s delete everything in the main.py file. Then, add the following statements:\n from PIL import Image from PIL import ImageFilter  Once you hit run, you should see the module being installed in the console:\nIf you see the above, it means you have successfully imported a module! If you’re hitting issues, please ask for help before moving on.\nIf you’re curious to see what functions there are in the Pillow Image module, you find information about it here: https://pillow.readthedocs.io/en/latest/handbook/index.html\n "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/2d-arrays/introduction/","title":"Introduction","tags":[],"description":"","content":"\n--  We\u0026rsquo;ve already learned plenty about arrays. We know that an array can hold many different types (ints, Strings, doubles, etc.), but how about an array that holds many arrays?\nA 2D array has a type such as int[][] or String[][], with two pairs of square brackets. The elements of a 2D array are arranged in rows and columns, and the new operator for 2D arrays specifies both the number of rows and the number of columns. For example,\n{ int[][] A; A = new int[3][4]; } This creates a 2D array of int that has 12 elements arranged in 3 rows and 4 columns. There are also initializers for 2D arrays. For example, this statement creates the 3-by-4 array that is shown in the picture below:\n{ int[][] A = { { 1, 0, 12, -1 }, { 7, -3, 2, 5 }, { -5, -2, 2, -9 } }; } An array initializer for a 2D array contains the rows of A, separated by commas and enclosed between braces. Each row, in turn, is a list of values separated by commas and enclosed between braces. There are also 2D array literals with a similar syntax that can be used anywhere, not just in declarations. For example,\n{ A = new int[][] { { 1, 0, 12, -1 }, { 7, -3, 2, 5 }, { -5, -2, 2, -9 } }; } All of this extends naturally to three-dimensional, four-dimensional, and even higher-dimensional arrays.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arraylists/introduction/","title":"Introduction","tags":[],"description":"","content":"--  We\u0026rsquo;ve learned about arrays and even ventured into multidimensional arrays. Unfortunately arrays have many limitations and can sometimes be hard to use. One limitation that an array has is its explicit size. If you only have 10 elements of allotted space in that array, you can only store up to 10 elements. ArrayLists are a great data structure that has a dynamic size, meaning that you can add or subtract items at any time. There are many more things that ArrayLists can do, which is what makes ArrayLists such powerful data structures.\nBefore we create an ArrayList, we will have to import the ArrayList class. It will look something like this.\nimport java.util.ArrayList; // import the ArrayList class Remember, our goal is to create an ArrayList that keeps track of the customer\u0026rsquo;s order. We can do this like so:\nimport java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList\u0026lt;String\u0026gt; order = new ArrayList\u0026lt;String\u0026gt;(); } } As you can see, similar to the array, we have to declare what types of data the ArrayList will contain. In this case, we will make it contains Strings, since menu items will be Strings.\nTo add items to an order, we will use the add() method. If the customer were ordering from Burger King and wanted to order a combo with a Whopper, chicken nuggets, and fries, your method might look something like this.\nimport java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList\u0026lt;String\u0026gt; order = new ArrayList\u0026lt;String\u0026gt;(); order.add(\u0026#34;Whopper\u0026#34;); order.add(\u0026#34;Chicken Nugget\u0026#34;); order.add(\u0026#34;Fries\u0026#34;); } } If we wanted to get the first item of an ArrayList, you would use the get() method along with the index number of the element like so:\nimport java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList\u0026lt;String\u0026gt; order = new ArrayList\u0026lt;String\u0026gt;(); order.add(\u0026#34;Whopper\u0026#34;); order.add(\u0026#34;Chicken Nugget\u0026#34;); order.add(\u0026#34;Fries\u0026#34;); System.out.println(order.get(0)); //outputs whopper  } } There are many more methods that you can use on an ArrayList, but this is just the gist of what an ArrayList can do. The methods can be found on the next page.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/hashmaps/introduction/","title":"Introduction","tags":[],"description":"","content":"--  A hashmap is a table that holds a collection of key-value pairs. It \u0026ldquo;maps\u0026rdquo; numerous keys to their respective values. A hashmap is very similar to a dictionary. In a dictionary, you might want to look up a definition for a certain word. You simply look up the keyword in the dictionary and by doing so, you can get the definition attached to that keyword. The dictionary maps words (the \u0026ldquo;keys\u0026rdquo;) to their definition (the \u0026ldquo;values\u0026rdquo;).\nLet\u0026rsquo;s think about how we could use a hashmap to to help our driver find the address he needs to deliver the order. Suppose they have four customer orders to deliver. We can use a hashmap to store this information, where the keys are the customer names and the values are each customer\u0026rsquo;s address.\nWe want our driver to be able to access the addresses just like how you would look up definitions in a dictionary. By looking up \u0026ldquo;Melissa\u0026rdquo;, you would return Melissa\u0026rsquo;s address. We\u0026rsquo;ll learn how to implement this behavior in the next page.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/introduction/","title":"Introduction to Data Structures","tags":[],"description":"","content":"\n-- Before Nuevo Eats\u0026hellip;  To begin your training in Nuevo Eats, you first must learn something called data structures! Here you will learn everything you need to do know for you to take on your first Nuevo Eats Mission! Let\u0026rsquo;s start with the basics with what they are.\n Data Structures! Data structures are awesome and powerful. By using code, we can store lots of information in organized categories for use later!\nStoring items into these structures can let us access everything quickly and effectively - perfect for Nuevo Eats! Restaurants, foods, employees, and locations are just some of the examples we can use Data Structures to our advantage.\nData structures can store anything, much more than what we mentioned above! It can even store different data structures inside data structures!\n There are many different types of data structures, just like there are many ways to organize toys!\nNow that you some idea what it is, press next to find out how you can use this to help make Nuevo Eats for everyone!\nTopics  Setting Up \n   Prerequisites \n   For Loops \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/functions/more-about-functions/","title":"More about functions","tags":[],"description":"","content":"Suppose you have many lines of code, and you would like to give this section of code a meaningful name. Functions are blocks of code that do just that. A function is a set of instructions that we give to the computer to store, and it can take in parameters (input data) and output data. A function in Python looks like this:\nLet’s analyze this piece of code. The def tells the computer that you are writing a function. We give it a name, in this case, my_function. Then, we put a colon (the : symbol) to indicate that the function is starting. The next two lines are two spaces away from the left side of the text editor \u0026ndash; this tells the computer that these lines are part of the function definition. This is very important, so don\u0026rsquo;t miss out on this detail!\nPress run.\nYou will notice that nothing happens. This is only a function definition - we need to “call” the function to run the code within the function. In other words, the computer understands the instructions, but you need you tell the computer to do the given instructions. You can call my_function() anywhere, as long as it is after the function is defined. Place my_function() below the function definition, with no spaces in front. Your code should look like this:\nDon\u0026rsquo;t forget to remove the two spaces before calling my_function(). You might run into unexpected behavior otherwise!\n You might be familiar with the math definition of a function; for example, the function 𝒇(𝒙) = 3𝒙. It takes an input value, 𝒙, and transforms the value by multiplying it by 3. Similarly, in python, you can also give input values (called parameters) to a function and return (or produce) an output value. An example of a Python function which triples a given number is given below:\nNumber is the name of the parameter (input) that we are giving to the function triple. The word int tells the computer that the parameter number is an integer. The return word is only used within functions, and allows the function to output a value. In this case the triple function returns (outputs) number * 3, which then can be stored in a variable and printed. If the function variable. Check that the code above prints out the number 6.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/colors_and_pixels/","title":"Python: Colors and Pixels","tags":[],"description":"","content":"In this section, we will begin to learn about the basics of colors and pixels. We also will start to create and change pixels in images.\nPython Colors  Import an image module \n   Open an image \n   Basics of colors \n   Pixels on an Image \n   Access pixels on image \n   "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-types/strings/","title":"Strings","tags":[],"description":"","content":"Anything that is surrounded by quotation marks is called a string. This is how a computer represents words or sentences. For example, \u0026ldquo;a\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026ldquo;banana!\u0026quot;, and \u0026ldquo;Hello World\u0026rdquo; are strings, but 2 and Hello World are not strings, because the quotation marks are missing. You can combine many strings together using the + sign!\nThe strings that you combine do not have to be real words! For example, \u0026quot;Ap\u0026quot; + \u0026quot;ple\u0026quot; will produce the string \u0026quot;Apple\u0026quot;. Ask for help if you are confused!\n For example,\n  \u0026quot;Apple\u0026quot; + \u0026quot;Pineapple\u0026quot; produces the string \u0026quot;ApplePineapple\u0026quot;\n  \u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; produces \u0026quot;Nuevo Foundation\u0026quot;\n  Challenge 1 What if you combine your first and last name? How would you do that?\nChallenge 2 Delete all the print statements in your code. Start your code with the line print(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;)\nIf you run it, you should get the following output:\nNuevo Foundation  Let’s try and find two more ways to print the string \u0026quot;Nuevo Foundation\u0026quot; using two plus (+) symbols in each print statement. Once you make this work, you should have \u0026ldquo;Nuevo Foundation\u0026rdquo; printed out 3 times. In other words, your console should look like this after you press run:\nNuevo Foundation Nuevo Foundation Nuevo Foundation  "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/using-repl-it/","title":"Using Repl.It","tags":[],"description":"","content":"To build our game, we will use the Pygame library, which provides a set of readymade functionality that we can use to build Pong and its animations.\nUsing Repl.it Today, you will be using Repl.it to build the Pong game.\nIf you would like a re-cap on how to use Repl.it, check out the following Python basics tutorial Next, let\u0026rsquo;s explain further some of the code that has been provided to you in the main.py file.\nLibraries and import statements Look at the top of the code. You will see the following line:\nimport pygame This statement allows us to import all of the animation and object drawing functionality provided by the pygame library. A library is a place where related functionality is grouped together for use in the Python language. For example, the pygame library provides a way to draw a rectangle on screen, which we can use to draw the boundaries, the ball, and the paddles used in Pong game.\nComments The gray line that starts with # is called a comment. These are notes in the code that helps to explain what is happening in plain English. Comments are ignored by the computer; developers use comments to communicate with eact another especially when several developers are working on the same code. Comments also allow someone who is looking at the code to understand what is happening without having to read the code directly. In main.py we use comments to indicate where we need you to make changes to the code.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/using-repl-it/","title":"Using Repl.It","tags":[],"description":"","content":"\nTo help Alex live in a beehive, he needs to learn how to create a honeycomb! We will use Python\u0026rsquo;s turtle library to draw a honeycomb for Alex.\nUsing Repl.it Today you will be using Repl.it to learn how to code in Python. Here is an example interactive window that you will use today:\n Before we start, let\u0026rsquo;s first understand how the window works. The main.py file contains code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the bottom white screen, under the result tab. Today, our results will be an animation of a drawing being created.\nNext, let\u0026rsquo;s explain further some of the code that has been provided to you in the main.py file.\nLibraries and import statements Look at the top of the code. You will see the following line:\nimport turtle This statement allows us to import all of the drawing functionality provided by the turtle library. A library is a place where related functionality are grouped together for use in the Python language. For example, the turtle library introduces a helpful artistic turtle in the result window, which we can control using our code to draw images.\nComments The gray line that starts with # is called a comment. These are notes in the code that helps to explain what is happening in plain English. As they are ignored by the computer, they are often used so that when other developers work on the same code, they will have an easier time reading and understanding what is going on.\n"},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/using-repl-it/","title":"Using Repl.It","tags":[],"description":"","content":"In order to help the Kin and Queen, we will develop a program, in a programming language called C++. With that program we will be able to input a message, and the program will modify it to make it secret.\nUsing Repl.it To be able to run our C++ programs we will use a tool called Repl.it that will allow us to build and run C++ code in an interactive window like the one below. We will use that tool throughout the entire tutorial.\n Before getting any further let\u0026rsquo;s understand how these windows works. The file main.cpp contains the code, or instructions that the computer will understand and run. Clicking on Run button will command the computer to execute the instructions in that file. The results can be seen in the console tab, in the lower area of Repl.it.\nNext, let\u0026rsquo;s explain the code that we have in main.cpp.\nLibraries and \u0026ldquo;#include\u0026rdquo; Go to the beginning of main.cpp. You will find there the following line:\n#include \u0026lt;iostream\u0026gt; This directive or instruction refers to the iostream library. A library is a common place where a set of C++ functions, typically related to a particular common problem or topic, are grouped together. There are libraries to draw, to create and manage internet connections, to perform mathematical operations and for several many other purposes. iostream is a very basic library that allows us to receive or print out messages to and from the console.\nComments The grayed out line(s) in main.cpp starts with //. These are known as comments. Comments are useful in our C++ programs as a way to document them better, and explain in more detail what the goal of the instructions is. Comments are not instructions and are actually ignored by the computer.\nNamespace std using namespace std; This specific line allows us to access a few already reserved C++ words. A reserved word is a word that has a specific meaning in a given programming language; due to that, it cannot be reused for any other purpose. Here, we are referencing the reserved word std to use the code from the already well-designed and developed C++ standard. using namespace std means we want to make reference to the standard namespace.\nMain Function int main(){ return 0;  } main is a mandatory function in any C++ program. It is the entry point of our program. Within the open and closing braces { \u0026hellip; } we will place all the instructions that we wish the computer to execute. After clicking Run the computer will execute those instructions. return 0; indicates the program has finished successfully its execution. If instructions were placed after that line, the computer would not execute them.\n All the C++ instructions must end with a semicolon ; "},{"uri":"https://nuevofoundation.github.io/workshops/microbit-distance-checker/what-is-microbit/","title":"What is a micro:bit?","tags":[],"description":"","content":"What is a micro:bit? A micro:bit is a programmable mini computer! It can be coded from any web browser in various languages like javaScript, Python, Scratch, and Blocks. For our session today, we will be using MakeCode Blocks.\nYour micro:bit has the following physical features:\n 25 individually-programmable LEDs 2 programmable buttons Physical connection pins Motion sensors (accelerometer and compass) Wireless communication via bluetooth radio USB interface  If you want to learn more about each individual component and all the features that come with your micro:bit, you can click here .\nGo ahead and take out the the micro:bit and the rest of the components from the bag. You should have one micro:bit, 2 batteries, a micro USB cable, and the battery holder (the black box with the red and black wires coming out of it). If you\u0026rsquo;re missing anything or need help feel free to ask one of the instructors!\nUsing the Simulator While not as fun as having the actual, physical hardware, you can also use the simulator to see your code working. Look for the images of micro:bits off on the left side of your screen. If you don\u0026rsquo;t see them, look for the \u0026ldquo;\u0026gt;\u0026rdquo; symbol on the left and click it to unhide the simulator. On the simulated micro:bits, find the Bluetooth radio antenna. It looks like a yellow square wave:\nIf you hover your mouse cursor over this wave-shaped antenna, the actual signal strength will show up next to it. You can then click on the antenna and drag your mouse cursor left to decrease the signal strength or right to increase it. If you get the signal strong enough (strength \u0026gt; -67), the other micro:bit will update to show a frowning face. Weaken the signal again to make the micro:bit smile.\nNow, let\u0026rsquo;s get coding\u0026hellip;\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/conditional-statements-loops/conditional-statements/","title":"Conditional statements","tags":[],"description":"","content":"Now that we know the basics of print statements, variables, and reading in input from the user – we can combine all these awesome skills with conditional statements. Conditional statements allow the computer to make decisions based off the value of an expression. In the real world, we use conditional statements all the time to make decisions! For example, if it is raining outside, then I use an umbrella. In this example, the I evaluated the weather outside and because it was raining, I made the sequential decision to use an umbrella.\nWhat conditional statements can you think of that you use in everyday life?\nIf statements We’ll start off with an if statement in its simplest form!\nShown above we have three different parts:\n If – this tells the computer that we are going to deciding based off the expression inside the parenthesis Expr – this represents the expression that we are evaluating. If the expression is \u0026ldquo;truthful\u0026rdquo; then the computer will enter the if statement and execute the statement. Statement – what the computer will complete if the expression is \u0026ldquo;truthful\u0026rdquo;  Let’s break down the example above and decide why some statements are \u0026ldquo;truthful\u0026rdquo; or \u0026ldquo;falsy\u0026rdquo;.\nWe are given to variables x and y are they are assigned two values. In the first if statement we are testing if the value of x is less than the value of y. Since 0 is less than 5, this is true! So, the first if- statement will print yes.\nHowever, we can see that y is not less than x, so it evaluates to false. The inside of the if statement will not be executed then. The same applies for the if statement evaluating if x is equal to 10. We see that x is equal to 0, so this expression is false, and the inside of the if statement won’t be executed.\nElse statements Now that we know how to use if statements to conditionally execute a single statement or multiple statements, let’s see what else we can do!\nSometimes, you need to evaluate a condition in order to act accordingly if it is true, but if it false we act differently. Here is the simplest form of the else statement.\nThis is really like the if statement! However here, if the if statement is false (not truthful), the program will automatically execute the statement2 in the else statement.\nA real-life example is if I’m hungry, I’ll eat. Else (in other words, I’m not hungry), I won’t eat. Let’s take a look in python code!\nChallenge Let’s put it all together! Let’s see if we can create a program that takes prompts the user for their name. The user can write their name into the console. Then the computer can decide if their name is equal to your name, print out a response. Else, print out a different response!\n Hint: Try talking out the different paths to a computer can take! Make sure to identify what the if and else conditions are.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/meet-dj-nuevo/","title":"Meet DJ Nuevo","tags":[],"description":"Set up headphones, check audio","content":"\nNuevo has new headphones! Can you find yours? You got contacted to make Nuvi\u0026rsquo;s next hit mixtape, but when you get to the studio, Nuvi says their next project is going to be produced all in code. This is something that hasn\u0026rsquo;t been done before, are you up to the challenge? Look around yourself to find your headphones and get ready to join him!\nBefore we start, make sure that your headphones are working. Try playing the following audio. What do you hear?!\n Test audio to see if your browser supports the audio element. If you cannot play the audio, it likely means your browser does not support this. audio element.   "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/starting-up/","title":"Starting Up","tags":[],"description":"","content":"Starting Up The goal of today\u0026rsquo;s activity is to learn C# skills and incorporate your new-found knowledge to create a Guess The Word game! Let\u0026rsquo;s get the game set up.\nOpen your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer), and go to https://aka.ms/nuevoguesstheword. Your screen should look like this:\nWe will ignore some of the details on this screen, but we will go over some of the basics that show up. The main.cs file contains code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the right side, called the console.\nIf you press run now, you will see that nothing happens! Your job is to help Nuvi complete the code for this game!\nClick the fork button to create a copy of the code for yourself to work on. Any activities under the Activity sections will be done in this browser tab. You will do these activities on your own, but help is available when you are stuck.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/repl-it/","title":"Starting up with Repl.it","tags":[],"description":"","content":"Open your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer) and go to https://repl.it. Scroll to the bottom of the page, look for languages, search for Python and click it.\nYou should see something like the following screen:\nWe will ignore some of the details on this screen, but we will go over some of the basics that show up. The main.py file contains code, or instructions for the computer to run. Anything that results from running the code will be displayed on the right side. This window is called the console.\nHit run and watch your console run your code on the screen to the right! In the example below, print tells the computer to print the sentence within the parentheses () into the console, or the screen on the right. Learn more about print in the next lessons. Note: The RUN button looks like this: "},{"uri":"https://nuevofoundation.github.io/workshops/adventure/time-to-create/","title":"Time to Create","tags":[],"description":"","content":"It’s time to start creating our own stories with all the skills we’ve learned today! The question that we are tackling today is how to get the audience involved with the story line, and the answer to this is CODE!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arrays/introduction/","title":"What is an Array?","tags":[],"description":"","content":"--  Arrays are a data structure where each of its elements are arranged in a numerical sequence and each item is referenced by its position number. In Java, each of these elements are of one type (String, int, double, etc.) and are zero indexed, which means that the first element in an array starts at 0, the second element with 1, and so on.\nHere are some important vocabulary that you will need to know before we talk more about arrays.\n The number of items in an array is called the length of the array. The type of the individual items in an array is called the base type of the array. The position number of an item in an array is called the index of that item.  For our purposes, we want to create an array that can hold all of the various restaurants in our app. Let’s say our program will need to process the names of one thousand different restaurants. We’ll need a way to be able to sort through and deal with all the data. Without an array data structure, we would have to solve the issue by creating a thousand different variables for each restaurant and if we wanted to do something as simple as say, print out the names of each restaurant, we would have to put 1000 print statements. To accomplish this feat would be a great challenge.\nOn the contrary, arrays have the capability to allow us to do the same actions, but in one single step. The array is simply a single variable, but it contains all 1000 restaurants inside of it.\nThe length of the array would be 1000, since there are 1000 individual names. The base type of the array would be String since the items in the array are strings. The first name would be at index 0 in the array, the second name at index 1, and so on, up to the thousandth name at index 999.\n"},{"uri":"https://nuevofoundation.github.io/workshops/security-phishing/bob-goes-fishing/","title":"Bob goes fishing","tags":[],"description":"","content":"Meet our friend Bob. Bob is a nice and jolly gentleman. His hobbies are travelling and fishing. One fine evening Bob received an email saying he won a free trip to the \u0026ldquo;Bahamas\u0026rdquo;. Bob got excited. He immediately clicked the link to enter his personal details and waited for his itinerary to come.\nBob decided to go shopping for his trip. He bought new clothes and a new fishing rod.\nHowever, 24 hours later, he still didn\u0026rsquo;t receive a confirmation for his trip. Another day passed and still nothing. The next day, he decided to go meet his good friend Alice. Bob told Alice all about the email, the trip to Bahamas, his new clothes and how he cannot wait to go fishing. Alice, being a secret agent was suspicious, and asked Bob to show her the email.\nOn reading the email Alice sighed, \u0026ldquo;Bob you have been phished!\u0026rdquo;\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-guess-number/generate-random-number/","title":"Generate a random number","tags":[],"description":"","content":"Python includes a library called random that helps you generate random numbers. You can use this in your program by writing import random at the top of your program and using the randint function to generate a number between a range.\nThis would generate a random number between 1 and 10\nrandom.randint(1,10) Try running the below code a few times to see what you get!\nYou can also play around by changing the range of random numbers. It\u0026rsquo;s fun, give it a try!\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-structures/lists/","title":"Lists","tags":[],"description":"","content":"Lists are the ordered collection of items and can be written as comma separated values inside square bracket []. You can access the element of a list by using indexes inside square bracket. The index starts from 0 and goes up to the (number of elements in the list - 1) and the first element is at index 0. So, a list having 6 elements will have indices from 0 to 5.\n#Creating a list of 5 fruits fruits = [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] #Print element at index 2 print(fruits[2]) ##it prints banana Lists can have duplicate elements.\n #lists can also have different datatypes my_list = [\u0026#39;candy\u0026#39;, 10, 2.5] Length of the list You can get the length of the list by using len(list) function and the list name is passed as the parameter.\nlength = len(fruits) ##Now length = 5 Append an element in the list Appending an element can be done by the list.append(x) function where x is the element that you want to append. It adds the element at the end of the list.\n#Before the list is [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] fruits.append(\u0026#39;lemon\u0026#39;) #Now the list is [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] Insert an element at a specific index You can insert an element at specific index by of a list by list.insert(i, x) function. Here i is the index where you want to insert and x is the element that you want insert.\nfruits.insert(1, \u0026#39;guava\u0026#39;) #Now the list is [\u0026#39;orange\u0026#39;, \u0026#39;guava\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] Remove an element from the list list.remove(x) function searches for the first instance of the given element x and removes it from the list.\nfruits.remove(\u0026#39;apple\u0026#39;) #Now the list is [\u0026#39;orange\u0026#39;, \u0026#39;guava\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] list.remove(x) throws a value error if the element x is not present in the list.\n Remove an element at specific position list.pop(i) function removes the element at the index i.\nfruits.pop(0) #Now the list is [\u0026#39;guava\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] If you don\u0026rsquo;t specify the index,list.pop() then it removes the last element from the list.\n Reverse the elements of the list list.reverse() function reverse the elements of the list.\nfruits.reverse() #Now the list is [\u0026#39;lemon\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;guava\u0026#39;] Get the minimum and maximum element of the list min(list) function returns the minimum element of the list and the maximum element can be found by using the max(list) function.\nmy_list = [4, 1, 2, 5, 3] ## Defining a new list of Integers print(min(my_list)) ## prints 1, the minimum element of my_list print(max(my_list)) ## prints 5, the maximum element of my_list Try it yourself  "},{"uri":"https://nuevofoundation.github.io/workshops/security/meeting-alice-bob-eve/","title":"Meeting Alice, Bob and Eve","tags":[],"description":"","content":"Meet our friend Bob. Bob has a secret that he doesn’t want to share, he would like to keep it secured. He has the secret locked somewhere safe. Only Bob has the key to the lock to make sure that no one can get to his secret but him.\nMeet our not so good friend Eve. Eve wants access to Bob’s secret.\nEve realizes that to get to Bob\u0026lsquo;s secret, they need to first get past Bob\u0026lsquo;s lock. Eve can\u0026rsquo;t break the lock, but maybe she can figure out the key. After spying on Bob for a while, Eve realizes that he really loves his pet dog, Max. This gives Eve an idea.\nEve thinks that, since Bob loves his pet so much, he might have decided to make that the key to his lock. They decide to give it a try, and violà, Eve was able to open Bob\u0026lsquo;s lock and see his secret.\nThis is not good for Bob! He wants to know what he could have done differently so that Eve couldn\u0026rsquo;t break his lock so easily, but he doesn\u0026rsquo;t know where to start.\nLuckily for Bob, his good friend Secret Agent Alice arrives to help him out with his situation. Let\u0026rsquo;s see what Alice has to say\u0026hellip;\n"},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/the-components/","title":"The Components","tags":[],"description":"","content":"The components we will use for the project are listed below. Make sure you have all of these before starting:\n One Adafruit Micro USB to USB cord 2 alligator clip wires, any colors Two oranges  "},{"uri":"https://nuevofoundation.github.io/workshops/java-tictactoe/activity-1/","title":"1. Set Up the Board!","tags":[],"description":"Using print statements prompt the game rules and board","content":"In this activity, we will have a program that prints out the game board and gaming prompt, like the output below:\n\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' 1 | 2 | 3 ---+---+--- 4 | 5 | 6 ---+---+--- 7 | 8 | 9 Enter your move (1-9): 2 O | X | ---+---+--- | | ---+---+--- | | Enter your move (1-9): The Main Class and Main Method Notice that in the starter code, we have the class Main and the main() method. main() method is where the program starts whenever we click the Run button.\npublic class Main { public static void main(String[] args) { } } Print Statements In main(), write print statement(s) to print the welcome statement and rules for the game!\n\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' Variables and Arrays In this game, note that we will have to track the symbol currently in each of the 9 positions on the board.\nHence, we will need to store 9 pieces of data in the program. Let\u0026rsquo;s use an array (a data structure) of size 9 to store these.\nAs stated in the rules, on the game board, \u0026quot;X\u0026quot; is the player\u0026rsquo;s move, \u0026quot;O\u0026quot; is a computer move, and \u0026quot; \u0026quot; is an available spot.\nTo do this, let\u0026rsquo;s declare an array variable called board with the value \u0026quot; \u0026quot; String in all 9 positions (i.e {\u0026quot; \u0026quot;, \u0026quot; \u0026quot;, \u0026quot; \u0026quot;, \u0026quot; \u0026quot;, \u0026quot; \u0026quot;, \u0026quot; \u0026quot;, \u0026quot; \u0026quot;, \u0026quot; \u0026quot;, \u0026quot; \u0026quot;}).\nDisplaying the board Now we have the variable board storing current symbols on the game board, let\u0026rsquo;s try to print out an empty game board using print statements (shown below).\nNote that each game board consists of 5 lines, so it is reasonable to have 5 print statment to print out each board.\nEach of the 9 blocks is a String of length 3, where the middle character is the current symbol stored in board at the corresponding position.\nYou should have a program that has the output below after completing this step.\n\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' | | ---+---+--- | | ---+---+--- | | Methods As we know we will need to print out the current game board several times throughout the game, so it will be a good idea to move the block of code you write in step 4 to a method.\nThis method should take an input of String[] and prints out the current board. Note that this method should be written outside of main().\nLet\u0026rsquo;s write a method with the following header:\npublic static void printBoard(String[] curBoard); Calling Methods In main(), call the printBoard(), so it prints the initial board with labelled position. You can do this by creating another String array with the content \u0026quot;1\u0026quot;, \u0026quot;2\u0026quot;, ..., \u0026quot;9\u0026quot;.\nHave a line of code that prints Enter your move (1-9): \n\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' 1 | 2 | 3 ---+---+--- 4 | 5 | 6 ---+---+--- 7 | 8 | 9 Enter your move (1-9): Run the Program Run your program, if it outputs the text above, you are ready to continue 👍!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/activity-1/","title":"Print Statements and Comments","tags":[],"description":"Introduce println() methods and comments in Java.","content":"\nLet the Program Speak! Let’s try to write a program that says Hello World out by typing the line of code System.out.print(\u0026quot;Hello World\u0026quot;);\nThe program prints out whatever you typed in the parenthesis of System.out.print. And, each line of code ends with ;.\nAfter, add more statements to print numbers by putting numbers in the parenthesis (i.e. System.out.print(2020)) or a symbol by putting one symbol between 2 single quotes ' (i.e. System.out.print('@')).\n Did you notice that all the statements you typed printed in one line? Sometimes we want to enter a new line when typing. To do that, we type a slightly different code System.out.println();\n(Note: we type println instead of print to create a new line after)\nGo back up and give it a try. Make all the statements print on different lines!\n How to print multiple symbols in one line of code? We learned that to print symbols we put them around 2 single quotes ', but how do we print multiple symbols in one line?\nWe can simple put them between 2 double quotes \u0026quot; (i.e. System.out.print(\u0026quot;@ , - h A #\u0026quot;);)\n !! Important !! Sometimes you can\u0026rsquo;t just put characters in between \u0026quot; \u0026quot; When putting characters in between \u0026quot; \u0026quot; in a print statement, sometimes it\u0026rsquo;s easy to confuse the computer on what characters to print.\nFor example, how do we tell computer to print \u0026quot;?\nIf you type System.out.print(\u0026quot;\u0026quot;\u0026quot;);, you will get an error! because the computer can\u0026rsquo;t identify where the text ends!\nInstead, certain characters need to be escaped by adding a \\ in front of it.\n System.out.print(\u0026quot;\\\u0026quot;\u0026quot;); // this prints out \u0026quot;  Other characters that needs to be escaped in Java includes: ', \u0026quot;, \\.\n Print an Owl Let\u0026rsquo;s meet 🐥 Patrick\u0026rsquo;s first friend, the owl Minerva 🦉!\nUse what you just learn and recreate this owl below using just 4 lines of code! (Art credit: asciiart.eu/animals/birds-land)\n , ___ / ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ \\ `\\/{o,o} \u0026lt; Hi, I am Minerva. Patrick's friend! | / /) ) \\ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ / /,--\u0026quot;-\u0026quot;-   I got an error!  Main.java:4: error: reached end of file while parsing  If you get an error like this such as, it is posible that you forgot to escape chararcters such as \u0026quot; and \\.\nRevisit the third tip above to see how to escape characters in a print statement!\n Make a Comment When creating a Java program, we can jot down some notes by adding one line comment using // or multi-line comment using /* and */ (Note: The instructions in the previous activities were written as comments).\nAlso, adding comments will not affect the program whatsoever. So, you can add any notes with comments throughout your code!\n // sample one line comment /* sample * multi-line * comment */ "},{"uri":"https://nuevofoundation.github.io/workshops/unity/understanding-unity-interface/","title":"Understanding the Unity Interface","tags":[],"description":"","content":"Before you start working on our game, take some time to look at Unity\u0026rsquo;s interface and familiarize yourself with the windows. You can move these windows around to customize your workspace layout. If you get stuck in a weird layout, you can always go back to the default layout by doing: Windows -\u0026gt; Layouts -\u0026gt; Default.\nGame This window shows what the camera is seeing - in other words, it\u0026rsquo;s what you\u0026rsquo;re going to see displayed when you run and play the game. Right now you only see a blue screen, but that\u0026rsquo;s just what Unity defaults to showing in 2D. Don\u0026rsquo;t worry, you\u0026rsquo;ll give your game a fancy background later.\nScene This window displays everything in the current scene, including some invisible things you might need. You can scroll in and out to zoom, and you can right click to move around in the scene. Be careful not to mistake it with the Game window!\nHierarchy This window shows every object in the current scene as a list.\nInspector This window will show all the details about an object selected from either the Hierarchy or the Scene window. Right now, you don\u0026rsquo;t see anything in here because there aren\u0026rsquo;t any objects in the game yet.\nProject This window shows EVERYTHING you have to make the game, including things you haven\u0026rsquo;t used yet.\nConsole This window will show output from the game. You can ignore it for now, but it\u0026rsquo;ll be important once you start fixing errors in your game.\nOne last important thing\u0026hellip; find the Play button at the very top of the Unity interface. It should look like this: This is what you\u0026rsquo;re going to use to play, or \u0026ldquo;run\u0026rdquo;, your game as you make it. Note that any changes you make to your game while you run will NOT be saved. If you find that you need to make any changes, click on the Play button again to stop playing your game.\nThat\u0026rsquo;s all you need to know for now! It may look scary, but you\u0026rsquo;ll start to get a better understanding once you start working on your game. The most important thing is that you go in and start working!\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/android-setup/","title":"Android Setup","tags":[],"description":"","content":"Follow the steps below to get Android Studio installed on your computer. If you already have Android Studio installed, open it up and skip to the next step!\nThese steps have examples for installing on Windows computers. However, the steps are similar for other types of computers as well.\nDownload and Install Android Studio  Download Android Studio for your operating system. Follow these steps to install Android Studio.  Set the JAVA_HOME environment variable Android Studio comes with a version of Java needed for certain parts of the application to run. Follow the steps below to set the JAVA_HOME environment variable on your computer, which tells these tools where to find Java:\n In the search box on the bottom left of the screen, type in env. Select the \u0026ldquo;Best Match\u0026rdquo; program Edit the system environment variables.  Click Environment Variables.... New... in the \u0026lsquo;User variables\u0026rsquo; section. Type JAVA_HOME as the variable name. Copy the following into variable value:  C:\\Program Files\\Android\\Android Studio\\jre Click OK.   We strongly recommend that you restart your computer now for Android Studio to open correctly.\n Start Android Studio Once installed, open Android Studio to work on the app.\nThere are multiple ways to start the Android Studio application on your Windows computer. Here are two methods:\nMethod 1  Click the Windows icon in the lower left hand corner of your computer. Scroll through the list until you see the Android Studio folder. Click the Android Studio folder to expand it. Click the Android Studio application in the folder to start Android Studio.  Method 2  In the search box on the bottom left of the screen, type in Android Studio. In the results window, if \u0026ldquo;Best Match\u0026rdquo; highlights Android Studio, either click the Android Studio application or press ENTER on your keyboard. \n Open Project Files  Click on Open an Existing Project on the start screen of Android Studio. Look for the location where you downloaded the project files. Select the \u0026lsquo;TicTacToe\u0026rsquo; folder inside of the \u0026lsquo;TicTacToe\u0026rsquo; folder that you unzipped earlier.  The \u0026lsquo;TicTacToe\u0026rsquo; folder to select should have a green Android icon next to it, indicating it is an Android project folder.     Run Android Studio and open the project. Your view will look similar to this: Accept Licenses Before you can run the code, you\u0026rsquo;ll need to accept the Android licenses by following the steps below:\n Click the Terminal button at the bottom of the Android Studio window. Type the command below, replacing \u0026lsquo;\u0026lt;USER_NAME\u0026gt;\u0026rsquo; with your computer\u0026rsquo;s user name.  C:\\Users\\\u0026lt;USER_NAME\u0026gt;\\AppData\\Local\\Android\\Sdk\\tools\\bin\\sdkmanager --licenses Type y and press ENTER at the prompts, to accept the licenses. This will be needed multiple times.   "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/puzzle1/","title":"Puzzle 1","tags":[],"description":"","content":"Run the Game Press the play button button (►) at the top of Android Studio to start the game. You\u0026rsquo;ll see that the title at the top of the app says Toe-Tac-Tic (that doesn\u0026rsquo;t seem right!); let\u0026rsquo;s change it to Tic-Tac-Toe.\nSolve the Puzzle Double-click the strings.xml file under app → res → values: How can you modify this file to say Tic-Tac-Toe? "},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/vm-import-setup/","title":"Using Virtual Machines Part 2","tags":[],"description":"Continuing the introductory guide to using virtual machines","content":" Good work on getting the host environment ready! Now let\u0026rsquo;s load the image of the hacked computer as a vm.\nWhat is an image? Images come in a variety of types. We have photographs, which are images. The images in computers are very similar. Both are copies of things from a single point in time.\nImages come in a variety of types. We have photographs, which are images. The images in computers are similar. Both are copies from a single point in time. This means what we will be working with is a copy of the computer that has been acting weird. Don\u0026rsquo;t worry though, this won\u0026rsquo;t hurt your computer!\nSetting up Kali Linux Downloading the image Image files make it easy to send exact copies of computers.\nVirtualBox uses the .ova for their machine images.\nLet\u0026rsquo;s download our copy of the computer! Click the link below to download.\nMost images are big (~8GB), but ours is only ~3GB. The download still might take a few minutes.\nDownload link  Importing the Virtual Machine Now that you have the machine image downloaded, let\u0026rsquo;s set it up!\nStep 1 In the VirtualBox application, we are able to import our images. Let\u0026rsquo;s click on the \u0026ldquo;Import\u0026rsquo; button to get started!\nStep 2 The appliance we want to import will be the .ova file you downloaded earlier. Go ahead and click on the little folder with a green caret symbol. This will open up a window so you can find and select the .ova file.\nStep 3 Now that you selected the .ova image file. Click \u0026ldquo;Open\u0026rdquo;. Then click \u0026ldquo;Next\u0026rdquo; on the \u0026ldquo;Appliance to Import\u0026rdquo; screen.\nStep 4 The last step! In the \u0026ldquo;Name\u0026rdquo; field, feel free to give it a new name. It\u0026rsquo;s your own VM! Make sure that the \u0026ldquo;USB Controller\u0026rdquo; option is not selected. Likely you will need to uncheck it. Then for the MAC Address Policy, it is a good idea to make sure that says, \u0026ldquo;Generate new MAC addresses for all network adapters\u0026rdquo;. Finally click \u0026ldquo;Import\u0026rdquo;!\nNote: this will have a pop-up with the time needed to complete the import.\nTypically this is about 5 minutes, but might be a little longer depending on your computer.\nNow we can launch the virtual machine!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/activity-1/","title":"Activity 1 - Importing the TensorFlow library and datasets","tags":[],"description":"","content":" The first thing we have to do is to import the TensorFlow library in order to use functions that will allow us to train your model.\nWe will also be implementing plots to visualize the prediction of our model, so for that we need to import the following libraries:\n# Importing TensorFlow and tf.keras libraries import tensorflow as tf from tensorflow import keras # Helper libraries for statistics and plotting import numpy as np import matplotlib.pyplot as plt These libraries are essential as they are a collection of precompiled methods and functions that and importing them into our program allows us to access these methods without having to rewrite these entire libraries. For example, we import the methods and functions to TensorFlow and NumPy to avoid having to write the entirety of these program within our own program.\nNow, we want to load the Fashion MNIST dataset, which has the collection of all the images of clothing we need for your model.\n#This variable is declared from the fashion_mist library of the datasets section fashion_mnist = keras.datasets.fashion_mnist #This loads four variables from the dataset.  #The train_images and train_labels are data that the model uses to learn #The test_images and test_labels are used by the model to compare against. (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data() \nThe next step is to create a list of categories under the variable class_names.\nYour supervisor gives you the categories of apparel that the warehouse processes. This will be created under the variable class_names.\nNot sure how to create a list in Python?\nQuestion 1 Write the following class names in the list class_names:\n T-shirt/top Trouser Pullover Dress Coat Sandal Shirt Sneaker Bag Ankle boot   Optional Reading If you are interested in learning about these libraries in more detail, feel free to visit the following websites.\nLearn about TensorFlow\nLearn about NumPy\nLearn about Matplotlib\n "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/game-structure/","title":"The Game&#39;s File Structure","tags":[],"description":"","content":"As you can see, we\u0026rsquo;ve already created many files for you. The structure of the game has already been laid out, and you will be filling each file with content. So, in order to begin, we must first have at least a basic understanding of what each file does and how they relate to each other.\nFirstly, phaser.min.js is simply a JavaScript file that contains code that allows the game to run Phaser, the framework we are using to make the game. You don\u0026rsquo;t have to worry about this file very much, and you won\u0026rsquo;t be editing it.\nNext, look at index.html. This is an html file that makes up the backbone of our entire project by importing all of the JavaScript files that are used.\nNext is Game.js. This is the file that essentially represents our game. Within it, the actual game code branches out through Scene1.js and Scene2.js. These scene files are where you\u0026rsquo;re going to write the majority of your code, and we will go into further details on Phaser scenes a bit later.\nPlayerBullet.js, EnemyBullet.js, and Explosion.js are files that create specific objects for our game.\nFinally, the assets folder contains all of the images that our game uses.\n"},{"uri":"https://nuevofoundation.github.io/workshops/guidelines/getting-started/","title":"Getting Started","tags":[],"description":"","content":"Prerequisites  Visual Studio Code  Hugo  Git . Learn more about Git and GitHub in their Quickstart guide.  Reference Links  Github repo  Workshops website   Walkthrough Videos  Workshops Github repository development cycle  Workshops Github repository structure   Code Contribution to this repository is via the fork model . Contributors push changes to their own \u0026ldquo;forked\u0026rdquo; version of workshops, and then submit a pull request into it requesting those changes be merged.\nTo get started:\n Fork the repo by clicking Fork in the top right corner:  From git bash, run (replacing [user-name] with your GitHub user name):  \\\u0026gt; git clone https://github.com/[user-name]/workshops.git \\\u0026gt; cd workshops \\workshops\u0026gt; git remote add upstream https://github.com/NuevoFoundation/workshops.git \\workshops\u0026gt; git remote set-url --push upstream no_push The last command prevents an accidental push to this repository without going through a pull request.\nAfter running above, git remote -v should show something similar to the following:\n\\workshops\u0026gt; git remote -v origin https://github.com/dmonroym/workshops.git (fetch) origin https://github.com/dmonroym/workshops.git (push) upstream https://github.com/NuevoFoundation/workshops.git (fetch) upstream no_push (push) Build and Test In order to build and test your changes you\u0026rsquo;ll want to use hugo. If you\u0026rsquo;ve followed the right installation instructions then hugo should be in your PATH (if not give your machine a restart).\n\\\u0026gt; cd workshops \\workshops\u0026gt; hugo -D server This will output some build information but the most important line is going to be along the lines of: Web Server is available at //localhost:1313/ (bind address 127.0.0.1)\nYou can now launch your favorite web browser and open up //localhost:1313/ and should see the site up.\nUpdating your fork In order to keep yourself up to date you\u0026rsquo;ll want to maintain your fork updated as much as possible. Before creating a new branch you should fetch the changes and push them to your fork. Here\u0026rsquo;s how to do it (if you need another branch just use that instead of master).\n\\workshops\u0026gt; git fetch --all --prune \\workshops\u0026gt; git checkout master \\workshops\u0026gt; git merge upstream/master \\workshops\u0026gt; git push origin master Sample Walkthrough Scenario: Let\u0026rsquo;s make a simple change to the Getting Started page and submit a pull request.\nFollow instructions above Once you\u0026rsquo;ve followed the Code instructions above you\u0026rsquo;ll have a local copy of the workshops repo.\nCreate a topic branch Make sure your fork is updated before doing this:\n\\workshops\u0026gt; git checkout master \\workshops\u0026gt; git checkout -b [branch-name] \\workshops\u0026gt; git push --set-upstream origin [branch-name] Open the repo using VS Code When you launch VS Code you can Open Folder\u0026hellip; Navigate to the workshop folder and select open.\nNavigate to file and modify it Depending on what you\u0026rsquo;re modifying you\u0026rsquo;ll want to get a better understanding of how the site is built In our case you want to modify this file so go to content\\english\\guidelines\\getting-started.md I simply want you to add two exclamation points to the word \u0026ldquo;Welcome!\u0026rdquo;\nBefore: Welcome!\nAfter: Welcome!!!\nCommit the change Running git status should provide you with all the changes you\u0026rsquo;ve made and all the file names. You\u0026rsquo;ll want to stage them by using git add and then commit and push them. Here\u0026rsquo;s the commands to do that.\n\\workshops\u0026gt; git status \\workshops\u0026gt; git add content/english/guidelines/getting-started.md \\workshops\u0026gt; git commit -m \u0026quot;Added exclamations\u0026quot; \\workshops\u0026gt; git push Some git tips: If you want to add everything and commit at the same time you can skip all these commands and just use git commit -am \u0026quot;message here\u0026quot;  and then do the git push\nCreate a pull request Congratulations, you\u0026rsquo;ve now made all the necessary changes and the last step is to get it reviewed and pushed into production.\nIf you navigate to your fork on github.com you will most likely see a suggestion to create a Pull Request based on your latest push.\nIf you don\u0026rsquo;t, just navigate to Pull Requests -\u0026gt; New pull request\nThe most important aspect here is to make sure you\u0026rsquo;re choosing your branches correctly (your base and your head).\nYou can now hit the Create pull request button, give it a description and good title and wait for a reviewer to approve so it can be merged.\n"},{"uri":"https://nuevofoundation.github.io/workshops/guidelines/new-workshops/","title":"New Workshop Guidelines","tags":[],"description":"","content":"This document is intended to guide you on how to create new workshops for the Nuevo Foundation workshop project .\nPlease familiarize yourself with the Site Architecture and the Getting Started sections.\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/arrays/","title":"Arrays","tags":[],"description":"","content":"What is an Array? An array is simply a collection of values. It\u0026rsquo;s a special variable, which can hold more than one value at a time.\nFor example, consider an array called fruits, which would contain values like apple, orange, mango etc\u0026hellip; all together in a single variable.\nHow to create one The following statements show how to create arrays in two different ways but the end result is the same.\nSyntax:\nvar arrayName = new Array(element0, element1, ..., elementN); var arrayName = Array(element0, element1, ..., elementN); var arrayName = [element0, element1, ..., elementN]; Example: "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/conditional-statements-loops/","title":"Conditional statements and loops","tags":[],"description":"","content":"Topics  Conditional statements \n   Else-if Condition \n   Loops \n   Nested loops \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-2/","title":"Activity 2: Modify your color board","tags":[],"description":"","content":" Example one: Make a diagonal #This creates the original colorboard. from PIL import Image img = Image.new(\u0026#39;RGB\u0026#39;, (60, 30), \u0026#39;red\u0026#39;) img.save(\u0026#39;pil_red.png\u0026#39;) #This uses a nested while loop to change the picture. x = 0 y = 0 while x \u0026lt; 10: while y \u0026lt; 20: img.putpixel( (x,y), (0, 0, 0)) x += 1 y += 1 img.save(\u0026#39;pil_red.png\u0026#39;) This is the picture before changing. This is the picture after changing. Example two: Make a rectangle. #This creates the original colorboard. from PIL import Image img = Image.new(\u0026#39;RGB\u0026#39;, (60, 30), \u0026#39;red\u0026#39;) img.save(\u0026#39;pil_red.png\u0026#39;) #This uses nested for loop to change the picture. for x in range(10, 30): for y in range(5, 25): img.putpixel( (x,y), (0, 0, 0)) img.save(\u0026#39;pil_redmodified.png\u0026#39;) This is the picture before changing. This is the picture after changing. Modifying your own colorboard! Here are two templates to assist your colorboard modifications.\nTemplate One: Adding a line # Template for adding a line initial_position_x = 0 #make change here initial_position_y = 0 #make change here width = 0 #make change here height = 0 #make change here color = (0,0,0) #make change here while initial_position_x \u0026lt; width: while initial_position_y \u0026lt; height: img.putpixel( (x,y), color) initial_position_x += 1 initial_position_y += 1 img.save(\u0026#39;pixel-activity2.png\u0026#39;) Template Two: Adding a rectangle # Template for adding a rectangle initial_position_x = 0 #make change here initial_position_y = 0 #make change here width = 0 #make change here height = 0 #make change here color = (0,0,0) #make change here for x in range(initial_position_x, width+initial_position_x): for y in range(initial_position_y, height+initial_position_y): img.putpixel( (x,y), color) img.save(\u0026#39;pixel-activity2.png\u0026#39;)  "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arrays/methods/","title":"Array Methods and Examples","tags":[],"description":"","content":"\n--  Creating an array Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value. To declare an array, define the variable type with square brackets.\n{ String[] restaurants; } We have now declared a variable that holds an array of strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:\n{ String[] restaurants = {\u0026#34;Burger King\u0026#34;, \u0026#34;Chipotle\u0026#34;, \u0026#34;Panda Express\u0026#34;, \u0026#34;Subway\u0026#34;}; } To create an array of integers, you could write:\n{ int[] myNum = {10, 20, 30, 40}; }  Accessing elements of an array You access an array element by referring to the index number. This statement accesses the value of the first element in restaurants:\n{ String[] restaurants = {\u0026#34;Burger King\u0026#34;, \u0026#34;Chipotle\u0026#34;, \u0026#34;Panda Express\u0026#34;, \u0026#34;Subway\u0026#34;}; System.out.println(restaurants[0]); //system will output \u0026#34;Burger King\u0026#34; }  Changing an array element To change the value of a specific element, refer to the index number:\n{ String[] restaurants = {\u0026#34;Burger King\u0026#34;, \u0026#34;Chipotle\u0026#34;, \u0026#34;Panda Express\u0026#34;, \u0026#34;Subway\u0026#34;}; System.out.println(restaurants[0]); //system will output \u0026#34;Burger King\u0026#34;  restaurants[0] = \u0026#34;McDonalds\u0026#34;; System.out.println(restaurants[0]); //System now outputs \u0026#34;McDonalds\u0026#34; }  Finding the length of an array To find out how many elements an array has, use the length property:\n{ String[] restaurants = {\u0026#34;Burger King\u0026#34;, \u0026#34;Chipotle\u0026#34;, \u0026#34;Panda Express\u0026#34;, \u0026#34;Subway\u0026#34;}; System.out.println(restaurants.length); //system will output 4 }  Looping through an array You can loop through the array elements with the for loop, and use the length property to specify how many times the loop should run. The following example outputs all elements in the restaurants array:\n{ String[] restaurants = {\u0026#34;Burger King\u0026#34;, \u0026#34;Chipotle\u0026#34;, \u0026#34;Panda Express\u0026#34;, \u0026#34;Subway\u0026#34;}; for (int i = 0; i \u0026lt; restaurants.length; i++) { System.out.println(restaurants[i]); } //Outputs Burger King  //Outputs Chipotle  //Outputs Panda Express  //Outputs Subway } "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arrays/","title":"Arrays","tags":[],"description":"","content":"\n--  First, our customers need to be able to select the restaurant that they want to order their food from! There may be hundreds of different restaurants in the app and we need some way to store them all inside a data structure. To accomplish this goal, we will use an array.\nTopics  What is an Array? \n   Array Methods and Examples \n   Problem 1: Array basics \n   Problem 2: Advanced Arrays \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/functions/built-in/","title":"Built in Functions","tags":[],"description":"","content":"There are many built-in functions in python that can be used to increase the ease of writing code. Let\u0026rsquo;s discuss a few of them here.\nsort() This function is used to sort the values in data structures such as arrays and lists.\narr = [8,5,1,4,6] arr.sort() print(\u0026#39;The sorted arr is :\u0026#39;,arr) #prints The sorted arr is [1,4,5,6,8] find() Returns the first occurence of the input(pattern) to the find() provided in the given string.\nstr1 = \u0026#34;Hello World\u0026#34; index = str1.find(\u0026#34;World)\u0026#34; print(index) #prints 6 len() len() helps in finding out the size of the given data structure.\narr = [10,5,4,2,3] print(len(arr)) #prints 5 isdigit() This function returns true if the string passed as an argument consists of only digits; otherwise it returns false\ns = \u0026#34;123\u0026#34;; print str.isdigit() #prints true s = \u0026#34;Hello World\u0026#34;; print str.isdigit() #prints false s = \u0026#34;123Hello\u0026#34; print str.isdigit() #prints false as it has letters along with digits reverse() This function is used to reverse the contents of an array or a list.\narr = [5, 6, 7, 8, 9]; arr.reverse(); print(arr) #prints [9,8,7,6,5] replace() This function replaces the first argument passed to the function with the second argument in a given string.\ninitial_str = \u0026#34;My name is Harry. Harry is a good boy.\u0026#34; final_str = initial_str.replace(\u0026#34;Harry\u0026#34;, \u0026#34;Potter\u0026#34;) print(final_str) #prints My name is Potter. Potter is a good boy. append() This function is used to add a number, character or element of any data type to the end of a list or an array.\narr = [1,2,3,4,5]; arr.append(6); print(arr) #prints [1,2,3,4,5,6] arr = [\u0026#39;Harry\u0026#39;,\u0026#39;Ram\u0026#39;,1,2] arr.append(\u0026#34;Jenifer\u0026#34;) print(arr) #prints [Harry,Ram,1,2,Jenifer] remove() Removes the first occurence if argument passed for the given object. If you try to remove an element not in list, it would give an exception stating element not in the list.\narr = [1,1,2,3,3] arr.remove(1) print(arr) #prints 1,2,3,3 arr.remove(4) #gives an exception stating element not in the list Challenge 1 Create an array namearr\n  Initialize it to [1,2,3,4,5]\n  Append the number 6 to it and print.\n  Reverse arr and print it.\n  Sort arr and print it.\n  Print length of arr\n  Remove the element 6 from arr and print it.\n  Print the length of arr,\n  Expected output [1,2,3,4,5,6] [6,5,4,3,2,1] [1,2,3,4,5,6] 6 [1,2,3,4,5] 5  Challenge 2 -Initialise a string s to \u0026ldquo;Hello all.Hello people\u0026rdquo;.\n-Find the occurence of the word Hello in the string s and print.\n-Replace the word Hello to Hi in s.\n-Find if the string s contains only digits and print the verdict.\nExpected Output 0 Hi all.Hi people. False   "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/hashmaps/examples/","title":"Examples","tags":[],"description":"","content":"-- Hashmaps  A hashmap can store items in key/value pairs and you can assign those pairs to different types such as Strings or ints.\nAs usual, to create a HashMap, you will have to import the HashMap class like so.\nimport java.util.HashMap; // will import HashMap  HashMap\u0026lt;String, String\u0026gt; addresses = new HashMap\u0026lt;String, String\u0026gt;(); In this case, we created a HashMap called addresses which stores keys of String type and values of String type.\n Adding items to the HashMap To add key/value pairs into the hashmap, use the put() method.\n// Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called capitalCities  HashMap\u0026lt;String, String\u0026gt; addresses = new HashMap\u0026lt;String, String\u0026gt;(); // Add keys and values (Country, City)  addresses.put(\u0026#34;Melissa\u0026#34;, \u0026#34;333 Foster St. Conyers, GA 30012\u0026#34;); addresses.put(\u0026#34;Jun\u0026#34;, \u0026#34;66 E. Wentworth Ave. Annandale, VA 22003\u0026#34;); addresses.put(\u0026#34;Isabelle\u0026#34;, \u0026#34;11 John Ave. Champaign, IL 61821\u0026#34;); addresses.put(\u0026#34;Tom\u0026#34;, \u0026#34;808 Blue Spring Street Colorado Springs, CO 80911\u0026#34;); } } As you can see, the code above inserts a key/value pair into our hashmap addresses.\n Looking up an item in the HashMap To look up an item in a HashMap, use the get() method.\n// Import the HashMap class import java.util.HashMap; public class Main { public static void main(String[] args) { // Create a HashMap object called addresses  HashMap\u0026lt;String, String\u0026gt; addresses = new HashMap\u0026lt;String, String\u0026gt;(); // Add keys and values (Name, Address)  addresses.put(\u0026#34;Melissa\u0026#34;, \u0026#34;333 Foster St. Conyers, GA 30012\u0026#34;); addresses.put(\u0026#34;Jun\u0026#34;, \u0026#34;66 E. Wentworth Ave. Annandale, VA 22003\u0026#34;); addresses.put(\u0026#34;Isabelle\u0026#34;, \u0026#34;11 John Ave. Champaign, IL 61821\u0026#34;); addresses.put(\u0026#34;Tom\u0026#34;, \u0026#34;808 Blue Spring Street Colorado Springs, CO 80911\u0026#34;); String junAddress = addresses.get(\u0026#34;Jun\u0026#34;); System.out.println(\u0026#34;Jun\u0026#39;s address is: \u0026#34; + junAddress); //outputs Jun\u0026#39;s address  } } Using the get() method, we call addresses.get(\u0026quot;Jun\u0026quot;) and returns Jun\u0026rsquo;s address. Those are some of the most basic methods of the hashmap. Other methods may include the remove() method, which removes an item or the size() method which returns how many items are in the hashmap. We will give more examples to let you try it out in the next page!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/queues/introduction/","title":"Introduction","tags":[],"description":"","content":"-- Priority Queues  A PriorityQueue is used when the objects are supposed to be processed based on the priority. In this case, we want to sort the queue by the time the customer has been waiting. It is known that a Queue follows the First-In-First-Out algorithm, but sometimes the elements of the queue are needed to be processed according to the priority; that’s when the PriorityQueue comes into play. The PriorityQueue is based on the priority heap. The elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used.\nBefore we create a queue, we will have to import the PriorityQueue class. To make life easier, we can use a * instead to import all classes in the library. It will look something like this.\nimport java.util.*; // will import PriorityQueue, among other classes  There are several methods to use on a Priority Queue and if you are interested, feel free to google the methods yourself. However, we are only going to talking about the most important methods now: add(), peek(), and poll().\n Creating a Priority Queue Queue\u0026lt;Integer\u0026gt; orders = new PriorityQueue\u0026lt;\u0026gt;(); There are several ways to order the priority queue and it\u0026rsquo;s up to you to decide how you want to implement it.\n Adding elements with add() You can add to a queue by using the add() method. The PriorityQueue` will automatically sort the elements for you. It\u0026rsquo;s default is by an object\u0026rsquo;s natural order, but you can change it base on what you want.\n Accessing elements with peek() peek() will return the top element without removing it.\n Removing elements with poll() poll() will return the top element and removes it from the queue.\n With these three methods in mind, let\u0026rsquo;s go ahead and take a look at an example.\nimport java.util.*; class PriorityQueueDemo { // Main Method  public static void main(String args[]) { // Creating empty priority queue  PriorityQueue\u0026lt;Integer\u0026gt; pQueue = new PriorityQueue\u0026lt;Integer\u0026gt;(); // Adding items to the pQueue using add()  pQueue.add(60); pQueue.add(30); pQueue.add(10); // Printing the top element of PriorityQueue  System.out.println(pQueue.peek()); // Printing the top element and removing it  // from the PriorityQueue container  System.out.println(pQueue.poll()); // Printing the top element again  System.out.println(pQueue.peek()); } } So we have three customer\u0026rsquo;s with varying wait times of 10, 30, and 60. What do you think the compiler will output?\nLet\u0026rsquo;s go ahead and try to digest the code a little bit. For the first line, we call pQueue.peek(). What does peek() do? Peek simply returns the element at the top. What is at the top? Well since it is already sorted, it should print the smallest element which is 10.\nHow about pQueue.poll()? Well it should do the same exact thing as peek earlier, but now it removes the top element from the queue which is 10.\nWhat if we try to call peek() again? Well now that 10 does not exist anymore, it will now be 30.\nSo the final output might look like this:\n10 10 30 Hold on? Didn\u0026rsquo;t we want to have the people waiting the longest in line be at the top of the queue first? It seems like the queue outputs the smallest elements first, but what we actually want is the biggest element instead. To accomplish this, we would just have to instantiate the queue a little differently. Collections.reverseOrder() will essentially just reverse the order of our queue. Like this!\nPriorityQueue\u0026lt;Integer\u0026gt; pQueue = new PriorityQueue\u0026lt;Integer\u0026gt;(Collections.reverseOrder()); Now our implementation should be solid.\nimport java.util.*; class PriorityQueueDemo { // Main Method  public static void main(String args[]) { // Creating empty priority queue  PriorityQueue\u0026lt;Integer\u0026gt; pQueue = new PriorityQueue\u0026lt;Integer\u0026gt;(Collections.reverseOrder()); // Adding items to the pQueue using add()  pQueue.add(60); pQueue.add(30); pQueue.add(10); // Printing the top element of PriorityQueue  System.out.println(pQueue.peek()); // Printing the top element and removing it  // from the PriorityQueue container  System.out.println(pQueue.poll()); // Printing the top element again  System.out.println(pQueue.peek()); } } Check-In Question: What will this pQueue output now?\nAnswer:\n60 60 30 "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/stacks/introduction/","title":"Introduction","tags":[],"description":"","content":"-- Stacks  A stack is eerily similar to a queue. The only difference are the method names and the manner in which we retrieve the items.\nBefore we create a stack, we will have to import the stack class. To make life easier, we can use a * instead to import all classes in the library. It will look something like this.\nimport java.util.*; // will import stack, among other classes  There are several methods to use on a stack. If you are interested, you may search the internet for more information about these methods. However, we are only going to explain the most important methods for now: push(), peek(), and pop().\n Creating a Stack Stack driver = new Stack();  Adding elements with push() In order to add an element to the stack, we can use the push() method. This push() operation place the element at the top of the stack.\n Accessing elements with peek() To retrieve or fetch the first element of the stack or the element present at the top of the stack, we can use the peek() method. The element retrieved does not get deleted or removed from the stack.\n Removing elements with pop() To remove an element from the stack, we can use the pop() method. The element is popped and removed from the top of the stack.\n With these three methods in mind, let\u0026rsquo;s go ahead and take a look at an example.\nimport java.util.*; public class Driver{ public static void main(String []args){ // Default initialization of Stack  Stack stack = new Stack(); // pushing the elements  stack.push(\u0026#34;Burger King\u0026#34;); stack.push(\u0026#34;Subway\u0026#34;); stack.push(\u0026#34;Jack in the Box\u0026#34;); // Printing the Stack Elements  System.out.println(stack); } } Output:\n[Burger King, Subway, Jack in the Box] "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arraylists/methods/","title":"Methods","tags":[],"description":"","content":"--  Change an Item import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList\u0026lt;String\u0026gt; order = new ArrayList\u0026lt;String\u0026gt;(); order.add(\u0026#34;Whopper\u0026#34;); order.add(\u0026#34;Chicken Nugget\u0026#34;); order.add(\u0026#34;Fries\u0026#34;); order.set(1, \u0026#34;Coke\u0026#34;); //this sets the first element(chicken nuggets) to a coke instead  } } Using set(), you can set the element at the index number to a new element.\n Remove an Item import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList\u0026lt;String\u0026gt; order = new ArrayList\u0026lt;String\u0026gt;(); order.add(\u0026#34;Whopper\u0026#34;); order.add(\u0026#34;Chicken Nugget\u0026#34;); order.add(\u0026#34;Fries\u0026#34;); order.remove(2); //removes fries from the arraylist  } } Similar to set(), the remove() method removes an element at an index number.\n Size of ArrayList import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList\u0026lt;String\u0026gt; order = new ArrayList\u0026lt;String\u0026gt;(); order.add(\u0026#34;Whopper\u0026#34;); order.add(\u0026#34;Chicken Nugget\u0026#34;); order.add(\u0026#34;Fries\u0026#34;); System.out.println(order.size()); //outputs the size of the arraylist, in this case: 3  } } size() returns the size of the ArrayList.\n Iterating through an ArrayList import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList\u0026lt;String\u0026gt; order = new ArrayList\u0026lt;String\u0026gt;(); order.add(\u0026#34;Whopper\u0026#34;); order.add(\u0026#34;Chicken Nugget\u0026#34;); order.add(\u0026#34;Fries\u0026#34;); for (int i = 0; i \u0026lt; order.size(); i++) { System.out.println(order.get(i)); } } } By using a combination of the for loop and the get method, we can iterate through the ArrayList and print out each element at every index.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-types/numbers/","title":"Numbers","tags":[],"description":"","content":"The computer can also do your regular math that you do in school. Use print to print out the result from the math expressions. No quotation marks are needed for numbers! Unlike strings, you can do math on numbers.\nThe computer does division differently from your regular calculator. Computer division will exclude remainders or decimals.\nFor example,\n15/4 makes 3 and not 3.75\n You can also try using the math symbols to make your own expressions!\n   Symbol Use Symbol Use     + Add * Multiply   - Subtract / Divide    Challenge 1 Let\u0026rsquo;s try to figure out the answers to the following using Python. Try printing out the result of the below (make sure you don\u0026rsquo;t miss any parentheses):\n 2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7))  Challenge 2 Can you print out this statement? \u0026quot;527 time 199 is: __\u0026quot;\nYou will fill in the blank with the answer of what (527 * 199) is. If you want to print a string and a number together, you first have to convert the number into a string.\nHere\u0026rsquo;s an example: print(\u0026quot;Hello, World!\u0026quot; + str(5))\nUsing str(5) turns the number into the string \u0026quot;5\u0026quot;. Converting one type of thing to another is called \u0026ldquo;casting\u0026rdquo;.\n Fun Fact: Random Numbers Here is how to print a random number between 1 (inclusive) and 10 (inclusive):\nfrom random import randint\nprint(randint(1,10))\nWant to know more? Ask for help or poke around on the internet! Every coder\u0026rsquo;s best friend is a search engine!\nIn particular, try understanding what the from and the import words mean. We will come back to these words later during the project.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/colors_and_pixels/open-image/","title":"Open an image","tags":[],"description":"","content":"To change an image, we must open an image. We can use the Pillow Image module we just imported in the setup. Let’s first find some images to open. Find an image of your choice and download it. Once you have downloaded it, navigate back to your repl.it window and upload your image by clicking on the three dots and selecting ‘upload file’.\nFor example, to upload the cat.jpg file:\nYou should see the JPG file on the left side once you’ve uploaded it. Note, your image may have a different extension.\nNext step is to open that image within code. There are functions within the Pillow Image module we imported that allow us to do this.\nTo open and show the image you downloaded, do the following:\nimage = Image.open(\u0026#34;cat.jpg\u0026#34;) image.save(\u0026#34;myCat.jpg\u0026#34;) If you are using a different image, then make sure you put the name of the file within the quotes. The code above opens the JPG image and stores that image in the variable image. To check that the image variable has the image, we can then save it as a new image. This way the image will show in the window.\nHit run and see your image appear! My image looks like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arrays/problem-1/","title":"Problem 1: Array basics","tags":[],"description":"","content":"-- Task 1: Printing We\u0026rsquo;ve created an array of existing restaurants in our system! We need your help to print out everything so we do not include the same restaurants.\n Use a for Loop to print out on repl.it below. Use the length() method to find the size of the array! Look at example below! \n If we are given the array below:\nString[] restaurants = { \u0026#34;Burger King\u0026#34;, \u0026#34;Chipotle\u0026#34;, \u0026#34;Panda Express\u0026#34;, \u0026#34;McDonalds\u0026#34; }; the answer should print out:\nString answer = \u0026#34;Burger King,Chipotle,Panda Express,McDonalds\u0026#34;;  Task 2: Changing Elements Oh no! McDonalds is out of food! Change the restaurant list before people start ordering from McDonalds, and be disappointed with no food. Luckily \u0026ldquo;Pizza Hut\u0026rdquo; is willing to help out! Replace McDonalds with Pizza Hut in the index.\n Find the index of McDonalds first Remember quotes around \u0026quot;Pizza Hut\u0026quot; Look at the example below! \n String[] restaurants = {\u0026#34;Burger King\u0026#34;, \u0026#34;Chipotle\u0026#34;, \u0026#34;Panda Express\u0026#34;, \u0026#34;McDonalds\u0026#34;}; //replace \u0026#34;McDonalds\u0026#34; with \u0026#34;Pizza Hut\u0026#34;  String[] restaurants = {\u0026#34;Burger King\u0026#34;, \u0026#34;Chipotle\u0026#34;, \u0026#34;Panda Express\u0026#34;, \u0026#34;Pizza Hut\u0026#34;}; "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/hashmaps/problem-1/","title":"Problem 1: Hashing","tags":[],"description":"","content":"-- Task 1: Using Hashmap to organize data It\u0026rsquo;s a party! A customer has a big birthday party for more than 20 people! Everyone has their own order. To keep the mass order organized, you decide to create a hashmap of Strings. The birthday girl\u0026rsquo;s name is Isabella, but her name is lost in the list. Can you figure out what Isabella ordered?\n Do you remember the hashmap methods? Look at example order below! \n //example of current hashmap  HashMap\u0026lt;String, String\u0026gt; order = new HashMap\u0026lt;String, String, String\u0026gt;(); //key, value  order.put(\u0026#34;Justin\u0026#34;, \u0026#34;Sprite\u0026#34;); order.put(\u0026#34;George\u0026#34;, \u0026#34;Coke\u0026#34;); order.put(\u0026#34;Sam\u0026#34;, \u0026#34;Fanta\u0026#34;); order.put(\u0026#34;Eva\u0026#34;, \u0026#34;Coke\u0026#34;); order.put(\u0026#34;Olivia\u0026#34;, \u0026#34;Coke\u0026#34;); ... "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/2d-arrays/the-menu/","title":"The Menu","tags":[],"description":"","content":"\n--  Let\u0026rsquo;s recall the restaurant array that we made earlier in the array section.\nAs you can see, this array holds all the different restaurants for our app. Now, let\u0026rsquo;s try to make each restaurant contain an array of all of its menu items. If done correctly, the 0th element of our array, \u0026ldquo;Burger King\u0026rdquo;, should now hold its respective menu items. It might look something like this:\nAs you can see, the 0th element should be our Burger King Array. Just like our 1D arrays, we zero index the items of our array. If we wanted to place an order for a Whopper, we would simply call Restaurant[0][0]. This would call our Burger King Array and the first element at that array, which is a whopper. If we wanted fries in our array, then we would call Restaurant[0][2].\nQuestion: If we wanted to order some orange chicken and orange chicken was the 10th element of our Panda Express array, how could we access that element?\nIf you answered Restaurant[2][9], then you are correct! Panda Express is the third array [2], and orange chicken is the tenth element [9].\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/writing-to-console/","title":"Writing to Console (Print statement)","tags":[],"description":"","content":" Make your program talk to you! Print statements are used to print something on the console. Use print(\u0026quot;Hello World\u0026quot;) to print Hello World in the output screen. We will later learn that print is a function and we use it to perform a print job. Whatever you pass to the print function is printed on the screen. Let\u0026rsquo;s start by doing a print statement. A print statement allows you to take control of the computer and make it print something out!\nWe will use printing a lot in the later lessons, so make sure you understand this before moving on to the next concept!\nChallenge 1 To start, write the following text into your Repl.it main.py and click Run.\nprint(\u0026#34;Hello, World!\u0026#34;) Watch your console say \u0026ldquo;Hello, World!\u0026rdquo; on the screen to the right! print tells the computer to print the sentence within the parentheses () into the console window, or the screen on the right.\n Challenge 2  Without removing the quotation marks, try changing \u0026quot;Hello, World\u0026quot; to another sentence. (For example – \u0026quot;My name is Nuvi!\u0026quot;) Press run to see if anything changes. Add another print below the current line to print a second sentence below the first sentence. Press run to see if two sentences are printed out.   We will use printing a lot in the later lessons, so make sure you understand this before continuing!\nHELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help. In particular, beware of the following when coding in Python:\n Make sure the sentence you wish to print is surrounded in quotation marks and that the sentence is inside the parentheses.  Spacing in Python is very important. Make sure you don’t have any unnecessary spaces or tabs at the beginning or at the end of each line, as Python won’t be able to read the code otherwise. For example, don’t put any spaces before print, or any spaces after the last parenthesis in print(\u0026quot;Hello, World!).   "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/basics/","title":"Basics","tags":[],"description":"","content":"What is a website? A website is just a page that can be found on the Internet. It is displayed through a browser when you type the address (aka unique name) in the address bar.\nParts of a website Common website elements include navigation bars, footers, search bars, and contact forms.\nWebsite design The first step in making a website is to decide which elements we want, and how they will look. This process is called layout design and it’s just a rough sketch of how the different pieces are going to come together. There are many tools to help you do this, but the oldest and one of the most popular is good ol’ pen and paper. Here’s how I sketched mine:\nThis sketch is just a guideline. It’s okay to change things around as we start putting it together. A good rule of thumb is to start as simple as possible.\n\r"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/the-basics/","title":"The Basics - Class and Object","tags":[],"description":"","content":"Classes and objects Before you start building a game, you should know how to draw different objects and modify them as per the way they need to look and move on computer screen.\nIn order to build objects, you first decide how they should look, what role they should perform in your game, and how player can control their movement on screen. You do this by creating a class for each object you want on screen. Before objects are created in a program you must define their class. A class is what tells how an individual object will look and behave. It contains the attributes and methods that its object can use during the lifetime of a program (in this case it is Pong game). You only need to define a class once then you can use that class to create as many objects as you wish.\nYou cannot use a class directly in a program; a class must have an object as its manifestation that is used in program. All aspects related to visuals and movement are called the \u0026quot;attributes\u0026quot; of the object that you see on computer screen. All aspects related to control of an object are called \u0026quot;functions\u0026quot; of the object.\nFirst, define the class for paddle used in game. To do this, type in the following: class Paddle(pygame.Rect): def __init__(self, velocity, up_key, down_key, *args, **kwargs): self.velocity = velocity self.up_key = up_key self.down_key = down_key super().__init__(*args, **kwargs) def move_paddle(self, board_height): keys_pressed = pygame.key.get_pressed() if keys_pressed[self.up_key]: if self.y - self.velocity \u0026gt; 0: self.y -= self.velocity if keys_pressed[self.down_key]: if self.y + self.velocity \u0026lt; board_height - self.height: self.y += self.velocity Let\u0026rsquo;s try to understand the code in more detail.\nName the class class Paddle(pygame.Rect)\nThis is how you name the class \u0026quot;Paddle\u0026quot;. Now, notice the pygame.Rect inside (). You might have already imagined that in order to draw the paddle on a computer screen you need to draw it like a rectangle, then define its dimensions and position on screen to make it look like a paddle. The (pygame.Rect) statement allows us to tell the Python compiler to draw this object like a rectangle and provide all rectangle\u0026rsquo;s attributes to it like WIDTH and HEIGHT. This helps us make use of all attributes available to the Rectangle class in the Pygame library.\nAdd attributes def __init__(self, velocity, up_key, down_key, *args, **kwargs):\nDon\u0026rsquo;t worry about args and kwargs for now and focus on core attributes of Paddle class.\n__init__ function allows you to setup the class with attributes you need to see in objects. You can define additional attributes here on top of what you already get from Rectangle class. Let\u0026rsquo;s add attributes like velocity, up_key, down_key to represent the speed at which paddle can move, and the keys needed for upward and downward movement of the paddle.\nclass Paddle(pygame.Rect): def __init__(self, velocity, up_key, down_key, *args, **kwargs): self.velocity = velocity self.up_key = up_key self.down_key = down_key super().__init__(*args, **kwargs) Add methods move_paddle() is a method. We use this method to get paddle to perform move actions. In this case, move_paddle() moves the paddle upward or downward depending on the key we pressed, and at a certain speed.\ndef move_paddle(self, board_height): keys_pressed = pygame.key.get_pressed() if keys_pressed[self.up_key]: if self.y - self.velocity \u0026gt; 0: self.y -= self.velocity if keys_pressed[self.down_key]: if self.y + self.velocity \u0026lt; board_height - self.height: self.y += self.velocity \n Now that you have defined how a paddle should look and how it should move, feel free to take a look at classes for Ball and Pong. In the next activities, you will modify certain aspects of these classes to make the Pong game work for you.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/activity-1/","title":"Activity 1 - Create your Restaurant Banner","tags":[],"description":"","content":"Pre-reqs  Printing with Python  Create your Restaurant Banner When setting up your restaurant\u0026rsquo;s virtual cashier, we\u0026rsquo;re going to have to first make sure we have a restaurant banner with the name of your restaurant. Since we want an actual banner, not just plain text for the name, let\u0026rsquo;s use ASCII art! ASCII art uses special symbols such as (), {}, * and other keys to create images and words. For this activity, we can make use of this online resource to convert text into ASCII art.\nText to ASCII converter For example, we can convert the word \u0026ldquo;Restaurant\u0026rdquo; into ASCII art. Take a look at the code below!\nprint(\u0026#34;_ _ _ _ _ _ _ _ _ _ \u0026#34;) print(\u0026#34;/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\\u0026#34;) print(\u0026#34;( r | e | s | t | a | u | r | a | n | t )\u0026#34;) print(\u0026#34;\\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \u0026#34;) Remember to keep this document open as we\u0026rsquo;ll return to it in later activities as each activity builds on the previous ones. Eventually, your entire cash register for the restaurant will be set up on this document.\n"},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/activity-1/","title":"Activity 1 - Output","tags":[],"description":"","content":"We first need to enter a message for our program to be able to create secret messages.\n To do that we are going to start by telling the computer to show in console for whom is that message. This is the command that we will be using.\ncout \u0026lt;\u0026lt; \u0026quot;Hello Developer!\u0026quot; \u0026lt;\u0026lt; endl; Let\u0026rsquo;s learn more about this line of code, shall we?\nStrings Everything that we see wrapped in quotation marks (\u0026quot;\u0026quot;) are called strings. A string is sequence of characters, numbers, letters or symbols.\nIn the line of code that we wrote before, \u0026quot;Hello Developer!\u0026quot; is a string. \u0026quot;123\u0026quot;, \u0026quot;abc!\u0026quot; or \u0026quot;Hello\u0026quot; are also examples of strings. However, 123, abc! or Hello! are not strings since they are not wrapped between quotation marks.\nPrint to Console To print to the console, we use cout. Every cout will be followed by \u0026lt;\u0026lt;, while endl that means we\u0026rsquo;ve reached end of the line. Anything wrapped by \u0026lt;\u0026lt; will be printed to the console. In our case, if we hit Run, the string Hello Developer! will be printed to the console.\n Copy the above line and paste it in the main.cpp file that we had at the beginning. Run the program and see what happens. Try changing the string to \u0026quot;Hello world!\u0026quot; or \u0026quot;For the queen\u0026quot;.\nHelp! If after clicking the Run button, an error message in red appears, it means that there is something wrong with your code. Please ask for help from your instructor.\nYou should also check for the following:\n Ensure the spelling, capitalization, and symbols used match with the example given. Make sure that you add a semicolon at the end of each line of code.   "},{"uri":"https://nuevofoundation.github.io/workshops/microbit-distance-checker/broadcasting/","title":"Broadcasting a Signal","tags":[],"description":"","content":"Turning On the Radio Today we\u0026rsquo;ll be using the Bluetooth radio on your micro:bit to figure out how far away you are from other micro:bits. The first thing we need to do is turn on the radio and tune it to a channel. Click on the section that says Radio. It\u0026rsquo;s the pink section which is fifth from the top. Choose \u0026ldquo;radio set group 1\u0026rdquo; and drag it into the blue \u0026ldquo;on start\u0026rdquo; block in the workspace. Make sure that you use the same group number as everyone else. If you use different group numbers, your micro:bits won\u0026rsquo;t be able to talk to each other. Your workspace should look like the below after you are done:\nBroadcasting a Signal Now that our micro:bits are set up to listen, we need to send out a signal for them to pick up. Click on the Radio section again. This time drag the \u0026ldquo;radio send number 0\u0026rdquo; block into the blue \u0026ldquo;forever\u0026rdquo; block in your workspace. This will make your micro:bit continuously send that number to any device listening in the same group.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/the-basics/","title":"The Basics - Drawing a colored line","tags":[],"description":"","content":"\nBefore Alex can learn how to create a beehive, he must first learn how to draw a colored line. We will add code to the below repl.it window, and we will do this in two parts.\n First, we need tell the turtle what color we want the line to be. To do this, let\u0026rsquo;s type in:\nturtle.color(\u0026quot;orange\u0026quot;) Let\u0026rsquo;s try to understand this line of code in more detail.\nStrings Anything you see in quotation marks is called a string. A string is just a sequence of characters (whether they are letters, numbers, or symbols).\nIn the code above, \u0026quot;orange\u0026quot; is a string. Other examples of strings include \u0026quot;123\u0026quot;, \u0026quot;abc!\u0026quot; and \u0026quot;green\u0026quot;. Be careful, 123, abc! and green are not strings because there are missing quotation marks!\nMethods turtle.color() is a method. We use methods to get the turtle to perform certain actions. In this case, turtle.color() is changing the color of the lines it draws to what color we tell it to. We told it to change the color to orange by sending it the string \u0026quot;orange\u0026quot; as an argument.\nArguments Arguments are inputs that you pass in to methods to use. In our example, turtle.color() needs a string argument representing the name of the color to set the turtle, so we passed in \u0026quot;orange\u0026quot; as an argument to the method. We could also have told it to change the color to something else, but it has to have been a color that turtle.color() understands. The colors that it recognizes are: \u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;purple\u0026quot;, \u0026quot;black\u0026quot;, \u0026quot;pink\u0026quot;, and \u0026quot;gray\u0026quot;. If we send in anything else besides one of these color strings, we get the default color, which is black.\n Now that we have picked the color that we want, we can now draw a line! To draw a line there are two methods that we can use:\nturtle.forward(50) turtle.backward(50) turtle.forward(50) will make the turtle go forward 50 pixels and draw a line in the direction it\u0026rsquo;s facing, while turtle.backward(50) will do the same, but in the opposite direction.\nPixels An image is composed of thousands, if not, millions of pixels. A pixel is a unit of measurement for digital images, similar to how we measure weight in pounds, or long distances in miles.\nIntegers An integer is just any whole number, whether positive or negative. In this example, both turtle.forward() and turtle.backward() expect an integer as an argument instead of a string. This is because the argument represents the number of pixels you want the turtle to move when drawing. A string would clearly not work for these methods!\n Let\u0026rsquo;s make the turtle go forward, so type in turtle.forward(50). Now your code should look something like this:\nimport turtle turtle.color(\u0026quot;orange\u0026quot;) turtle.forward(50) Now that we have completed our code, press run. You should see the following in the result screen:\nIf so, great! If not, please ask for help.\nAs an exercise, try understanding what the following line of code does, and try adding this to your code. What does it do?\nturtle.shape(\u0026quot;turtle\u0026quot;) HELP! Nothing shows up on the screen! If, after pressing run, you don\u0026rsquo;t see anything on the screen, check to see if there is a red x beside the console tab (the console tab is right beside the result tab in the middle of the screen). If you do, you have encountered some errors! Please click the console tab and ask for help. Beware of the following when coding in python:\n Do not use any capital letters. Make sure that that none of the lines you have written so far start with any spaces. Ensure that the name of the color that you have chosen is surrounded in quotation marks, and that the color is between the parentheses in turtle.color(). \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/music-basics/","title":"Music Basics","tags":[],"description":"basics of music","content":"\nBasics first. A few things about music. What is Music? Music is the chronological organisation of sounds; that is, making certain sounds at certain times, which make melodic, rhythmic and harmonic sense. The first, most basic concept, is keeping the sounds \u0026ldquo;in time\u0026rdquo;. This leads us to some of the first few musical concepts: beat, rhythm, duration \u0026amp; tempo.\n Beat is the regular pulse which provides a timeline for the rhythm to anchor itself to. Rhythm is essentially repeated patterns of long or short, stressed or unstressed sounds or silences which fit into the main beat. Duration is the length of notes or sounds or silences which facilitate the rhythm. Tempo is the speed at which a piece of music is played.  "},{"uri":"https://nuevofoundation.github.io/workshops/adventure/story-boarding/","title":"Section 1: Story Boarding","tags":[],"description":"","content":"To get started, pull out a piece a paper and start \u0026ldquo;story boarding\u0026rdquo;. What does that mean? In order to develop a great story that allows the reader to choose between options, one can outline the flow of their story. This is a great planning step, that will you help you tremendously once you start coding! I would start with the 3 or 4 main choices your protagonist is going to make in the story. From there draw arrows for how the different choices your protagonist makes effects the story.\nNuvi’s Example Here an example of how to story board! The 4 main choices the protagonist will make is:\n Will it walk home from Robotics practice? Will it ride a bicycle home from Robotics practice? Will it play soccer with her friends at home? Will it go swimming with her friends at home?  Here is the resulting story board:\nNow, it’s great to mark up the different section of story board to match with different coding concepts that we’ve learned. If our story needs to make decision, our code we use if-else statements. If we are asking the audience to give us input to make decisions in our story, we will use user input. The actual story that the audience will be reading is string variables!\nLet’s mark it up on the story board! Here is what it looks like:\nIt’s really helpful to annotate your story board so you know what code related topics we can use! We see that the story line will be comprised off text or string variables. The user-input can be the reader typing whether they want to \u0026ldquo;walk\u0026rdquo; or \u0026ldquo;bike\u0026rdquo; or choose \u0026ldquo;soccer\u0026rdquo; or \u0026ldquo;swim\u0026rdquo;. The user can choose their story based off the input they give to the computer! The different paths that Nuvi can take are a series of decisions. Luckily, we learned how to use if–else statements, so the Nuvi can easily choose different paths the story can take!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/introduction/setting-up/","title":"Setting Up","tags":[],"description":"","content":"\n-- Setting Up Repl.it! In this workshop, you will be using Repl.it to learn how to code in Java. Here is an example interactive window that you will use today:\n Before we start, let\u0026rsquo;s first understand how the repl.it works. The main.java file contains code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the bottom white screen, under the result tab.\nTo learn how to code the data structures, we will be using Repl.it to test your skills. Press run and try completing the following tasks!\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/writing-to-console/","title":"Writing to Console","tags":[],"description":"","content":"Writing to Console Console.WriteLine means to tell the computer to print the sentence enclosed within the parentheses () out onto the console.\nWorking Together  In the repl.it window below, press run. You see that Hello World is printed out to the screen on the right. Without removing the quotation marks, try changing \u0026quot;Hello World\u0026quot; to another sentence. Press run to see if anything changes. Add another Console.WriteLine below the current line to print a second sentence below the first sentence. Press run to see if two sentences are printed out. If you see any red text, please ask for help.  \n We will use printing heavily in the later lessons, so make sure you understand this before continuing!\nHELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help or check the debugging page at the end of this tutorial. Beware of the following when coding in C#:\n The c in Console, and the w and l in WriteLine are capitalized. There is a semicolon ; at the end of the line. Make sure the sentence you wish to print is surrounded in quotation marks, and that the sentence is between the parentheses. Do not delete any curly braces { or }. \n "},{"uri":"https://nuevofoundation.github.io/workshops/debugging/01-overview/","title":"An Overview of Debugging","tags":[],"description":"","content":"There are many different ways to debug a program. In this guide, we’ll start off with some general steps so that you don’t get lost when you debug a program. There are 3 basic steps to debugging a program:\n  Identify the problem. In this step, your goal is to identify what is causing the bug. This involves finding the conditions that led to the bug. Being able to reproduce the bug gives you some of the information you need, which lets you narrow down the problem and perhaps helps you understand why the bug is occurring in the first place.\n  Find a solution. In this step, your goal is to fix the bug. Sometimes this is the easiest step, but at other times it is difficult because you might find that your program logic was incorrect to begin with! This step combined with step 3 can easily take the longest amount of time.\n  Test the solution. If your fix doesn’t actually fix the bug, what good will it do? You also need to make sure your fix doesn’t introduce more bugs. This step can be as simple as recompiling and running the program again once you\u0026rsquo;ve applied the fix. Or, it can involve running a whole suite of automated tests in an environment. Either way, the goal of this step is to establish program correctness.\n  Arguably the most frustrating part of debugging is step 1. As programmers, our job is to write code, but we can\u0026rsquo;t write code to fix the problem if we don\u0026rsquo;t know what the problem is in the first place! Thus, the bulk of this workshop will focus on finding where a bug could be hiding, as well as how you can use some tools to aide your search.\n"},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/building-the-dj-station/","title":"Building the DJ station","tags":[],"description":"","content":"Hooking up the oranges Grab an orange and one of your wires. Open up one of the alligator clips and insert the bottom half into the orange, leaving the top part of the clip on the outside. This is easiest to do if you insert it in the middle of the bottom of the orange. The same spot where you’d start peeling if you were going to eat the orange.\nRepeat this for the second orange using your other wire. Connect one orange to A1 and the other one to A2 All together your orange assembly looks like this! Using your USB cable, connect the small side to the chip. It’ll go into the silver port. Now let’s create the program before we plug in our chip to the computer! Please make sure your computer is MUTED before you start.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-guess-number/create-game/","title":"Create the game","tags":[],"description":"","content":"Accept user input This game will use some of the concepts you learned in the Python Basics section. You will need to know how to use the following concepts. If you are not familiar with any of these, please go back to review them.\n While loops Writing to console Reading from the console Conditional statements Random numbers  You will need to code this game so that it randomly generates a number.\nThen the program will repeatedly ask the user for input from the console, and you will need to compare this input to the number that was randomly generated.\nWhat\u0026rsquo;s the best way to do repeated tasks? You guessed it, loops! You can use a while loop to achieve this task.\nWithin the while loop, you can use conditionals to check if the player has guessed correctly. If not, you can give them helpful hints whether they should try guessing lower or higher.\nTry creating your own game! Remember to read the comments as a guide; or maybe delete the comments and see if you can figure out on your own. :)\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/conditional-statements-loops/else-if-statement/","title":"Else-if Condition","tags":[],"description":"","content":"We have already learned some basic if-else conditions from previous workshops, click on the link below if you want to review.\n Conditional statements   We will introduce a new condition called \u0026ldquo;elif\u0026rdquo;.\nElif Condition Elif Keyword represents the \u0026ldquo;else-if\u0026rdquo; condition. It is used when you want to have if the last if condition is not true, try this condition.\n# This is my first line of code if expression: statement(s) elif expression: statement(s) else: statement(s) Let\u0026rsquo;s see an example # This is an example if 1 \u0026gt; 3: print(\u0026#39;1\u0026gt;3\u0026#39;) elif 1 == 3: print(\u0026#39;1=3\u0026#39;) else: print(\u0026#39;1\u0026lt;3\u0026#39;) Since we can see that 1 greater than 3 is false, so it evaluates to false. The inside of the if statement will not be executed then. Since last if statement is false, we will then evaluate the elif statement if 1 is equal to 3, so it evaluates to false. So what is in else will be printed.\nWarning: elif is different from if Let\u0026rsquo;s see two examples Example A # This is Example A of two if statements if 1 == 1: print(\u0026#39;1=1\u0026#39;) if 3 == 3: print(\u0026#39;3=3\u0026#39;) else: print(\u0026#39;wrong\u0026#39;) Example A will print out: 1=1 3=3\nExample B # This is Example of elif statements if 1 == 1: print(\u0026#39;1=1\u0026#39;) elif 3 == 3: print(\u0026#39;3=3\u0026#39;) else: print(\u0026#39;wrong\u0026#39;) Example B will print out: 1=1\nIn Example A we will evaluate the first if statement (1==1) to be true. The inside of first if statement will be executed then. We will then evaluate second if statement (3==3) to be true as well. The inside of second if statement will also be executed. In Example B we will evaluate the first if statement (1==1) to be true. Then the rest part of elif and else will not be evaluated since if is already correct. \nChallenge Can you utilize the knowledge you learnt in Python-Basics-booleans to make your own example for elif? You may want to review boolean to finish this challenge.\n Booleans     "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/conditional-statements-loops/loops/","title":"Loops","tags":[],"description":"","content":"Loops in Python If you want to repeat a task multiple times, Python has a way to do that easily using loops. There are two types of basic loops in python: for loops and while loops.\nFor loops For loops iterate over a sequence. Let\u0026rsquo;s say you wanted to repeat a simple task 5 times. Here is how you would do it.\nThe following for loop iterates through each of the numbers in the list [1,2,3,4,5], and assigns the value x to it. Then, it executes the code within the for loop.\n What if you wanted to repeat a task 10 times instead? 100 times? 1000 times??\nIt would be difficult to write a list with 1000 numbers [1,2,3,4,5,6,\u0026hellip;\u0026hellip;\u0026hellip;.,998,999,1000]. There is a function that can create this list for you.\nHere\u0026rsquo;s an example of how to create the list using the range function:\nThe below code creates a list starting at 1 and ending at 10. Try replacing the list [1,2,3,4,5] in the above example with this range function!\nrange(1,11) The list in the for loop doesn\u0026rsquo;t just have to be numbers, it can be anything! Here is another example of what you can do with it:\n While loops While loops are similar to for loops, but instead of iterating over a sequence, they repeat for as long as a certain condition is met. For example, let\u0026rsquo;s create a while loop that repeates 5 times.\n As you can see, all of the code below the while loop gets executed as long as the variable count is less than 5.\nBe careful! Make sure that the condition becomes False at some point, or the loop will continue infinitely.\nBreak statements You learned earlier that for loops and while loops keep iterating over a sequence until it reaches the end or until a condition is met.\nThere is another way to stop running these loops before the end of the list or before a condition is met.\nYou can do this with the break statement. This lets you break out of the loop in either a for loop or while loop.\nHere\u0026rsquo;s an example with a while loop:\n Challenges   Using a for loop or while loop, try printing the following pattern\n1 1 2 1 2 3 1 2 3 4 1 2 3 4 5   Given a large list such as the one below, write a program that can find a particular number from this list.\n  For example, ask the user to enter a number in the console, then write to console if it was found.\n Question How would you change this program if the list is very large? If you\u0026rsquo;ve found a number, do you need to continue searching the rest of the list?\n"},{"uri":"https://nuevofoundation.github.io/workshops/security/password-basics/","title":"Password Basics","tags":[],"description":"","content":"Our Secret Agent Alice solves the case by explaining Bob about Passwords!!!\nWhat is a Password? Passwords are the key to the lock to your virtual world. Just like your secret is kept safe in a secure room using a lock and a key, your personal information on the internet is secured by your login password and username.\nThe secure room is only as secure as the key to the lock on the door. We need stronger passwords to protect our online data and identity from bad people known as Hackers.\nWhat went wrong? Passwords need to be private and should only be known to you. A strong password is one that is more secure by virtue of being difficult for a machine or a human to guess.\nExamples of weak passwords  Any common dictionary word, in any language (e.g., \u0026ldquo;airplane\u0026rdquo; or \u0026ldquo;Password\u0026rdquo;). A dictionary word where letters are replaced by numbers (e.g., \u0026ldquo;a1rplan3\u0026rdquo; or \u0026ldquo;P4ssw0rd\u0026rdquo;). A repeated set of characters (e.g., \u0026ldquo;AAAAA\u0026rdquo; or \u0026ldquo;12345\u0026rdquo;). A keyboard series of characters (e.g., \u0026ldquo;qwerty\u0026rdquo; or \u0026ldquo;poiuy\u0026rdquo;). Personal information (e.g., birthdays, names of pets or friends, Social Security number, addresses). Anything that’s written down and stored somewhere near your computer.  Bob\u0026rsquo;s key (his password) was his personal information and hence Eve could guess it.\nHow to fix it? By using stronger passwords. Let\u0026rsquo;s learn how to make a password strong as well as easy to remember. We don\u0026rsquo;t want to forget it. Do we?\n"},{"uri":"https://nuevofoundation.github.io/workshops/security-phishing/phishing-basics/","title":"Phishing Basics","tags":[],"description":"","content":"Our Secret Agent Alice explains to Bob about Phishing!!!\nWhat is Phishing? Just like when fishing, one uses a bait to catch fish on a rod, malicious hackers use different types of bait to steal personal information from unsuspecting people.\nPhishing is a type of social engineering attack which is used to steal sensitive data, including login credentials, banking and credit card details.\nIt occurs when a Hacker, posing as a trusted entity, lures an individual using email, text message, or phone.\nThe recipient is then tricked into clicking a malicious link, which can lead to the installation of a malicious software, or revealing of sensitive data.\nWhat went wrong? Bob was enticed by an email from a hacker named Eve offering him a free trip to Bahamas to steal his personal information.\nA closer look Alice helps Bob understand the red flags in his email by taking a detailed look!\nNote: There are times when you need to provide personal information to a trusted recipient. However, providing personal information can also lead to phishing. In this workshop we will understand how to differentiate between a legitimate email and a scam email.\n"},{"uri":"https://nuevofoundation.github.io/workshops/arduino/the-components/","title":"The Components","tags":[],"description":"","content":"The Components The components we will use for the project are shown below. Make sure you have all these components before starting:\nElegoo UNO Project Super Starter Kit with Tutorial for Arduino includes all hardware (with exception to the computer)\n  Core components needed for all activities    Arduino UNO R3 USB A to B cable Windows 10 PC Arduino IDE software (download)    Additional components needed for specific activities    (5) LEDs (any color)  (5) 220ohm resistor https://somanytech.com/220-ohm-resistor-color-code/ Jumper wires  Female-to-male Dupont wire  LCD panel + 5K ohm resistor 9V Battery (optional)    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-structures/tuples/","title":"Tuples","tags":[],"description":"","content":"A Tuple is also an ordered collection of elements just like lists, but tuples are immutable. So you can not change the elements of a tuple after it is assigned (unlike lists where you are allowed to do so). This immutable nature makes tuples very useful when you don\u0026rsquo;t want your data to be mutated through out the program. Along with this, tuples are generally used to store elements of different data types. A tuple can be created by placing all the elements inside parentheses (), separated by commas.\n#creating a tuple of two elements of String type  my_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;) Tuples can also be created without parentheses. However, it is a good practice to use them.\n Tuple can also have elements of different types.\n#A tuple having elements of different data types my_tuple = (\u0026#39;apple\u0026#39;, 1, 4.5) Accessing the elements of a tuple We can access the elements of a tuple by using indexes inside square bracket [] just like list. Note the index starts from 0.\n#creating a tuple of three elements of String type  my_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(my_tuple[0]) ## prints apple print(my_tuple[2]) ## prints mango Combine two tuples We can combine two tuples by using + operator.\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) numbers = (1, 2, 3) #Combine two tuples fruits and numbers combined_tuple = fruits + numbers print(combined_tuple) ## prints (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;, 1, 2, 3) Length of a tuple len(tuple) function gives the number of elements present in the tuple.\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(len(fruits)) ## prints 3 Reassign a tuple Since tuples are immutable, we can not change an element of the tuple. So fruits[0] = 'lemon' will give an error as here we are trying to change the element at index 0 of \u0026lsquo;fruits\u0026rsquo;. But we can reassign a tuple.\nmy_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(my_tuple) ## prints (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) # ressigning my_tuple my_tuple = (1, 2, 3) print(my_tuple) ## prints (1, 2, 3) Deleting a tuple We can delete a tuple entirely using the keyword del.\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(fruits) ## prints (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) # Deleting fruits del fruits print(fruits) ## Gives ERROR as tuple fruits is no longer present  Try it yourself "},{"uri":"https://nuevofoundation.github.io/workshops/java-tictactoe/activity-2/","title":"2. Read and Process Input","tags":[],"description":"Read input with Scanner class and check error cases","content":"Importing Packages In Java, an efficient way to obtain user input is to use the Scanner class in java.util package. To use this class and all its methods, we need to import the class with the following line of code on the top of the file.\nimport java.util.Scanner; Using the Scanner Class In main(), we need to first create a Scanner object called sc by calling its constructor (shown below).\nWe want to Scanner to read our input from the standard input stream. To do that we need to pass in System.in(the standard input stream object).\n// Create a Scanner object Scanner sc = new Scanner(System.in); Obtaining User Input In the previous activity, we prompt the user to enter numbers from 1 - 9. Hence, we will be expecting an int from the input stream.\nTo obtain the int the Scanner object stores, we call the method nextInt() on sc, the Scanner object.\nint input = sc.nextInt(); Test Your Program (optional) To test your program, add a print statement to print out the value you store from nextInt().\nTry to run your program, and type in some numbers and click enter. You should see your number being correctly printed out. For example:\n\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' 1 | 2 | 3 ---+---+--- 4 | 5 | 6 ---+---+--- 7 | 8 | 9 Enter your move (1-9): 2 \u0026lt;------- the number you typed in Input Number: 2 \u0026lt;------- Print statement printed the inputted number correctly What happens when user types something that\u0026rsquo;s not a number? When writing programs, we can never expect users to type in the correct values even when it\u0026rsquo;s spelled out in the prompt.\nSince our program only expects an int input, the program will crash when you type in anything that is not an integer, such as: hi, $, 20.1. You will see an error message like the following:\nException in thread \u0026quot;main\u0026quot; java.util.InputMismatchException \u0026lt;------ tells you what error it is at java.base/java.util.Scanner.throwFor(Scanner.java:939) at java.base/java.util.Scanner.next(Scanner.java:1594) at java.base/java.util.Scanner.nextInt(Scanner.java:2258) at java.base/java.util.Scanner.nextInt(Scanner.java:2212) at Main.main(Main.java:15) \u0026lt;------ tells you which line of code causes the error (line 15 in Main.java) Also, note that number inputs that are not in the range 1 - 9 wouldn\u0026rsquo;t crash the program, but these are also inputs we don\u0026rsquo;t want.\n Handling Invalid Inputs with Scanner The Scanner class provides methods that check for valid or invalid inputs. For example, the method hasNextInt will check if the value of the user\u0026rsquo;s input is an integer and returns true or false. This method can be used to ensure that the user\u0026rsquo;s input is valid.\nUse control structures to validate the users input. If the input is not valid, request for the valid input again.\nif(sc.hasNextInt()) { //was an integer entered \tmove = sc.nextInt(); // get integer input  if (!(move \u0026gt; 0 \u0026amp;\u0026amp; move \u0026lt;= 9)) { //is the integer between 1 and 9 \tSystem.out.print(\u0026#34;Invalid Position; re-enter your move (1-9): \u0026#34;); } } else { // if an integer wasn\u0026#39;t entered  sc.next(); // clear the Scanner \tSystem.out.print(\u0026#34;Invalid Input; re-enter your move (1-9): \u0026#34;); } Test Your Program (optional) Test your program by clicking Run, you should see the message Invalid Position; re-enter your move (1-9): if you entered a non-number input, or a number that isn\u0026rsquo;t between 1 through 9.\nTaking Multiple Inputs Now we have a program that takes in one input and evaluates if it\u0026rsquo;s valid, we want to ask the player to do it again until the game ends.\nTo continue prompting the user to enter his/her next move, we put the whole hasNextInt if statement in a while loop. This while loop takes in an argument of true meaning the program will continuing looping until instructed to stop.\nNote that we call printBoard(board) and prompt the user at the end of each iteration, shown below:\nwhile(true){ // insert the hasNextInt() if statement here  // move these into the hasNextInt() if statement  printBoard(board); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); } Handling Invalid Input When a user enters an invalid input, we do not want the program to call printBoard(board) and print Enter your move (1-9): .\nIn other words, we want to program to continue on to the next iteration of in the while loop.\nWe put continue; in the code to indicate the computer to skip back and execute from to the top of the while loop again.\nBy the end of this exercise, you should have a program that prompts you to re-enter for any invalid inputs, and prints out an empty board with the prompt Enter your move (1-9):  for any valid inputs!\n\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' 1 | 2 | 3 ---+---+--- 4 | 5 | 6 ---+---+--- 7 | 8 | 9 Enter your move (1-9): 1 | | ---+---+--- | | \u0026lt;--------------- The board doesn't have the player/computer moves ---+---+--- | | Enter your move (1-9): d Invalid Input; re-enter your move (1-9): 3 | | ---+---+--- | | \u0026lt;--------------- The board doesn't have the player/computer moves ---+---+--- | | Enter your move (1-9): Let\u0026rsquo;s continue on the workshop to see how we should update our game board!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/activity-2/","title":"Variables and Types","tags":[],"description":"Introduce types and variables in Java.","content":"\nVariables: Name It! In the last exercise, we learned to print different statements with System.out.print().\nWhile it\u0026rsquo;s great to print out a number or a sentence, we haven\u0026rsquo;t given them a meaning.\nIn Java, we introduce the idea of a variable for data. A variable is like a box that stores a piece of data with a name.\nFor example, there can be a variable called myName that stored \u0026quot;Patrick\u0026quot;, another variable called loveMusic that stored true, and another variable called age that stored 3. Just like the image below:\n\u0026lt;img src=\u0026rdquo;../images/variable.png\u0026rdquo; height=\u0026quot;200\u0026rdquo; alt=\u0026quot;3 boxes. The first box has white text outside, myName, and white text inside, \u0026lsquo;Patrick\u0026rsquo;. The second box has white text outside, loveMusic, and white text inside, true. The third box has white text outside, age, and white text inside, 3.\u0026rdquo; / \u0026gt;\nWhat the Type! So how do we create these boxes or variables in Java to store data?\nBefore learning how to create variables, we need to learn the concept of type in Java. Type in Java describes what is being stored in the box. If you have an integer box, it will only contain integers, not sentences or symbols. Each variable has its own type that restricts it to store a specific kind of data.\nFor example, the variable called age that stores the number 3 should contain contain integers, not sentences or symbols.\nIn Java, for a variable to store whole numbers, it is type int. And, we declare an int variable called age with data 3 with the line of code:\nint age = 3; In general, to declare a variable we write them in the format: [data type] [variable name] = [data];.\nThe following are the important data types that have been built-in in Java:\n   Type Description Examples     int integer 20, 30, 35   char character such as a symbol or a single alphabet letter 'A','b', '(', ']'   String a sequence of char \u0026quot;Hello\u0026quot;, \u0026quot;Bonjour\u0026quot;, \u0026quot;Hola\u0026quot;   boolean has a value of either true or false true, false   double fractional numbers 2.0, 3.14, 9.33   \n Let\u0026rsquo;s revisit the three variables we talked about and identify their data types.\nTo declare these variables in Java, we type the following:\nString name = \u0026#34;Patrick\u0026#34;; int age = 10; boolean loveMusic = true; What the Type \u0026ndash; Help Patrick! Patrick 🐥 isn\u0026rsquo;t a master of data types! He often mixed them up when declaring variables. Let\u0026rsquo;s help him fix his mistake:\n By storing data in variables, you can use that data later or change it by assigning it to a different data of the same type. For example:\nint age = 10; System.out.println(age); // prints out 10 age = 11; // assign data 11 to the variable age System.out.println(age); // prints out 11 \n What the Type \u0026ndash; Track Numbers! Now consider the following code. What do you think the output is? Track the values of each variable by yourself then test it out below!\ndouble x = 2.3; double y = 10.0; int z = 4; x = y; y = x; z = 0; z = z; System.out.println(\u0026#34;x: \u0026#34; + x + \u0026#34; y: \u0026#34; + y + \u0026#34; z: \u0026#34; + z );  Explaining the example In lines 1-3 we declare the variables and set the initial values for x (2.3), y (10.0), and z (4). In line 4, we set x to the value of y (10.0). In line 5, we set y to the value of x, which was just set to 10.0 (10.0). In line 6, we set z to 0. In line 7, we set z to the value of z, which is 0 (0).\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/app-structure/","title":"Game Application Structure","tags":[],"description":"","content":"Back to Foundations Now that the game has the right title, let\u0026rsquo;s dive deeper into all these files in the game folder. What do they all mean? How does it contribute to the game? AndroidManifest.xml Every project in Android includes a manifest file. For your game, this is the AndroidManifest.xml file. The manifest file defines the metadata for your game, for instance, it can define the icon and the overall theme for your game application.\nactivity_main.xml This file is located under the \u0026ldquo;layout\u0026rdquo; folder. As the folder name states, files in this folder define how your application looks. If you look at the code for activity_main.xml, you will see keywords such as TableLayout or TableRow. The combination of keywords in the activity_main.xml file create the layout for the game chooser buttons (Player vs Player or Player vs Computer), the tic-tac-toe board, and the reset button. The TableLayout keyword says the layout will be aligned to a table style, which includes columns and rows. TableRow keyword creates a new row in the layout, with each additional element corresponding to a spot in that row: MainActivity.kt This file is located under the \u0026ldquo;java\u0026rdquo; folder. The file contains the code and logic for your application.\ncolors.xml, strings.xml, styles.xml These files are located under the \u0026ldquo;values\u0026rdquo; folder. The files contain values that can be referenced by other XML files and application code.\nPutting it Together All these files work together to create your game. The activity_main.xml file decides what is shown to you. When you click on the buttons, events are sent from the activity_main.xml to the MainActivity.kt to determine what happens on that button click. For repeatable values, activity_main.xml and MainActivity.kt can reach out to colors.xml, strings.xml, or styles.xml to use those values from one convenient location.\n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/launch-vm/","title":"Starting up the Virtual Machine","tags":[],"description":"Continuing the introductory guide to using virtual machines","content":" Now that everything is installed, let\u0026rsquo;s launch the virtual machine!\nStarting the VM This is pretty simple using VirtualBox. Just double click on the VM that we created in the previous step and off you go! As the virtual machine is getting started there may pop up some warnings like in this image. It is safe to ignore these.\nSign into the VM First you will need to log in. Use these credentials to get started!\n   Username Password     nuvi nuevo123    The above is not good password security! It is simple just for this workshop.\nPlease do not use simple passwords like this for your accounts!\nLearn more about passwords in the security workshop!\nSecurity Workshop link  The Terminal All our activities will be practicing command-line interface (CLI) skills. It is good to learn the CLI because it can be faster and more efficient than using a GUI. GUI is the graphical user interface, which is probably what you are most used to using. Go ahead and open up the terminal, another name for the CLI. In Kali this application is called the \u0026ldquo;Terminal Emulator\u0026rdquo;.\nAfter clicking the button, the terminal should open like the image below. Once it is open, you are ready to get started with Linux!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/activity-2/","title":"Activity 2 - Displaying RGB Color values for images","tags":[],"description":"","content":" You now take a picture of your shoe from your samples.\nGo ahead and copy and paste the following code into your Google Colab notebook:\nplt.figure() plt.imshow(train_images[0]) #Shows the first image in the data set as a plot or different colored pixels plt.colorbar() #displays the color bar on the right plt.grid(False) plt.show() #displays the entire plot Question 1 Change the index of the “train_images[x]” and look at the color bar on the right, what is the max pixel value?  Question 2 After analyzing the shoe, you now take another clothing item from your sample and do the same thing. Change the index value to whatever you like so you have a different item. Save this value for later as you will use this in Activity 6.\nFor example, if you input the index value as 7, you get the following item:  Copy the following code onto Google Colab: In order to maintain consistency between the training and testing set data, we will divide these values by 255.\n#the train_images and test_images range between values from 0 to 255.  #To maintain consistency between the training and testing set, we will divide train_images and test_images by 255 train_images = train_images / 255.0 test_images = test_images / 255.0 "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-3/","title":"Activity 3: Challenge: Design new elements","tags":[],"description":"","content":" Using loops, you can actually design your own elements on the colorboard. You can design your own logo or anything you want on this color board. Here is an example we provided for you.\nExample: make an N. #This creates the original colorboard. from PIL import Image img = Image.new(\u0026#39;RGB\u0026#39;, (60, 30), \u0026#39;white\u0026#39;) #This uses nested while loop to change the colorboard. #Left vertical line for x in range(10, 15): for y in range(5, 25): img.putpixel( (x,y), (0, 0, 0)) #Right vertical line for x in range(30, 35): for y in range(5, 25): img.putpixel( (x,y), (0, 0, 0)) #Central diagonal line for y in range(5, 25): for x in range(10+(y-5), 15+(y-5)): img.putpixel( (x,y), (255, 211, 0)) img.save(\u0026#39;pixel-activity3.png\u0026#39;) output: Design your own element! You can actually design some easy letters, such as H, K, T and etc. You can change the color of a certain part of those letters in order to make it prettier.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/","title":"Python: Pixel Activties","tags":[],"description":"","content":"In this section, we will utilize what we have learnt to have fun with pixels and images!\nPixel Activities  Activity 1: Create a color board \n   Activity 2: Modify your color board \n   Activity 3: Challenge: Design new elements \n   Activity 4: Create Basic Filter \n   Activity 5: More advanced filters \n   Activity 6: Crop Image \n   Activity 7: Change the background of image \n   Activity 8: Flip your image \n   Activity 9: Rotate your image \n   Activity 10: Making a meme! \n   Activity 11: Challenge: Make your own image \n   "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/phaser-fundementals/","title":"Phaser Fundamentals","tags":[],"description":"","content":"Part 1: The Config Variable Let\u0026rsquo;s go over some of the fundamentals of Phaser, a game framework that uses HTML and JavaScript to create games for the web! This is what you\u0026rsquo;ll be learning to use in this workshop.\nGo to game.js. Every Phaser game will start out off with a variable that stores the configurations for the game (often named config like we have here).\nvar config = { type: Phaser.AUTO, width: 512, height: 544, backgroundColor: 0x000000, scene: [Scene1, Scene2], physics: { default: \u0026#39;arcade\u0026#39;, arcade: { gravity: { y: 0 }, debug: false } }, }; In this variable, you\u0026rsquo;ll notice that we have defined a variety of characteristics of our game like the width, the height, and background color. We have also defined the scenes that we will be using (more info on scenes a bit later). You can also create a game without scenes and simply put all of the code into the game.js file.\nYou\u0026rsquo;ll also notice that we define the physics of the game in Config as well. In game design, physics is one of the most essential aspects that define the \u0026ldquo;feel\u0026rdquo; of a game. For example, the bouncy physics in Mario distinctively makes it \u0026ldquo;feel like Mario.\u0026rdquo; For our game, you can see that we use \u0026ldquo;arcade\u0026rdquo; physics, a type of physics in Phaser that is very simple to use. Also notice that in our Physics, we define Gravity to be 0, because our game is a Space Shooter so we don\u0026rsquo;t need any gravity pulling our characters down.\nAt the end of game.js, you can see that we pass the config variable to a game variable, something that is also almost always needed in a Phaser game.\nPart 2: Scenes Now, let\u0026rsquo;s finally talk about scenes a little bit. A scene is essentially a game state that the user is operating within. It\u0026rsquo;s best understood within an example:\nLet\u0026rsquo;s take the famous game franchise, Pokemon. When you play, you\u0026rsquo;ll often be roaming around the world. When you encounter a trainer or a wild Pokemon in the tall grass, you enter a different scene so that you can battle. After you finish the battle, you may pull up your map to see where you need to go - this is also opening a different scene. These three scenes function completely different and have their own mechanics attached. When you log out of the map, the game switches scenes to the world where you roam as the player. And once you get into battle, you switch to the battle scene. You can see how creating these three game states would be completely different - the battle requires a menu, the world requires a 2D space and a player, and the map is essentially an interactive chart. We separate these into scenes because they all have to be created completely differently.\nYou can think of the user as moving amongst scenes as they play the game. They only use one scene at a time, and each one is almost like its own mini-game (although there will usually be one main one that isn\u0026rsquo;t quite \u0026ldquo;mini\u0026rdquo;).\nTechnically, we could use a single scene for all three of these game states if we wanted to (how you divide a game into scenes will be up to the game designer). It is physically possible to do so. However, creating separate scenes will make the coding significantly easier (in this case, I can\u0026rsquo;t even imagine how you could cram them into one without simply placing the visuals of one on top of another).\n Here is another example of a very common way to use scenes: a title screen.\nThe first scene displays simply a title screen that often contains things like settings, loading a save file, and more. Once the player clicks play, they are switched to a different scene, where they\u0026rsquo;ll play the game within.\nThis is exactly what we\u0026rsquo;re going to be doing. Scene 1 will contain a title screen, and Scene 2 will contain our actual gameplay. Thus, Scene 2 will have the majority of the code, and it\u0026rsquo;ll be where you will do most if your work.\nPart 3: Infinite Canvas When you start up the game on the repl.it, you can see a blank canvas on your screen where you will eventually place things onto. However, you are only seeing a part of the total canvas - actually, the canvas is infinite in all directions. The canvas behaves the same way in all sections - this means that objects can move and be placed into parts of the canvas that the user cannot see. This will become important because for our game, we don\u0026rsquo;t want things really going out of the screen very much, so we need to bind our objects within the screen or delete them if they exit.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/2d-arrays/","title":"2D Arrays: The Menu","tags":[],"description":"","content":"--  Now that all of our restaurants are neatly sorted in an array for our customers to view, we now need to give the customers access to the menu items of each restaurant! To accomplish this, we will venture into the world of multidimensional arrays!\nTopics  Introduction \n   The Menu \n   Examples \n   Problem 1: Example Menu \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-types/booleans/","title":"Booleans","tags":[],"description":"","content":"Booleans are True or False statements. Unlike strings or numbers, booleans store statements of truth: is what I\u0026rsquo;m saying true or false?\nFor example, if I say, \u0026ldquo;You are a robot\u0026rdquo;, a boolean can store whether this statement is true. In this case, since you are not a robot (hopefully!), False would be stored.\nWhat are the boolean answers to these questions about you?\n I am a human. _______ I have 25 fingers. _______ I like cookies. _______ My favorite color is blue. ______     Operator Description Operator Description     \u0026lt; Less than \u0026gt; Greater than   \u0026lt;= Less than or equal to \u0026gt;= Greater than or equal to   == Equal to != Not equal to    Challenge 1 As usual, use print to print out your results to the following:\nprint(5 + 8 \u0026lt; 10) print((3 + 5) * 6) == (65 - 17) The first statement should return False. And the second should return True.\nChallenge 2 Try printing out the answers to the following expressions using print. If the results for any of these statements don\u0026rsquo;t make sense, please ask for help!\n 54 \u0026lt; (10 + 32) (37 / 5) != 7 \u0026ldquo;Hello\u0026rdquo; + \u0026ldquo;World\u0026rdquo; == \u0026ldquo;Hello World\u0026rdquo; False == False  Challenge 3 Try making your own expressions!\nFun Fact: Connecting Booleans with AND and OR operators You can also connect boolean expressions together using the AND and the OR operator. Here\u0026rsquo;s a chart that describes what happens when we connect booleans together:\n   Expression Result     True and True True   True and False False   False and True False   False and False False   True or True True   True or False True   False or True True   False and False False    To summarize, AND requires both boolean expressions to be true, while OR only requires one of the two Boolean expressions to be true. Here are some more examples:\n (5 \u0026lt; 8) and (9 != 10) produces True since both 5 is less than 8 and 9 is not equal to 10. (8 \u0026lt;= 2) or (\u0026ldquo;h\u0026rdquo; + \u0026ldquo;e\u0026rdquo; == \u0026ldquo;he\u0026rdquo;) produces True since \u0026ldquo;h\u0026rdquo; + \u0026ldquo;e\u0026rdquo; results in \u0026ldquo;he\u0026rdquo;, even though 8 is not less than or equal to 2. (6 != 2 * 3) or (8 \u0026lt; 2 * 4) produces False since both 6 not equal to 2 * 3, and 8 being less than 2 * 4, produce False.  What do you think the following expressions produce?  (11-2 \u0026lt; 10) and (7+3 \u0026gt; 10) (True or 3 \u0026lt; 1) and (False or 3\u0026gt;1)  "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/2d-arrays/examples/","title":"Examples","tags":[],"description":"","content":"--  2D arrays work very similarly to regular arrays, and many of the ideas or methods that we use on arrays apply to multidimensional arrays as well. As a quick reminder, here is how to initialize a 2D array and access an element:\npublic static void main(String[] args) { int[][] arr = new int[10][20]; arr[0][0] = 1; System.out.println(arr[0][0]); } //outputs 1 The only hard part that might not make a whole lot of sense at first is iterating through a 2D array, but this is quite simple as well. Instead of a single for loop, we will use two for loops instead. Here is a quick example to give you an idea.\npublic static void main(String[] args) { int[][] arr = new int[10][20]; int num = 0; for (int i = 0; i \u0026lt; arr.length; i++) { for (int j = 0; j \u0026lt; arr[i].length; j++) { arr[i][j] = num; num++; } } } As you can see, we create an empty array called arr. In it, we have 10 arrays, each with 20 elements respectively. To iterate through all the arrays, we use a standard for loop just like how we would a normal array. However, the only difference is that we now need to create a second for loop that iterates through the ith array. In this example, we simply set arr[i][j] to num and num++.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/introduction/prerequisites/","title":"Prerequisites","tags":[],"description":"","content":"\n-- Variables Before you start this workshop, you should have some prior knowledge of how Java variables work and how you can create them. Click here to review Java Basics workshop! Don\u0026rsquo;t worry if you still feel a little shaky! We\u0026rsquo;ll slowly introduce you to these topics at hand. However, if you have no idea what variables are, we strongly recommend you to go ahead and finish the java basics workshop beforehand.\nFor Loops If you know what for loops are and how to use them, feel free to skip the next section.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/queues/problem-1/","title":"Problem 1: Queue Basics","tags":[],"description":"","content":"-- Task 1: Clearing Queue for New Orders A new restaurant has been added into Nuevo Eats! New orders have been flooding in and the Queue is flooded with orders! The popularity of the different tacos grew fast and the restaurant is overloaded. Look for a way to clear all elements to save the restaurant!\n How can you iterate through the list? Try to clear the Queue as you go through it! Look at the example menu! \n //this uses a list as the organizer of the queue. \tQueue\u0026lt;String\u0026gt; orders = new LinkedList\u0026lt;\u0026gt;(); orders.add(\u0026#34;Fish Taco\u0026#34;); orders.add(\u0026#34;Beef Taco\u0026#34;); orders.add(\u0026#34;Chicken Taco\u0026#34;); orders.add(\u0026#34;Fish Taco\u0026#34;); orders.add(\u0026#34;Beef Taco\u0026#34;);  Task 2: Using Priority Queue to find median price A restaurant has been using Arrays to hold their list of prices and has a hard time organizing it. They want to switch to a priority queue to make finding the median easier (recall that the median of a list is its middle value). Turn this array into a priority queue! Then find the median price.\n How do you initialize a priority queue? How do you find the median? \n String[] prices = {1,5,6,14,7,9,11,2,3} "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/stacks/problem-1/","title":"Problem 1: Stack Basics","tags":[],"description":"","content":"-- Task 1: Reversing Using Stack Oh no! A new intern was hired and messed up the list of restaurants! The inputs of the restaurants are in reverse order! Luckily the stack is the perfect data structure for this. Can you create a new stack in the correct order?\n Remember the stack is Last In First Out (LIFO; think of a stack of plates). How does the original stack look like? \n //example of current stack  Stack\u0026lt;String\u0026gt; restaurants = new Stack\u0026lt;\u0026gt;(); restaurants.push(\u0026#34;McDonalds\u0026#34;); restaurants.push(\u0026#34;Carls Jr.\u0026#34;); restaurants.push(\u0026#34;Burger King\u0026#34;); restaurants.push(\u0026#34;Chipotle\u0026#34;);  Task 2: Keeping History Another practical use of the stack is the undo function. Many programs these days include an undo button to keep track of the most recent changes. The stack is the perfect data structure for this! Can you create a function to undo the recent change? For an example:\n//example of current stack  Stack\u0026lt;String\u0026gt; myOrder = new Stack\u0026lt;\u0026gt;(); restaurants.push(\u0026#34;Drink\u0026#34;); restaurants.push(\u0026#34;Fries\u0026#34;); restaurants.push(\u0026#34;Pizza\u0026#34;); restaurants.push(\u0026#34;Pizza\u0026#34;); //User ordered an extra pizza! how can you undo the recent change?  Stack.undo() //remove the most recent push  Task 3: Clearing Stack Oh no! The intern has unfortunately randomly messed up the code and the stack is filled with useless information! Can you help him clear the stack so the intern can start over?\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arraylists/problem-1/","title":"Problem: Insertions, Accesses, and Removals","tags":[],"description":"","content":"\n-- Task 1: Insertion Tacos Truck is now available down the street! New employees are struggling to get keep track of all the different orders. Help them organize all the items using ArrayLists!\n/* Dan is ordering from his favorite taco shop: - 2 orders of \u0026#34;carne asada\u0026#34; - 4 orders of \u0026#34;carnitas\u0026#34; - 1 order of \u0026#34;pollo\u0026#34; - 2 orders of \u0026#34;birria\u0026#34; Return an ArrayList of all of these elements in that order */  How can you add items onto the list? What does Dan want in the order? \n  Task 2: Getting elements A restaurant selling Chinese food has just opened nearby. A huge number of orders has just come in and the manager has trouble keeping track of everything, so they have put it all in an ArrayList. Help finish the program to return the given string at a given index.\nArrayList\u0026lt;String\u0026gt; menu = new ArrayList\u0026lt;\u0026gt;(); menu.add(\u0026#34;Pizza\u0026#34;); menu.add(\u0026#34;Hotdog\u0026#34;); menu.add(\u0026#34;Hamburger\u0026#34;); menu.add(\u0026#34;Hotdog\u0026#34;); //if we run the code  item = find(menu, 0); //find will return since it is the 0th item in the menu  item = \u0026#34;Pizza\u0026#34;  How can you iterate through the list? Look at the example menu! \n  Task 3: Removing Elements The same Chinese restaurant has a bug in their code! Orders have been duplicated randomly and the ArrayList are filled with copies of orders. Help the owner out by writing a program to remove the first n occurrences of a given order in the ArrayList.\nArrayList\u0026lt;String\u0026gt; menu = new ArrayList\u0026lt;\u0026gt;(); menu.add(\u0026#34;Pizza\u0026#34;); menu.add(\u0026#34;Hotdog\u0026#34;); menu.add(\u0026#34;Hamburger\u0026#34;); menu.add(\u0026#34;Pizza\u0026#34;); menu.add(\u0026#34;Pizza\u0026#34;); menu.add(\u0026#34;Hotdog\u0026#34;); //if we run the code  item = find(menu,\u0026#34;Pizza\u0026#34;, 2); //find will remove the first two Pizza orders  menu = {\u0026#34;Hotdog\u0026#34;, \u0026#34;Hamburger\u0026#34;, \u0026#34;Pizza\u0026#34;, \u0026#34;Hotdog\u0026#34;}  "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/steps-to-start/","title":"Starting up","tags":[],"description":"","content":"Open the Activity-1 Scaffold URL to do the activity. https://repl.it/@nuevofoundation/JSappyBird-Activity-1-Scaffold\nWhen you make changes to the scaffold you will be created as anonymous users.\nYou should see something like the following screen:\n"},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/putting-together/","title":"Putting it together","tags":[],"description":"","content":"Putting it together For your browser to understand what each element of your site is, we need to label them with HTML tags. HTML stands for Hypertext Markup Language. Tags are words surrounded by the symbols \u0026lt;and\u0026gt;. For example, the \u0026lt;img\u0026gt; tag tells your browser “this is an image.” The \u0026lt;button\u0026gt; tag tells it “this is a button.”\nTags can also be used to organize your webpage! The image below outlines the structure of a basic webpage. The head usually contains the additional libraries used and the page title, while the body contains most of the displayed content.\nMost tags need an opening tag and a closing tag. For example, you will see all pages have an \u0026lt;html\u0026gt; opening tag at the top, and a closing \u0026lt;/html\u0026gt; tag at the end. This tells the browser where the HTML elements start and where they end. Think of tags like quotation marks; for example, the computer will understand that everything in between the tags \u0026lt;html\u0026gt; and \u0026lt;/html\u0026gt; is part of an HTML website.\nThere are also a few tags, like the image tag \u0026lt;img\u0026gt;, that are self-closing, meaning that they only need an opening tag, and do not need a closing tag.\nHere is an example:\nSee the Pen HTML Basics by Deliana Escobari (@Sunny-Dee)\ron CodePen.\r\r"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-1/","title":"Activity 1 - Define the width of the Pong screen","tags":[],"description":"","content":"Activity 1 You can adjust the boundary of the Pong game by adjusting the height and width of the rectangle that represents the boundary.\nGo to the code containing the Pong game. Press run. Notice that the game\u0026rsquo;s boundary doesn\u0026rsquo;t look right - see the image below. Let\u0026rsquo;s fix this in this activity, so the game boundary looks good.\nFind // TODO (ACTIVITY 1) in the code. Modify the WIDTH attribute of Pong class. If you did this correctly, the boundary problem will be fixed. Press run and observe the result.\nTry changing the values for height and width to see the effects of different values on the game\u0026rsquo;s boundary.\n  Takeaway You have just modified one of the attributes in Pong class to influence how the game will look on screen.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/functions/built-in-math/","title":"Built-in Math Functions","tags":[],"description":"","content":"Python provides a number of important built-in functions that we can use without needing to provide the function definition. In this section, we will learn about some of the built-in math functions using that you can perform mathematical tasks on numbers.\nThe max() and min() functions give us the largest and smallest values in a list, respectively:\nx = min(20, 10, 50, 25)\t#x = 10 print(x) y = max(20, 10, 50, 25)\t#y = 50 print(y) The abs() function give us the absolute(positive) value of number:\nx = abs(-34)\t#x = 34 print(x) y = abs(90)\t#y = 90 print(y) The pow(a, b) function give us the value of a raised to the power of b (ab):\nx = pow(3,4)\t#x = 81 print(x) Challenge Let’s put it all together! Let’s see if we can create a program that takes 5 numbers from the user and prints the value of minimum of those numbers raised to the power of maximum. For example, given the number 2,7,4,11,9, return 211.\n "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/hashmaps/problem-2/","title":"Problem 2: Making your own menu!","tags":[],"description":"","content":"-- Task 1: Making Menu A new member of Nuevo Eats is struggling to create their own menu. Help create the menu! Each item should have a header (e.g. appetizer, Main dish, sides, drinks, etc.) as well as a price and name of the food. Be creative and make it how you want your Neuvo Eats to look!\n What data structures do you want to use? Be creative! What are some of your favorite dishes? \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-1/","title":"Activity 1 - Drawing a square","tags":[],"description":"","content":"\nKudos! You helped Alex draw a line! Now let’s step it up and help Alex draw a square. To draw a square, we need to follow these steps:\n Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps  Remember to use turtle.forward() to draw lines. To turn 90 degrees left, you need to pass 90 as the argument to the turtle.left() method:\nturtle.left(90)  "},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/activity-2/","title":"Activity 2 - How to Create and Store your Menu","tags":[],"description":"","content":"Pre-reqs  Lists  How to Create and Store your Menu Now that we have a banner for your restaurant, let\u0026rsquo;s start thinking about how to organize the information about your dishes. Remember how earlier you decided what foods and beverages you wanted to sell at your restaurant? Well, now we need to figure out how to store all of that information. We need to store the name, price, and description of every item on your menu. In order to do this, we can use what\u0026rsquo;s called a Python dictionary to keep track of this information.\nWe\u0026rsquo;re going to have a dictionary where the values are Lists! By doing this, we can have the price of the item and the description of the item available to us. When we have a list or another container as a value to a key in a dictionary, we end up with a nested dictionary. Since we need to hold both price and description info, we need to store it in our lists in a specific order.\nHere\u0026rsquo;s the structure we\u0026rsquo;ll use: {item : [price, description]} By making sure to follow this structure when creating the nested dictionary, we can ensure that accessing the price and description later will be simple.\nHere\u0026rsquo;s a sample nested dictionary, but remember to apply the structure from above when making your menu!\n#structure #{word:[meaning, partOfSpeech, pronounciation]} smallDictionary = {\u0026#39;toy\u0026#39;:[\u0026#39;an object kids play with\u0026#39;, \u0026#39;noun\u0026#39;, \u0026#39;toi\u0026#39;], \u0026#39;walk\u0026#39;:[\u0026#39;a way to move at a regular and slow pace, one foot lifted after the other, in sequence\u0026#39;, \u0026#39;verb\u0026#39;, \u0026#39;wok\u0026#39;]} Go back to the Repl.it link from earlier and add in code that will store your menu in a variable named dictMenu. Remember to make dictMenu a global variable - don\u0026rsquo;t put it in the main() function, rather place it at the top of your code so that it can be accessed by any function. Hint: Your price is a float, and your description is a string.\nPick your 5 favorite foods/drinks to be in your menu. For example: Creamy Pesto Pasta, Caesar Salad, Pink Lemonade, Root Beer, Iced Tea, Carrot Cake, Spring Rolls\n"},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/activity-2/","title":"Activity 2 - Variables and Inputs","tags":[],"description":"","content":"Awesome! Now let\u0026rsquo;s go a step further. We will now not only print the message, but input the name of the receiver and make our program say \u0026ldquo;Hello\u0026rdquo;.\nTo do that we will need variables.\nVariables A variable is a container that stores information. There are many kinds of variables, each storing different types of information:\n string: represents a sequence of characters, letters, numbers, and symbols. strings are always wrapped in double quotes. Examples: \u0026quot;hello\u0026quot;, \u0026quot;1,2,3\u0026quot;. int: represents positive or negative integer numbers. Examples: 1, 100, -250. char: represents a single character. Examples: 'A', 'e', 'I'. chars are always wrapped between single quotes. bool: represents either a true or false value.  To create a variable, declare it as follows:\nint number = 10; Let\u0026rsquo;s look at this line of code in more detail:\nWe first need to specify the type of information that will be stored inside that variable. In this case, it will be of the int type. Then we need to declare the name of the container; in this case, we will name our variable number. Finally we specify the value that the container will hold; in this case 10. We end with a semicolon to indicate that the line is complete.\nWe can now use the variable number inside the program to reference the stored number. If we would like to print its value, we would use the following line of code:\ncout \u0026lt;\u0026lt; \u0026quot;The number is: \u0026quot; \u0026lt;\u0026lt; number \u0026lt;\u0026lt; endl; Running this line of code, the console will print:\nThe number is: 10 \n We can use cout to print words, numbers or variables. If we would to print more that one thing, we would have to add \u0026lt;\u0026lt; between each term: Example:\nint hour = 13; cout \u0026lt;\u0026lt; \u0026quot;It is \u0026quot; \u0026lt;\u0026lt; hour \u0026lt;\u0026lt; \u0026quot; in the afternoon\u0026quot; \u0026lt;\u0026lt; endl; This will print:\nIt is 13 in the afternoon. \n Next, we\u0026rsquo;d like the recipient of the message to be able to write his or her name to the console, (which we will be storing inside a variable), and the program to say \u0026ldquo;Hello\u0026rdquo; to him or her.\nTo input the name we will be using the following code:\nstring name; cin \u0026gt;\u0026gt; name; Let\u0026rsquo;s dig into this line of code.\nConsole Input Similar to how we can print to console using cout, we can input data into the console by using cin, and specifying the name of the variable in which the input will be stored.\nIn the previous example we are stating that whatever data we input, it will be stored inside the variable name.\nThat being said, if we input:\nQueen Then the variable name will store the string \u0026quot;Queen\u0026quot;.\n Now it\u0026rsquo;s time to begin with our program.\nThese are the steps to follow for this activity:\n Declare a string variable named name. Use cin to request input from the user, and store the inputted data into the name variable. Print to console \u0026quot;Hello (name)\u0026quot;, where (name) should be replaced by the value of the name variable. Click Run. Type in \u0026quot;Queen\u0026quot; as the name of the recipient in the console tab, and make sure you get \u0026quot;Hello Queen\u0026quot; as output from the console.   HELP! If after clicking the Run button, an error message in red appears, it means that there is something wrong with your code. Please ask for help from your instructor.\nYou should also check for the following\n Ensure the spelling, capitalization, and symbols used match with the example given. Make sure that you add a semicolon at the end of each line of code. Remember that all strings must be between quotation marks. All the code that you write need to be within the brackets {} in the int main function.   "},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/activity-6/","title":"Activity 6 - Show the Customer their Receipt","tags":[],"description":"","content":"Show Customer their Receipt Yay! You\u0026rsquo;ve calculated the price of the customer\u0026rsquo;s order, now we just need to display it as a Receipt. Below is an example that would work. Display all of the items ordered by the customer, the price per item, and the total price.\n\u0026mdash;\u0026ndash;Receipt\u0026mdash;\u0026ndash;\nSpring Rolls $16.0\nCreamy Pesto Pasta $15.99\nTotal Price: $31.99\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/activity-7/","title":"Activity 7 - Thank the Customer for their Business","tags":[],"description":"","content":"Thank Customer for their Business Include an ASCII art pic that will pop up on the console.\nThank the customer for ordering from your restaurant by displaying another text to ASCII art image like \u0026ldquo;Thank you!\u0026quot;, \u0026ldquo;Come again soon!\u0026quot;, \u0026ldquo;Bon Appetit\u0026rdquo;, or anything else along those lines by using the same art generator we used when printing out the restaurant banner.\nHere\u0026rsquo;s the link to the ASCII art generator for your convenience :) https://onlineasciitools.com/convert-text-to-ascii-art\n"},{"uri":"https://nuevofoundation.github.io/workshops/microbit-distance-checker/receiving/","title":"Receiving a Message","tags":[],"description":"","content":"Now that we\u0026rsquo;re sending messages and listening for them, we need to use that information to find out how close together or far apart our micro:bits are. To do that, we need to know how strong the signal we\u0026rsquo;re receiving is. Go back into the Radio section and this time drag the \u0026ldquo;on radio received (receivedNumber)\u0026rdquo; block and drag it to an empty spot on your workspace. It should not be inside of any other block.\nThis block tells our micro:bit to do something whenever it gets a number sent to it from another micro:bit.\nNext, click on the red Variables section then click on \u0026ldquo;Make a Variable\u0026hellip;\u0026quot;. In the text box, type in \u0026ldquo;strength\u0026rdquo; as the name for your new variable, then click \u0026ldquo;Ok ✔\u0026rdquo;.\nNow, go back to the Variables menu and drag \u0026ldquo;set strength to 0\u0026rdquo; inside of the pink \u0026ldquo;on radio received (receivedNumber)\u0026rdquo; block. Then go back to the Radio menu and drag \u0026ldquo;received packet (signal strength)\u0026rdquo; on top of the 0️ in \u0026ldquo;set strength to 0️\u0026rdquo;. When you\u0026rsquo;re done, your workspace should look something like this:\nVariables are simply places we can store information with a friendly name to make it clear what\u0026rsquo;s stored inside. So, by creating a variable called strength, what we\u0026rsquo;re doing is setting aside some space to store a value, in this case the measured signal strength from the message we received. We can then simply use the name strength anywhere we want to check the current value inside or compare it against something else. If we get a new message later with a stronger or weaker signal, the value of strength gets updated to that new value automatically. Hence the \u0026ldquo;on radio received\u0026rdquo; block: every time we get a new message, the value of strength is updated to the latest signal strength without you having to do anything manually.\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/comments/","title":"Comments","tags":[],"description":"","content":"Comments Developers often need to collaborate with other developers. Comments are an easy way for developers to write notes in the code and communicate with others. Comments are ignored by the computer; thus, they are also an easy way to tell the computer to not run certain lines of code. There are two ways to create comments:\n To comment out one line, place // in front of a line of code. For example:  // This is a single-line comment. To comment out multiple lines at once, indicate the start of the comment with /* and the end of the comment with */. For example:  /* This is a multi-line comment. This line is also part of the comment. */ To remove a comment (or uncomment a line), simply delete the // for a single-line comment, or the /* and the */ characters for the multi-line comment.\nWorking Together  Place // in front of Console.WriteLine(\u0026quot;Hello World\u0026quot;);. After pressing run, check to make sure that Hello World is not printed to the console. Delete the // and instead, surround Console.WriteLine(\u0026quot;Hello World\u0026quot;); with /* and */. Check that Hello World is still not printed to the console after pressing run. Delete both /* and */, and press run. Hello World should now be printed to the console.   Throughout today\u0026rsquo;s activity you will see various multi-line comments and // TODO comments. These comments will guide us towards completing the Guess the Word game, so be sure you understand how to comment and uncomment code.\n "},{"uri":"https://nuevofoundation.github.io/workshops/adventure/story-board-code/","title":"Section 2: Transferring the Story Board to Code!","tags":[],"description":"","content":"It’s time to open repl.it. Now it is time to create, let’s get creative!\nYou can continue working off Nuvi’s story line:\n You can work on a template for a Choose Your Own Adventure game:\n Or you can start from scratch and make it your own! Just go to repl.it and start story telling!\n"},{"uri":"https://nuevofoundation.github.io/workshops/security-phishing/a-closer-look/","title":"A closer look","tags":[],"description":"","content":"Bob received the following email the other night.\nWhat do you think is suspicious here? Let\u0026rsquo;s analyze the email: The sender's email address is suspicious and you don't know this email sender personally.\n Lucrative offer in the subject line suggests it's too good to be true.\n  You received an email during irregular business hours.\n These words show a sense of urgency.\n The sender is asking you to click on a link or open an attachment that you don't know about. The URL or the link has a spelling error which is hard to notice.\n After explaining all of this, Alice asked Bob to change all his passwords and bank account login credentials to be safe. Thankfully, the attacker Eve had not yet acted on the information given by Bob and he was safe.\n"},{"uri":"https://nuevofoundation.github.io/workshops/security/activity/","title":"Activity","tags":[],"description":"","content":"Let\u0026rsquo;s play a game!\nWrite your favorite sentence in the text box below. Make sure it has at least five words. (E.g. I like playing volleyball at the beach.)  Now take the first letter of each word from the above sentence and write inside the text box. (E.g. ilpvatb)  Add some numbers to the text. Remember the position of the numbers. (E.g. 1ilpvatb6)  Finally, let's add some special characters to the text. (E.g. 1ilpv$atb6)   Voilà that\u0026rsquo;s your new password! Doesn\u0026rsquo;t it look hard to crack? Success!  "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/colors_and_pixels/basic-of-colors/","title":"Basics of colors","tags":[],"description":"","content":" Basics of Colors While going through all kinds of pictures online, have you ever questioned how those pictures get their colors? Actually, computers have RGB mode to represent colors.\nRGB format In Python, we follow a specific format when defining colors: (R, G, B), where \u0026ldquo;R\u0026rdquo;, \u0026ldquo;G\u0026rdquo;, and \u0026ldquo;B\u0026rdquo; are all integers. \u0026ldquo;R\u0026rdquo; represents some amount of red, \u0026ldquo;G\u0026rdquo; represents some amount of green, and \u0026ldquo;B\u0026rdquo; represents some amount of blue.\nThe color represented by (R, G, B) is what we get from \u0026ldquo;the mix of\u0026rdquo; different amounts of red, green and blue.\nYou can click the line below and choose the colors you want on the color board to observe their RGB values: What do we mean by the \u0026ldquo;mix of colors\u0026rdquo;?\nHere we are using different amounts of red, green and blue light to get a new color of light. Just like we use different amounts of pigments while painting, we are mixing different amounts of lights to create different colors of light. Pigments use the primary colors of red, yellow and blue, whereas computers use primary colors of red, green and blue light.\nThis picture represents very approximately how colors mix up: Just as we should not use too much pigments, there is also limitation for represent colors. The maximum integer we can use to represent each amount of color is 255 and the minimum integer we can use to represent each amount of color is 0. This is defined in RGB mode.\nIn all the following materials, \u0026ldquo;color\u0026rdquo; means \u0026ldquo;the color of the light\u0026rdquo;.\n Q\u0026amp;A  Which color does (0, 0, 0) represent?   Try it out:    details summary::-webkit-details-marker { display: none; } details summary { width: 100%; padding: .5rem 1rem .5rem 2.5rem; color: #fff; position: relative; cursor: pointer; background:#6bb1e0; } details summary:before { content: \"+\"; color: #fff; position: absolute; line-height: 0; margin-top: 1rem; left: 1rem; font-weight: 200; transform-origin: center; transition: 200ms linear; } details[open] summary:before { transform: rotate(45deg); font-size: 2rem; } details { margin: 2rem 0; position: relative; padding: 0px; display: block; background: #e6f3fb; color: rgba(47, 103, 141, 0.995) !important }   Show Answer Black. All colors are of 0%. (There is no color here. The whole world is so dark. It is black!) \n Which color does (255, 255, 255) represent?   Try it out:    details summary::-webkit-details-marker { display: none; } details summary { width: 100%; padding: .5rem 1rem .5rem 2.5rem; color: #fff; position: relative; cursor: pointer; background:#6bb1e0; } details summary:before { content: \"+\"; color: #fff; position: absolute; line-height: 0; margin-top: 1rem; left: 1rem; font-weight: 200; transform-origin: center; transition: 200ms linear; } details[open] summary:before { transform: rotate(45deg); font-size: 2rem; } details { margin: 2rem 0; position: relative; padding: 0px; display: block; background: #e6f3fb; color: rgba(47, 103, 141, 0.995) !important }   Show Answer White. 255 represents that you are using 100% of each color, which is saturate. (When all colors are saturate, you will get white) \n Which color does (100, 100, 100) represent?   Try it out:    details summary::-webkit-details-marker { display: none; } details summary { width: 100%; padding: .5rem 1rem .5rem 2.5rem; color: #fff; position: relative; cursor: pointer; background:#6bb1e0; } details summary:before { content: \"+\"; color: #fff; position: absolute; line-height: 0; margin-top: 1rem; left: 1rem; font-weight: 200; transform-origin: center; transition: 200ms linear; } details[open] summary:before { transform: rotate(45deg); font-size: 2rem; } details { margin: 2rem 0; position: relative; padding: 0px; display: block; background: #e6f3fb; color: rgba(47, 103, 141, 0.995) !important }   Show Answer Gray. 100 / 255 % = 39.2%. You will get gray by adding up 39.2% of red, 39.2% of blue, and 39.2% of green. \n Note: Don\u0026rsquo;t panic if you feel confused here, we will explain more about these ideas in python code activities later in the workshop. \nBuilt-in colors In Python, most commonly used colors are prepared for you. When you need to refer to a color, just do:\ncolor = \u0026#39;color name\u0026#39; For example: Red:\ncolor = \u0026#39;red\u0026#39; # The following code is used to show you the color you get. # You can skip these lines for now and we will explain them in the next page! img = Image.new(\u0026#39;RGB\u0026#39;, (60, 30), color) img.save(\u0026#39;red.png\u0026#39;) img.show(\u0026#39;red.png\u0026#39;) The following is your output: Amazing! You get red!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/comments/","title":"Comments","tags":[],"description":"","content":" Make notes while you are coding Comments are the parts of the code that do not get evaluated. In Python, they are preceded by the # symbol. Anything after the # symbol is part of the comment and is ignored by your code. Comments are put in the code to tell the readers what the code is doing. They can make maintenance of code easy and can also help in finding bugs.\nWhile writing code, If at any time you wish to write notes to help you understand the code, use the # symbol to create a comment.\n# This is my first line of code print(\u0026#34;Hello, World!) Be careful, if you remove the # symbol, your code will not work!\nChallenge Try adding a comment above your first line of code and press run. You will see that the computer will ignore your comment.\n"},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/creating-the-program/","title":"Creating the Program","tags":[],"description":"","content":"Open your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer), and go to https://aka.ms/oranges. Your screen should look like this:\nDefining the Variables Today we are going to be using oranges to tell our Adafruit when to make noise. The first thing we need to do is give the computer a name for each orange and where to look for what they are saying. We do the first part by defining a variable. Click on the section that says VARIABLES, it is salmon colored and 7th from the top. Then define a variable by clicking on Make a Variable and giving it a name. Do this twice, here we define ours as analog1 and analog2 but you can call them whatever you want.\nInterpreting out Inputs Now that we have a name that our computer knows for our oranges, we must let our Adafruit know how to understand them. There are two kinds of inputs, digital and analog. Light switches and power buttons are examples of digital inputs. They are either on or off, 1’s or 0’s. Analog inputs are like a light dimmer or a volume button. They have more options for values. Our oranges are going to be analog inputs and how much we are touching or squeezing them will change the value they report to the Adafruit.\nClick again on the Variables section. This time you should see a few more options now that we’ve defined our two variables. Drag one of the “set ___ to __” blocks into the green “forever” block in our workspace. Using the white down arrow, change the first blank to “analog1”.\nNext, click on the down arrow by ADVANCED then click on PINS. Look for the “analog read pin __” block, it will be third from the top, and insert it where the 0 is on our “set analog1 to 0” block is. To insert it into that slot, drag it so that it’s hovering over the zero, check that the 0 is highlighted in yellow, then let go of the mouse (or touchpad). You should see the block extend to accommodate the block. If you don’t see this, try again.\nOnce you’ve done that, your workspace should look like the above picture. Repeat this process again but this time use the white down arrows to select analog2 and A2. See below to verify you’ve done this correctly. Creating our Loops Now that our computer knows what to call our oranges, and how to understand what they are saying, let’s create a loop that will check for when we are holding our orange. Click on the LOGIC section and drag the “If ____ then” block out to put it under your variable blocks.\nLet’s go back to the volume knob example to understand the comparison we are going to be making in our loop. Every person has a sweet spot for how loud they like to listen to their music to be able to enjoy it the most. This sweet spot is also true for our oranges. They’ll tell the computer a number when they’re just sitting there and a lower number when we touch them. The trick is to find the spot in between so that we only make noise when we want to.\nTo set this up, go to the LOGIC section again and grab the hexagonal “ __ \u0026lt; __ “ block that’s second under the Comparison subsection. Place that on top of the “true” in the “if __ then” block. Make sure you see the yellow highlight before dropping it there. Check the picture below to verify your workspace.\nNow let’s put in what we are comparing. Go back to the VARIABLES section, pull out analog1, and put it in the first slot. Then click on the second slot and type 40. This 40 should be a good sweet spot for most people. If at the end, your orange is making noise without you touching it, you can come back to this step and make the number bigger. If your orange isn’t making noise when you touch it, you can come back and make the number bigger. For now, let’s just leave it at 40.\nNow we can pick out our music! Click on the MUSIC section and drag the second block ”play _____ until done” into our If-Then block. Feel free to click on that down arrow and select your own sounds.\nNow we want to repeat these last few steps for analog2. Once you do this, your workspace will look like the picture below (but with your music options).\nAdded Fun With Lights (Time Permitting) The Adafruit chip has a lot of lights on it! They’re super fun to play with so let’s add a bit of color to our sounds so we can both see and hear the difference when we touch our oranges. Click on the LIGHT section and drag the “Set all Pixels to ___” block into our two If-Then chunks. You’ll want to drop them in right before we play a sound. You can click on the color portion to change which color you want to display.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-structures/","title":"Data Structures","tags":[],"description":"","content":"Topics  Lists \n   Tuples \n   Sets \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/python-basics/","title":"Python Basics","tags":[],"description":"basics of python","content":"Python basics To code music, we need to learn a little Python. Don\u0026rsquo;t worry, it won\u0026rsquo;t bite you. Python is one of the languages that we humans use to tell computers what to do. These languages are known as \u0026ldquo;programming languages\u0026rdquo;. We will learn Python concepts throughout the class, but let\u0026rsquo;s start with a simple print statement.\nIf you want to jump to a specific Python section, click on the topic below:\n Python Console Comments Functions  "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-structures/sets/","title":"Sets","tags":[],"description":"","content":"Just like a list, a set is a collection of items. The difference between a set and a list is that a set cannot contain duplicates. So, if you have 5 chocolates and you put them in a set, you\u0026rsquo;ll only be left with 1 chocolate as duplicates will be removed. 😢\n In the image above, the left side represents Indoor Games (Chess \u0026amp; Table Tennis) while the right side represents the Outdoor Games (Cricket \u0026amp; Football). The middle represents the common part of both these sets. These are the games that can be played Indoors as well as Outdoors (Basketball \u0026amp; Badminton). The middle part is also known as the intersection between two sets.\nA set is created by using the set() function or placing all the elements within a pair of curly braces.\n indoorGames = set([\u0026#34;Chess\u0026#34;, \u0026#34;Table Tennis\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;]) outdoorGames = {\u0026#34;Cricket\u0026#34;, \u0026#34;Football\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;} print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) print(\u0026#39;** Outdoor Games **\u0026#39;) print(outdoorGames) Output\n** Indoor Games ** set([\u0026quot;Chess\u0026quot;, \u0026quot;Table Tennis\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;]) ** Outdoor Games ** set([\u0026quot;Cricket\u0026quot;, \u0026quot;Football\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;]) Union of Sets If we have 2 sets as above, the union of these two sets contains the games from both the sets. The output will be a new set. The duplicates will be removed.\nThe symbol used for Union is |.\nallGames = indoorGames | outdoorGames print(\u0026#39;** All Games **\u0026#39;) print(allGames) Output\n** All Games ** set([\u0026quot;Chess\u0026quot;, \u0026quot;Table Tennis\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;, \u0026quot;Cricket\u0026quot;, \u0026quot;Football\u0026quot;]) Intersection of Sets The intersection of 2 sets will be the set containing both indoor and outdoor games.\nThe symbol used for Intersection is \u0026amp;.\ncommonGames = indoorGames \u0026amp; outdoorGames print(\u0026#39;** Common Games **\u0026#39;) print(commonGames) Output\n** Common Games ** set([\u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;]) Difference of Sets The difference of 2 sets will be the set that contains games from one set that are not present in the other set.\nThe symbol used for Difference is -.\nindoorOnlyGames = indoorGames - outdoorGames print(\u0026#39;** Indoor Only Games **\u0026#39;) print(indoorOnlyGames) Output\n** Indoor Only Games ** set([\u0026quot;Chess\u0026quot;, \u0026quot;Table Tennis\u0026quot;]) Print the items of a set You cannot print the items of a set using the item number like a list. The elements of a set are not in a fixed sequence.\nTherefore, you cannot do something like indoorGames[0], or indoorGames[1] like you can do in a list. However, you can go through the elements of a set using a for loop.\nfor g in indoorGames: print(g) Output\nChess Table Tennis Basketball Badminton Adding items to a set We can use the .add function to add a new game to a set.\nindoorGames.add(\u0026#34;Carrom\u0026#34;) print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) Output\n** Indoor Games ** set([\u0026quot;Chess\u0026quot;, \u0026quot;Table Tennis\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;, \u0026quot;Carrom\u0026quot;]) Removing items to a set We can use the .discard function to remove an item from the set.\nindoorGames.discard(\u0026#34;Chess\u0026#34;) print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) Output\n** Indoor Games ** set([\u0026quot;Table Tennis\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;, \u0026quot;Carrom\u0026quot;]) If you remove an item that is not present in the set, you won\u0026rsquo;t get any error. On the other hand, if you try to remove an item that is not present in a list, you would get a ValueError !\n Try it Yourself "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/setting-up-the-pc/","title":"Setting up the PC","tags":[],"description":"","content":"Getting to know the Arduino IDE Download and install the Arduino IDE from:\n the Microsoft Store (quicker install) - https://www.microsoft.com/store/productId/9NBLGGH4RSD8 or from the Arduino website https://www.arduino.cc/en/Main/Software (pick the latest version)  Once the software has been installed on your computer, go ahead and open it up. This is the Arduino IDE and is the place where all the programming will happen. Take some time to look around and get comfortable with it.\nhttps://www.makerspaces.com/simple-arduino-projects-beginners/\n Menu Bar: Gives you access to the tools needed for creating and saving Arduino sketches. Verify Button: Compiles your code and checks for errors in spelling or syntax. Upload Button: Sends the code to the board that’s connected such as Arduino Uno in this case. Lights on the board will blink rapidly when uploading. New Sketch: Opens a new window containing a blank sketch. Sketch Name: When the sketch is saved, the name of the sketch is displayed here. Open Existing Sketch: Allows you to open a saved sketch or one from the stored examples. Save Sketch: This saves the sketch you currently have open. Serial Monitor: When the board is connected, this will display the serial information of your Arduino Code Area: This area is where you compose the code of the sketch that tells the board what to do. Message Area: This area tells you the status on saving, code compiling, errors and more. Text Console: Shows the details of an error messages, size of the program that was compiled and additional info. Board and Serial Port: Tells you what board is being used and what serial port it’s connected to.  Connect your Arduino At this point you are ready to connect your Arduino to your computer. Plug one end of the USB cable to the Arduino Uno and then the other end of the USB to your computer’s USB port.\nOnce the board is connected, you will need to go to Tools then Board then finally select Arduino Uno.\nNext, you must tell the Arduino which port you are using on your computer.\nTo select the port, go to Tools then Port then select the port that says Arduino.\n"},{"uri":"https://nuevofoundation.github.io/workshops/debugging/02-identify-the-problem1/","title":"Step 1 - Finding the problem (Part 1)","tags":[],"description":"","content":"Compiler Errors Let’s start and take a look at one of the first daunting problems a novice programmer faces: reading and understanding errors.\nThere are two kinds of errors: compiler and runtime errors. A compiler error usually indicates a problem with your syntax. Perhaps you wanted to express an idea in the program but didn\u0026rsquo;t adhere to the rules of the programming language. These are caught when you compile your program.\nCompiler errors are nice because they are relatively easy to fix. In C, compilers like gcc and will usually give a lot of information about what went wrong during compiling. Let’s take a look at some of them. Open the Shell in the Repl.it below and run\nmake CompilerErrors\rNote that for this example, we will not be running the program - this program is meant to showcase some common compiler errors that you may encounter.\n\rThe first error should look like this (or similar):\nA compiler error contains the name of the file (CompilerErrors.c) followed by the line it is on (12) as well as where on that line (19). It then gives a brief name of the error - in this case, the compiler expected a semicolon ; at the end of the line. The compiler also gives you the line of code and points to where your error actually occurred! You can simply add a semicolon to fix this error.\nThe other error is complaining that there is an extra } when it didn\u0026rsquo;t expect one. The fix for this one is also relatively simple: you can add the corresponding curly brace { next to func().\nA missing curly brace is often the reason for seemingly extraordinary errors. The compiler is not great at picking up where a curly brace should be, so if you\u0026rsquo;re including a header file with a missing curly brace, it\u0026rsquo;ll blow up in your face. In almost all cases, when the compiler outputs a number errors in code you didn\u0026rsquo;t write, chances are it\u0026rsquo;s a curly brace missing somewhere in your (or perhaps even the library\u0026rsquo;s) code!\n\rOnce you\u0026rsquo;ve fixed it, you can compile the code again using the same command.\nmake CompilerErrors\rWait, there are more errors! As mentioned in the warning box, the compiler isn\u0026rsquo;t great at picking up errors if there\u0026rsquo;s a missing curly brace. A compiler error can \u0026ldquo;hide\u0026rdquo; others.\nWe\u0026rsquo;ll use a table to showcase common compiler errors and their general cause.\n   Error Cause General Fix     Missing semicolon Missing semicolon. Add the semicolon ;.   Expected function body after function declarator Missing curly bracket {, usually at the beginning of a function body declaration. Add the curly brace { where it belongs.   Expected identifier or \u0026lsquo;(\u0026rsquo; In the context of a curly brace, usually means you have an extra dangling curly brace {. Remove the curly brace or add a corresponding } after it.   Redefinition of \u0026hellip; Somewhere in your code you declared a variable. Later you declared it again. Rename the variables, or remove one of them.   Use of undeclared type\u0026hellip; The compiler can\u0026rsquo;t find the declaration of a type you want to use. Usually this comes from improper #include directives (as types are usually declared in header files). Make sure there are no typos.   Must use struct (or enum) tag C requires you to use struct NAME_OF_TYPE or enum NAME_OF_ENUM whenever you want to refer to the struct/enum type. Usually C developers use a typedef statement so they don\u0026rsquo;t have to type struct or enum to refer to those types. You can add those keywords yourself, though.   No member named\u0026hellip; In your struct, there\u0026rsquo;s no field of the name you requested. Probably a typo, or you haven\u0026rsquo;t defined a field in your struct yet.   Incompatible types\u0026hellip; You\u0026rsquo;re mixing and matching types, which is not allowed in C without explicit casting. Either check whether an assignment is accurate, or use explicit casting to silence the error during compile time. This could lead to runtime errors though.   Argument type is incomplete If a function returns void, you can\u0026rsquo;t pass it in as an argument to another function! Fix the function declaration to nonvoid, and be sure that you want such behavior.   Extraneous \u0026lsquo;(\u0026rsquo; or \u0026lsquo;)\u0026rsquo; before \u0026lsquo;;\u0026rsquo; Mismatched parentheses () You have an extra set of parentheses somewhere. Double check to make sure there\u0026rsquo;s a matching pair for each of them!    If applying a general fix doesn\u0026rsquo;t work, then you should turn to the internet for help. Knowing how to read the error and decipher what it wants fixed is important, though! You shouldn\u0026rsquo;t need to look up common errors with simple fixes.\nNot all compilers give useful information. For instance, C++ compiler errors can range from simple ones (like in CompilerErrors.c), to enormous blocks of text, especially when working with templates. The point of this lesson is NOT to turn you away from internet sources completely, but rather to get you familiar enough with them to give you some more intuition as to how to fix simple errors.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-tictactoe/activity-3/","title":"3. Update the Game Board","tags":[],"description":"learn to generate a move for computer and update the board","content":"In the last exercise, we have a program that prints out the board and prompt Enter your move (1-9):  to user with each valid move. However, the board stayed empty (shown below). In this exercise, we will learn how to update board and generate a random move for the computer.\n\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' 1 | 2 | 3 ---+---+--- 4 | 5 | 6 ---+---+--- 7 | 8 | 9 Enter your move (1-9): 1 | | ---+---+--- | | \u0026lt;--------------- The board doesn't have the player/computer moves ---+---+--- | | Enter your move (1-9): d Invalid Input; re-enter your move (1-9): 3 | | ---+---+--- | | \u0026lt;--------------- The board doesn't have the player/computer moves ---+---+--- | | Enter your move (1-9): Displaying User Moves Inside the hasNextInt() if statement, before the method call printBoard(board), update the board array with user\u0026rsquo;s input at the corresponding index.\nNote that the player is represented by \u0026quot;X\u0026quot; on the game board.\nReminders  Java uses 0-indexing and the player was prompted to enter number from 1 to 9). To access an element of an array, you use index notation: myVariable[indexNumber]. \n Setting Up Computer Moves Create a new method getComputerMove(String[] curBoard) that produce a valid move for the computer (between 1 to 9) with an input of the current game board.\nFollow next step to implement the method.\n3. Implementing the Computer\u0026rsquo;s Movement In getComputerMove(), we will randomly generate a number between 1 and 9 for the computer.\nWe will do so with the help of the class Random which is often used in Java to generate random numbers.\nTo use this class and all its methods, we need to import the class with the following line of code on the top of the file.\nimport java.util.Random; Create a Random object by calling the constructor Random().\nRandom rand = new Random(); Generating Random Numbers Call the method int nextInt(int num) on the Random object you created to generate a number from 1 to 9 randomly.\nA method call to int nextInt(int num) will return a random number from 0 to num-1.\nint position = rand.nextInt(9); Checking for Valid Move After having a random number from 1 to 9, we need to check if the spot is available.\nUse a while loop to generate a valid move for the computer, if the previously randomly generate number is not an available spot!\nReturn the number once we find a valid move for the computer.\nwhile (!curBoard[position].equals(\u0026#34; \u0026#34;)){ position = rand.nextInt(9); } return position; Update the Board Array Just like step one, we should update the board array for the computer before the method call printBoard(board).\nRandomly generate a move by calling getComputerMove()!\nNote that the computer is represented by \u0026quot;O\u0026quot; on the game board.\nboard[getComputerMove(board)] = \u0026#34;O\u0026#34;; //getComputerMove returns the integer 0-8 that is the proper position in the array printBoard(board); Run the Program Run the program now! The board should update both the player and computer\u0026rsquo;s move correctly with each input as shown below:\n\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt; * Choose number 1 - 9 to place your move * Player: 'X' Computer: 'O' 1 | 2 | 3 ---+---+--- 4 | 5 | 6 ---+---+--- 7 | 8 | 9 Enter your move (1-9): 1 X | | ---+---+--- | | ---+---+--- | O | Enter your move (1-9): 1 Invalid Position; re-enter your move (1-9): 2 X | X | ---+---+--- | | O ---+---+--- | O | Enter your move (1-9): Everything looks like it\u0026rsquo;s working well! We only need to determine who is the winner/loser the game, which we will implement in the next exercise!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/activity-3/","title":"Operators","tags":[],"description":"Introduce operators and perform operations on variables in Java.","content":"\nLet\u0026rsquo;s do Math: Arithmetic Operator In the last exercise, we learned about variables and how we can assign values to a variable of a specific type, such as:\nint age = 3; // declare variable age of type int with value 3 age = 4; // assign 4 to the variable age Looking at the code above, it essentially adds 1 to the value of the variable age.\nAnd, in Java, we can perform math operations on variables directly with arithmetic operators: +, -, *, /, %. For example, we can use the add operator + to add 1 to age:\nint age = 3; // declare variable age of type int with value 3 age = age + 1;// add 1 to age The following are the arithmetic operators in Java:\n   Operator Description Example     + addition 1 + 1 = 2   - subtraction 2 - 1 = 1   * multiplication 3 * 3 = 9   / division 9 / 3 = 3   % modulus/remainder 10 % 4 = 2    Note: If both of the operands of division are integers, the result will also be an integer. For example, 10 / 4 returns 2, not 2.5 since we throw away the remainder. If either of the operands is a double, the result will be a double.\nNote: Modulus operation get the remainder of the division operation.\n Add (+) is used on String as concatenation operator. For example:\nString name = \u0026quot;Patric\u0026quot; + \u0026quot;k\u0026quot;; is same as String name = \u0026quot;Patrick\u0026quot;;\n Instructions  Use the program below to practice using the arithmetic operators. Change the numbers to see the answers.   Comparisons: Relational Operator Next, let\u0026rsquo;s learn how to compare numbers, using relational operators.\nJust like in math, we can compare numbers using \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;=. For example: (3 \u0026gt; 2) is true, a boolean value.\nThe following are the relational operators in Java:\n   Operator Description Example     == equal to (3 == 3) is true   != not equal to (3 != 3) is false   \u0026gt; greater than (3 \u0026gt; 2) is true   \u0026lt; less than (3 \u0026lt; 2) is false   \u0026gt;= greater than or equal to (3 \u0026gt;= 2) is true   \u0026lt;= less than or equal to (2 \u0026lt;= 2) is true    Note: == and != can only be used on data of the same type. For example:\nint x=3; double y=3.0; x==y; // This would produce an error because x and y are of different types. \n Using 1 equal sign assigns a value to the variable. Using 2 equal signs compares the values of two elements.\nage = 3; // sets the value of age to 3 age == 3; // checks to see if the value of age is 3 \n Comparison Practice  Use the program below to practice using the comparison operators. Change the numbers to see the answers.   Exam Statistics! Patrick 🐥 and 4 of his classmates just had a music exam in this class. These are the grades of their exams: Patrick(88), Tom(89), Mary(95), Chris(84), Jen(92).\nWe want to produce a grade statistic report of the whole class.\nThis report lists each student\u0026rsquo;s grade, class average score, and whether class average is over 60, 70, 80, 90 (true or false), like the following:\n--------------------------- Music Grade Report --------------------------- Student Grades: - Patrick: ... - Tom: ... ... Class Average: ... - Average Over 60: ... - Average Over 70: ... - Average Over 80: ... - Average Over 90: ... Let\u0026rsquo;s write it with the help of operators 🎵!\nInstructions:   Identify all the variables in the print statements and declare them starting on line 12 with the correct data type and value. Note that there are 10 variables in total, and average has been declared for you).\nHint: for example, the variable patrickGrade should be declared and assigned on line 13 as int patrickGrade = 88;.\n  Calculate the correct class average and assign it to variable average using arithmetic operators such as +, -, *, /, %.\nNote that an average score is (total points)/(number of students).\n  Assign variables over60, over70, over80, over90 with the correct value using relational operators such as \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;=.\n  Run the program and see the report printed!\n    "},{"uri":"https://nuevofoundation.github.io/workshops/unity/scripts-explained/","title":"Scripts Explained","tags":[],"description":"","content":"Before we begin with making Nuvi move, let\u0026rsquo;s first explain the structure of a Unity script. There are many ways to make Nuvi move within Unity, and one way to do this is to add a Script component onto Nuvi. A Script component is a component that you can make on your own from scratch.\nAn empty Unity Script will look like this:\nusing System.Collections; using System.Collections.Generic; using UnityEngine; public class EmptyScript : MonoBehaviour { void Start() { } void Update() { } } Each new script will have the first 3 lines that start with using. These lines are needed for Unity to be able to use this newly created script, so we generally leave these lines of code alone. The next line that starts with public class 'script_name' is needed for Unity to access this specific script.\nMake sure the name of the script matches the \u0026lsquo;script_name\u0026rsquo;! If you decide to change the name of the script outside the script, it does not update the line of code containing the script name, so make sure to go back in and update it, or else the game won\u0026rsquo;t run!\n Each script has two pre-made methods.\nvoid Start(): This method is called only once when the script is initially called. It is usually used to initialize variables we may need throughout the script.\nvoid Update(): This method is called every frame and is usually used when we want to change a game behavior.\nThere exists another method we will be using to make Nuvi move called void FixedUpdate().\nvoid FixedUpdate(): This method is called less frequently than Update(), but is best used when dealing with physics for smoother movement, such as when using Rigidbody.\nThere will be other methods from the Unity library we will be using later, but for now this is all you need to know!\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/printconsole/","title":"Printing to Console","tags":[],"description":"","content":"Sometimes the game or application might not work the way you expect it to or you want to write something to the console for logging purposes. Outside of debugging the application, you can use System.out.println() to write your message. Lookout for your messages in the \u0026ldquo;logcat\u0026rdquo; window at the bottom of Android Studio: Working Together  Without removing the quotation marks, try changing \u0026quot;Restarting the Tac-Tic-Toe Game!\u0026quot; to \u0026quot;Restarting the Tic-Tac-Toe Game!\u0026quot; or any other sentence you like. Press run to see if anything changes. Add another System.out.println below the current line to print a second sentence below the first sentence. Press run to see if two sentences are printed out. If you see any red text, please ask for help. \n HELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help. Beware of the following when coding in Android:\n out and println start with a lowercase letter. System starts with an uppercase letter. Make sure the sentence you wish to print is surrounded in quotation marks, and that the sentence is between the parentheses. Do not delete any curly braces { or }. \n System.out.println is helpful when you want to fix bugs in code, but your user (the person using the app) can\u0026rsquo;t see text printed with this function. But we can do this with toasts! A toast is a quick, small text that we make visible to the user. Here\u0026rsquo;s how to make a toast:\nToast.makeText(this, \u0026#34;Text we want to show\u0026#34;, Toast.LENGTH_SHORT).show() "},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-1/","title":"Activity 1 - Determine User Account","tags":[],"description":"Use a Linux command to determine what user you are","content":" Now we are at the command line. Let\u0026rsquo;s test a simple command to show us the user account.\nWhat are user accounts? Every user in Linux has a user account. These are used to uniquely identify each user.\nFor example, say you and your friend, Nuvi, share a computer. One way to track which files belong to each of you and make sure the other doesn\u0026rsquo;t accidentally edit anything important, you and Nuvi could create separate user accounts.\nHow do I find out which account I am using? The Linux command whoami will tell you which account you are using. Try it!\nIn our example above, the terminal output is the name of our user, nuvi.\nNow that we checked who we are, next let\u0026rsquo;s find out where we are.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/progress_update_1/","title":"Progress Update 1","tags":[],"description":"","content":"If you would like to test the following code, visit this link\nTo edit this code, click on the \u0026lsquo;Copy to Drive\u0026rsquo; button to make a personal copy of this notebook. Make sure you are logged in to your Google account. If you are using a Nuevo Google account temporarily Once you make a copy, please make sure to replace the \u0026ldquo;Copy of\u0026rdquo; with your name, along with the file name. This will be on the top left corner of your notebook.\n  Before moving on, please check your Google Colab notebook against the code below:\n# Importing TensorFlow and tf.keras libraries import tensorflow as tf from tensorflow import keras # Helper libraries for statistics and plotting import numpy as np import matplotlib.pyplot as plt #This variable is declared from the fashion_mist library of the datasets section fashion_mnist = keras.datasets.fashion_mnist #This loads four variables from the dataset.  #The train_images and train_labels are data that the model uses to learn #The test_images and test_labels are used by the model to compare against. (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data() class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot' ] plt.figure() plt.imshow(train_images[0]) #Shows the first image in the data set as a plot or different colored pixels plt.colorbar() #displays the color bar on the right plt.grid(False) plt.show() #displays the entire plot plt.figure() plt.imshow(train_images[7]) #Shows the first image in the data set as a plot or different colored pixels plt.colorbar() #displays the color bar on the right plt.grid(False) plt.show() #displays the entire plot #the train_images and test_images range between values from 0 to 255.  #To maintain consistency between the training and testing set, we will divide train_images and test_images by 255 train_images = train_images / 255.0 test_images = test_images / 255.0 \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-4/","title":"Activity 4: Create Basic Filter","tags":[],"description":"","content":" Now that we understand more about pixels and images, we can start to learn how to design your own filter on the image. Let us see some examples on how to design a basic filter on your image.\nExample for blue filter We want to add a blue filter on the cute cat above. Let's see how to achieve that. # We need to import PIL package to allow manipulation with pixels. from PIL import Image # Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) # Let\u0026#39;s add the blue filter for i in range(img.size[0]): # For every column for j in range(img.size[1]): # For every row color = img.getpixel( (i,j) ) img.putpixel((i,j),(0, 0, color[2])) # Set the color accordingly #Save the cat after filtering img.save(\u0026#34;Mycat.png\u0026#34;) Wow! This is our cat after the blue filter. How did this work? Let\u0026rsquo;s look at the loop:\nfor i in range(img.size[0]): # For every column for j in range(img.size[1]): # For every row color = img.getpixel( (i,j) ) # Get the current pixel img.putpixel((i,j),(0, 0, color[2])) # Set the color accordingly We start by going through the image, by each column and each row, to get each pixel. It then gets the current color value of the pixel. To set a blue filter to that pixel, all we\u0026rsquo;re doing is setting the \u0026lsquo;Red\u0026rsquo; and \u0026lsquo;Green\u0026rsquo; RGB values to 0. Therefore, only the \u0026lsquo;Blue\u0026rsquo; values remain!\n Challenge - Create your own filter Following the example above, try to create your own filters with different colors.\n Finally, please think about and try to create a grey filter. We will talk about how to create a grey filter in the next section.\n"},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/preload-create-update/","title":"Preload, Create, and Update","tags":[],"description":"","content":"The Preload, Create, and Update methods So now let\u0026rsquo;s look at our scenes, which will eventually hold the code for our game. If you scroll through, you will see that each scene has a constructor (because it is a class), and also three large methods: preload(), create(), update(). There are also a number of helper functions in Scene 2, but we will talk about the aforementioned three methods because they are integral to understanding Phaser.\nWith the way we\u0026rsquo;ve set up the scenes, preload() and create() are in Scene 1 and create() and update() are in Scene 2. These three functions are the main tools that any game using Phaser will utilize.\nPreload() Let\u0026rsquo;s start by describing preload() - this function essentially loads things into our game. This can be images, variables, and pretty much anything else that you want to define for your game to use. Things loaded up into the game with preload() are NOT actually used or put anywhere in the game until you use it later. You can think of this method like a storage space that is filled once before the game starts. Most things have to be put into preload() before they are used anywhere in the game.\nCreate() Next is create(). This function is also relatively straightforward - it runs once at the beginning of the game and allows the user to place the things that they\u0026rsquo;ve preloaded with preload() and create objects within our game such as animations, collision detectors, text, groups, and much more.\nUpdate() Finally, the last function is update(). While preload() and create() run only once at the start of the game, update() runs constantly.\nWhile playing games, you may have encountered the term \u0026ldquo;FPS\u0026rdquo;. This refers to the \u0026ldquo;frames per second\u0026rdquo; of the game, or how often a new frame is updated on the screen. A frame is essentially a single call to the update() method. Phaser typically runs at 60 FPS, meaning the update() method is called 60 times in a single second!\n The update() method is used in a variety of ways. One is for movement - if we assign an object to move a little bit in update(), then when we play the game, it will look like the object is moving smoothly because update() is being called so often that we can\u0026rsquo;t see the breaks in between each movement. We can also use update() to constantly check whether an input has given. For example, if we want the player to be able to shoot when the spacebar is pressed, we can use an if-statement that checks for the spacebar in the update() function, so that the game is constantly checking for this.\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/arrays/properties/","title":"Properties","tags":[],"description":"","content":"Array properties or characteristics are a way to describe the attributes of the array. Examples include: the total number of elements, the value at a particular index, etc\u0026hellip;\nHere is a list of the properties of the Array object along with their description.\nConstructor() Returns a reference to the array function that created the object.\nSyntax:\narrayName.constructor; Example: Index() The property represents the zero-based index of the match in the string. Index provides a way to access or modify elements based on their position in the array.\nAccess an array element by index: Syntax:\nvar value = arrayName[index]; Example: Modify an array element by index: Syntax:\narrayName[index] = newValue; Example: Length() Reflects the number of elements in an array.\nSyntax:\nvar length = arrayName.length; Example: "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/conditional-statements-loops/nested-loops/","title":"Nested loops","tags":[],"description":"Advanced applications applications for flows","content":"Nested loops To learn nested loops, you need to know simple for-loops and while loops. If you have already learnt them, you can skip to the next part. Otherwise, jump to a specific Python section to learn more about these topics:\n For-loop and While-loop  In this section, we will use one loop inside another, which is called nested loop.   Nested while loop #This is the format for nested while loop while expressionA: while expressionB: statement(B) statement(A) In the while loop above, when expressionA produces False, we will skip the whole block. When expressionA produces True, we will go to the inner while loop and check expressionB. If expressionB produces True, statement(B) will be executed. If expressionB produces False, we will skip the inner while loop and go to statement(A).  In conclusion, if expressionA produces False, none of the statements will be executed; statement(A) and statement(B) will both be executed if and only if both expressionA and expressionB produce True.\nLet us take a look at one example for nested while loop.\n#This is the example for nested while loop. x = 0 y = 0 #Below is our outer loop while x \u0026lt; 3: #Print if \u0026#34;x \u0026lt; 3\u0026#34; produces True print(\u0026#34;Go through outer while loop, x is\u0026#34;, x, \u0026#34;y is\u0026#34;, y, sep = \u0026#34;\u0026#34;) #Below is our inner loop while y \u0026lt; 5: #Print if \u0026#34;y \u0026lt; 5\u0026#34; produces True print(\u0026#34;Go through inner while loop, x is\u0026#34;, x, \u0026#34;y is\u0026#34;, y, sep = \u0026#34;\u0026#34;) y += 1 #These codes below are executed after finishing each inner loop. x += 1 y = 0 This is the output of our example. \nQuestions Can you try to find out how x and y values change and explain why?  (Hint: How many times do we went through the outer loop and inner loop separately?) \n Challenge One Try to change the integers in the nested while loop and predict the outputs. Then run the code and observe the outputs. Do they match your predictions?\n   Nested for loop #This is the format for nested for loop for variableA in rangeA: for variableB in rangeB: statements(B) statements(A) In the for loop above, when variableA is not in rangeA, we will skip the whole block. When variableA is in rangeA, we will go to the inner for loop. If variableB is in rangeB, statement(B) will be executed. If variableB is not in rangeB, we will skip the inner for loop and and go to the outer loop.  In conclusion, if variableA is not in rangeA, none of the statements will be executed; statement(B) and statement(A) will both be executed if and only if variableA is in rangeA and variableB is in rangeB.\n#This is the example for nested for loop #Below is our outer loop for n in range(0, 3): #Below is our inner loop for m in range(0, 3): #Print if m is in range(0, 3) print(\u0026#34;(\u0026#34;, n, \u0026#34;,\u0026#34;, m, \u0026#34;)\u0026#34;, end = \u0026#34;\u0026#34;) #Print if n is in range(0, 3) print(\u0026#34;\u0026#34;) This is the output of our example. Questions Can you try to explain the printing pattern?  (Hint: How many times do we went through the outer loop and inner loop separately?) \n Challenge Two Try to change the integers in the nested for loop and predict the outputs. Then run the code and observe the outputs. Do they match your predictions? \n   Questions Try to initialize n and m. Will this change our output from the nested loops and why? Then run the code and observe the outputs. Do they match your predictions? \n Questions By the end of this section, let us think about the following questions: 1. Why initialization will not changing the output?  (Hint: What does the variable in the for loop represent?)  2. What should we do if we want start printing from (1, 1)?  (Hint: What would happen if we change the ranges?)\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arrays/problem-2/","title":"Problem 2: Advanced Arrays","tags":[],"description":"","content":"-- Task 1: Find the average cost! Suppose we have an array containing the costs of various foods. Find the average cost of the food!\n You can use a for loop to go through the array! Remember, the average of a list is the total divided by the number of items \n  Task 2: Sorting an array! The cost of each item in the menu is all over the place! Help us sort the array from least to greatest.\n Think of a way to sort the array! (there are many different ways to do so) Look at the example! \n If we are given the array below:\nint[] cost = {100,90,50,60,20,1,3}; we should get the following output:\nint[] sorted = {1,3,20,50,60,90,100};  Task 3: Make your own array! (optional) Now it\u0026rsquo;s your turn! Input your own elements into the array!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/arraylists/","title":"ArrayList: Ordering from the Menu","tags":[],"description":"","content":"--  Now that the customers have access to all the items on the menu, it’s time for them to place their orders. A customer may want to add an item to their order, remove an item, change an item, or access an item. After finalizing the order, you would want to return a receipt containing the number of items that the customer ordered, as well as each item in a list for the customer to checkout. We will accomplish all these feats utilizing an ArrayList.\nTopics  Introduction \n   Methods \n   Problem: Insertions, Accesses, and Removals \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-types/","title":"Data Types","tags":[],"description":"","content":"Topics  Strings \n   Numbers \n   Booleans \n    "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/load-the-bird/","title":"Load the bird image","tags":[],"description":"","content":"First of all let\u0026rsquo;s load Flappy and put it on the screen.\nAdd below command in the file [File: load-sprites.js] game.load.image(\u0026lsquo;bird\u0026rsquo;,\u0026lsquo;assets/bird.png\u0026rsquo;);\nWorking Together In the repl.it window below, we started the code with the line game.load.image('bird', 'assets/bird.png');.\nIn your console you should see a Jsappy bird after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/2d-arrays/problem-1/","title":"Problem 1: Example Menu","tags":[],"description":"","content":"Task 1: Print the 2D array! In the 2D array below we have a list of different foods. Each row is the same type. For an example, row 1 is an array of main courses. Row 2 is an array of drinks and row 3 is an array of desserts.\n{ String[][] menu = { { \u0026#34;Hamburger\u0026#34;, \u0026#34;Pasta\u0026#34;, \u0026#34;Steak\u0026#34;, \u0026#34;Tacos\u0026#34; }, { \u0026#34;Cola\u0026#34;, \u0026#34;Sprite\u0026#34;, \u0026#34;Pepsi\u0026#34;, \u0026#34;Fanta\u0026#34; }, { \u0026#34;Pudding\u0026#34;, \u0026#34;Ice Cream\u0026#34;, \u0026#34;Mochi\u0026#34;, \u0026#34;Cake\u0026#34; } }; } Use what you have learned to print out the array!\n Task 2: Search for an item! The manager wants to know if there is a specific item in the menu. Build a search method that returns true or false if the item is in the menu or not.\n{{ % notice tip % }}\n Remember to check every element in the row and column! What value type does this return? {{ % /notice % }}  "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/variables/","title":"Variables","tags":[],"description":"","content":"Variables are simply names that we can give to values such as strings, numbers, and booleans. Here’s how to make a variable named s. We say s is a string that has the value \u0026quot;Hello, World!\u0026quot;. Can you describe the following variables?\ns = \u0026#34;Hello, World!\u0026#34; x = 88 happy = True Press run.\nNote that variables are not printed out to the console. Instead, the variable simply saves the string, number, or boolean into the computer’s memory. We can use these variables in other statements. For example, the following code would print \u0026quot;Hello Nuevo Foundation\u0026quot; to the console:\nstr1 = \u0026#34;Hello\u0026#34; str2 = \u0026#34;Nuevo Foundation\u0026#34; print(str1 + \u0026#34;\u0026#34; + str2) You can also do the following to print strings together while adding spaces in between the words.\nstr1 = \u0026#34;Hello\u0026#34; str2 = \u0026#34;Nuevo Foundation\u0026#34; print(str1, str2) Challenge  Create two new variables: A variable named comp that stores the string \u0026quot;Computer\u0026quot;. A variable named five that stores the number 5.  Next, use the variables and what you learned in the previous activities to print out the following to the console. You must use the variables!\nComputer 5 ComputerComputer 10 ComputerComputerComputer 15  Hint: If you\u0026rsquo;re stuck, consider using the + operator. Remember that you can use the variables comp and five multiple times in the same line!\n  "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-1/","title":"Activity 1 - Familiarize with online editor","tags":[],"description":"","content":" Open the web editor (click the \u0026ldquo;Try it yourself!\u0026rdquo; button below) Use the header tags to add a title, and the paragraph tags to write a paragraph about Benji If you have time: write a list of Benji\u0026rsquo;s favorite treats: turkey, peanut butter, and string cheese  Try it yourself!\nUse this reference chart to try some html tags on your own.\n   Tag Description Example     \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt; Describes an HTML Document. Any website must start with the  opening tag and end with the  closing tag. See the Code Pen example above.   \u0026lt;!-- --\u0026gt; Describes a comment. Comments are meant for other coders to see but they are not displayed on the website. \u0026lt;!-- This line will not show in the browser --\u0026gt;   \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; Contains all the HTML elements that give information to the browser to display the website correctly. The HTML elements between  and  tag are not displayed. See the Code Pen example above   \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; Contains the title of the website to be used for naming the browser tab. \u0026lt;head\u0026gt;\n\u0026lt;title\u0026gt; My Website \u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;   \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; Contains all the HTML elements that are displayed in the page like text and pictures. See the Code Pen example above.   \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt;\n\u0026hellip; \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; Defines a heading/title. \u0026lt;h1\u0026gt; defines the most important (largest) heading/title, while \u0026lt;h6\u0026gt; defines the least important (smallest) heading. \u0026lt;h1\u0026gt;This will be a big title\u0026lt;/h1\u0026gt;\n\u0026lt;h4\u0026gt;This will be a smaller title\u0026lt;/h4\u0026gt;   \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; Describes a paragraph. \u0026lt;p\u0026gt;Dogs evolved to love humans. In conclusion, dogs are a human’s best friend.\u0026lt;/p\u0026gt;   \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; Defines a division or section on the site. \u0026lt;div\u0026gt;\n\u0026lt;h1\u0026gt;All about me\u0026lt;/h1\u0026gt;\n\u0026lt;/div\u0026gt;   \u0026lt;img\u0026gt; An image. It’s a self-closing tag but you must specify the source of the image for the browser to know where to get the image from. \u0026lt;img src=\u0026quot;aka.ms/Benji-the-dog\u0026rdquo;\u0026gt;   \u0026lt;hr\u0026gt; Draws a horizontal line. Another self-closing tag that’s useful if you want to break up the page’s content. \u0026hellip; \u0026lt;hr\u0026gt; \u0026hellip;   \u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt; A list. To start the list, use a \u0026lt;ul\u0026gt; tag. For each item to be added to the list, surround the item with the \u0026lt;li\u0026gt; and \u0026lt;/li\u0026gt;tags. Finish the list with the \u0026lt;/ul\u0026gt; tag. \u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;This is a list item.\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;    "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-2/","title":"Activity 2 - Change the color of objects in game.","tags":[],"description":"","content":"Activity 2 Great! You just fixed the game\u0026rsquo;s boundary. Now, notice how everything inside the game looks black and white. Let\u0026rsquo;s give it some colors.\nTo do this, we need to modify the RGB values in COLOR attribute. RGB stands for RED, GREEN, BLUE. In a computer screen, you can modify the color of each pixel by modifying its RGB value. Every color can be represented by combination of different RGB values in it. The values are specified in same order as RGB is written. Use the color picker below to find the RGB values for your favourite color: Find // TODO (ACTIVITY 2) in the code. Modify the COLOR attribute of Pong class. If you did this correctly, the objects will acquire the desired color. Press run and confirm the result.\nTry using different RGB values to see the effect of color changes on the game\u0026rsquo;s objects.\n  Takeaway You have just modified the COLOR attribute in the Pong class to influence how the objects will look on screen. You learnt how to modify RGB values to get your desired color!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-2/","title":"Activity 2 - Simplifying code with loops","tags":[],"description":"","content":"\nGreat! You drew a square. But notice that we are writing the same lines over and over again! We had to repeat the instructions to draw a line and turn left 4 times. Wouldn’t it be great if we can give instructions once and tell the program to repeat it 4 times? Fear not, we can!\nTo do this, we need to use loops. Loops run a set of instructions multiple times. To see this in action, here is some example code that draws a triangle:\nfor i in range(3): turtle.forward(50) turtle.left(120) Let’s understand what this code does. for i in range(3): This statement tells the program to run the instructions in a loop. range(3) sets a limit to how many times the loop runs (in this case, 3 times). The letter i is called a variable. It is used to keep track of how many times we have run the contents of the loop.\nTricky Python syntax - Part 1 Syntax is how we write languages so that it is understandable. In English we have spelling and grammar rules to help understand each other. Similarly, the Python language has syntax rules so that the computer can understand our code.\nFirst, notice that at the end of the line with for, we added a colon (:); this signifies that the next line will be part of the for loop. The computer will complain if you miss the :!\nAs well, we added a tab in front of some lines of code in the example above. The tab tells the computer these statements are considered a part of the for loop.\nTo see how big of a difference this makes, take a look at the below code. Because we removed the tab in front of turtle.left(120), the code will no longer work as expected. Now, we only repeat turtle.forward(50) three times, and we get a straight line instead!\nfor i in range(3): turtle.forward(50) turtle.left(120) \n Now, take the example code that we have provided, and modify it slightly so that, instead of drawing a triangle, it draws a square. You can look back at what you did in Activity 1 as a hint.\n "},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/activity-3/","title":"Activity 3 - Loops","tags":[],"description":"","content":"Great!\nThe King has now requested that we input our message letter by letter so that we can change them afterwards.\nTo do this we need something called loops. Loops allow us to execute a block of code multiple times. Let\u0026rsquo;s see the below example which uses a loop to print out some numbers.\nfor(int i=0; i\u0026lt;3; i++){ cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; } Let\u0026rsquo;s try to understand what this line of code does.\nLoops for(int i=0; i\u0026lt;3; i++) { }. This tells the program that the instructions that are held within the brackets {} are supposed to be executed in a loop. We can identify three different parts inside this command:\n int i=0; declares an int variable called i which will be initialized as 0. This variable will work as a counter of how many times we\u0026rsquo;ve been in the loop. 1\u0026lt;3; is the condition that needs to be met for the loop to continue working. If the value of the variable i is smaller than 3, the loop will continue executing. i++ will add 1 to the variable i at the end of each loop. The most important part to take away from this is that this is the general way of repeating instructions some number of times (in this case, 3 times). \n A property of string variables is that we can count the amount of characters in the string.\nAccessing each character from a string Each character from a string variable is called a char. We can access this char by the position that holds inside the string. Let\u0026rsquo;s picture it as a list of characters. The first character will be at position 0, the second one at position 1, and the next one at position 2, and so on.\nThat being said, we would need the following code to access each character:\nstring word = \u0026quot;hello\u0026quot;; char letter = word[0]; cout \u0026lt;\u0026lt; \u0026quot;The first letter is: \u0026quot; \u0026lt;\u0026lt; letter \u0026lt;\u0026lt; endl; This would print:\nThe first letter is: h String size Apart from accessing each individual character in a string, we can also know how long it is by using the following lines of code:\nstring word = \u0026quot;hello\u0026quot;; int wordSize = word.size(); cout \u0026lt;\u0026lt; \u0026quot;The size is: \u0026quot; \u0026lt;\u0026lt; wordSize \u0026lt;\u0026lt; endl; This would print:\nThe size is: 5 \n Now we modify the code we had to print each letter of the name instead of a hello.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/activity-3/","title":"Activity 3 - Welcome Customer to your Restaurant &amp; Display Menu","tags":[],"description":"","content":"Welcome Customer to your Restaurant \u0026amp; Display Menu Now that we have both a restaurant banner to display to the customer and a menu stored in your Python Program, let\u0026rsquo;s display your menu to the customer and welcome them in. In this activity, we\u0026rsquo;re going to write 2 helper functions to accomplish this.\nHelper Functions Helper functions are functions that get called in a main function that runs all of the code for this program. Each of these helper functions works toward one simple goal.\n The first helper function we\u0026rsquo;ll be writing is printMenu(), a function that will iterate through the dictMenu dictionary and result in a Menu that looks like the example shown below. Since dictMenu's values are all lists with the price of the item as the first element and the description as the second element, we want to make sure that when we print out each item\u0026rsquo;s information, we access each element of that list by using indexing. Psst: The description of the item is on a separate line from the item name and item price, what does this tell you? Pssst: There\u0026rsquo;s a space between each item in the menu, how do we do that\u0026hellip;?\nExample Menu:\n\u0026mdash;\u0026ndash;Menu\u0026mdash;\u0026ndash;\nCreamy Pesto Pasta \u0026mdash;\u0026mdash; $15.99\nPenne pasta tossed in a creamy pesto sauce, topped with black olives and sundried tomatoes\nSpring Rolls \u0026mdash;\u0026mdash; $8.0\nStir fried vegetables such as cabbage and carrot mixed with vermicelli and thin strips of fried tofu, wrapped in a crunchy outer layer.\nThe second helper function we\u0026rsquo;ll be writing is orderFromRestaurantYN() where we will take input from the user about whether they would like to order anything from the menu or not. Remember to provide the user an example of what they should enter. Whether they enter Y for Yes and N for No or yes/no or Yes/No or y/n; this needs to be specified for the customer so they know what is a valid response.\nAfter you\u0026rsquo;ve written these functions, go ahead and call them in your main() function after the printing of the restaurant banner. When calling these functions in main(), remember that as long as the user is not entering either of the valid answers to orderFromRestaurantYN(), we must say that they didn\u0026rsquo;t enter their answer in a valid format, show them the menu again, and then prompt them to answer again.\n"},{"uri":"https://nuevofoundation.github.io/workshops/microbit-distance-checker/signal-strength/","title":"Interpreting Signal Strength","tags":[],"description":"","content":"Now that our micro:bit knows how strong the signal it got is, we need to use that to figure out how close we are. Click on the Logic section and grab the \u0026ldquo;if true then / else\u0026rdquo; block. Drag that inside the radio received block, just under where we set the strength variable. Go back into the Logic section and drag the 0 = 0 comparison on top of the true on the \u0026ldquo;if true then\u0026rdquo; line. You code should now look like this:\nNext, we\u0026rsquo;ll tell our micro:bit computer how to tell whether we\u0026rsquo;re 6 feet (2 meters) apart. Open the variables menu and select the bubble that just says \u0026ldquo;strength\u0026rdquo; and drag that on top of the first zero in our if block so it says if strength = 0 then. Now, click on the equal (=) sign to make a list of different symbols appear. Choose the greater than (\u0026gt;) symbol. Lastly, click on the last zero in our if statement and replace it with -67. Your pink \u0026ldquo;on radio received\u0026rdquo; block should now look like this:\nYou might be wondering: \u0026ldquo;Why -67? That seems like a random number.\u0026rdquo; -67 dBm (that\u0026rsquo;s decibel-milliwatts) just happens to be the power level we already measured ahead of time when two micro:bits are 6 feet apart. Different Bluetooth radios, like the one in your phone, might have a different strength at the same distance. The closer your signal is to 0, the stronger it is and the closer you are to the other radio. A signal strength farther from 0 is weaker, meaning you\u0026rsquo;re probably also farther from the radio.\nThat means if the signal we get is stronger than -67 dBm (strength \u0026gt; -67), our micro:bit radios are less than 6 feet away from each other. But if the signal is weaker than that, our radios must be more than 6 feet apart.\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-1/","title":"Activity 1 - Write to console","tags":[],"description":"","content":"Instructions Go to the code containing the GuessTheWord game. Press run. Notice that Press 'run' on the top of the screen to play again. is the only thing that is printed to the console. Let\u0026rsquo;s add a welcome message so that the player knows they playing the Guess the Word game.\nFind // TODO (ACTIVITY 1) in the code. Add a line of code to print Welcome to C# GuessTheWord to the console. If you did this correctly, Welcome to C# GuessTheWord will be printed to the console after pressing run.\n"},{"uri":"https://nuevofoundation.github.io/workshops/guidelines/web-developer/","title":"Web Developer Guidelines","tags":[],"description":"","content":"This document is for website developers only for changing the Nuevo Foundation workshop project templates and style.\nBefore getting started Before adding/updating the website, ensure you have synced with the project team and the existing work in the Project Backlog .\nSetup Follow the instructions in the Getting Started page to install Git and Hugo to test the project locally.\nWeb design styles and structure  Images: Website images should be themes/images CSS Ignore the SCSS files and just use CSS files in /themes/docdock/static/css/ Make sure to add a reference to the CSS you want to include in the head.html file at /themes/docdock/layouts/partials/flex/head.html  Dissecting a Workshop Page  Full page template: To see all of the components of a page including header, menu, body, footer, see /themes/docdock/layouts/_default/baseof.html Head: Meta, CSS, and JS files /themes/docdock/layouts/partials/flex/head.html Top / Menu Navigation: Don\u0026rsquo;t use docDock config.toml values, instead add/edit HTML in: /themes/docdock/layouts/partials/flex/body-before-content.html Left Menu: /themes/docdock/layouts/partials/flex/menu.html Footer Navigation: /themes/docdock/layouts/partials/flex/body-after-content.html Metadata Box: /themes/docdock/layouts/partials/flex/body-after-content.html  Help, the CSS is gone One challenge with Hugo is that a key parameter in the build is the baseURL variable. If the content is loading, and the CSS is not, it\u0026rsquo;s likely an issue with the baseURL setting.\nYou can change the baseURL when building content instead of changing the config.toml file. The example below will minify the CSS and JS, set the baseURL to the production .org URL and copy the results to the public directory.\nhugo --minify --baseURL \u0026quot;https://workshops.nuevofoundation.org/\u0026quot;\nTips and Tricks  Ignore Public: By default, running hugo with no parameters will build the site to the public directory. Make sure you do not add the public directory to source control (it\u0026rsquo;s in gitignore now). Left Nav: You can hide content from the left nav by setting metadata on the file hidden: true (like this workshop\u0026rsquo;s index.md markdown!) Partials: For reusable components to a page, create a new partial under /themes/docdock/layouts/partials/flex/.  "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/activity-1/","title":"Activity 1: Blinking LED","tags":[],"description":"","content":"Wiring Our Blinking LED For your introduction to this system, we\u0026rsquo;re going to turn an LED on and OFF. From this we can get the basics of circuitry and how our program can run and manipulate components.\n Attach the long lead (anode) of your LED to pin 25J and the short lead (cathode) anywhere in the blue [-] line. Attach a 220 resistor with one leg in 25H and the other anywhere in the red [+] line. Attach one end of a jumper wire to anywhere in the same red [+] line on the Breadboard as Step 2 and the other to 5V on the Elegoo. Attach one end of a jumper wire to 31Z on the Breadboard and the other to GND (ground) on the Elegoo. Plug in the Arduino board via USB to your PC and open the Arduino IDE application.  Color-coding wires is common and really helpful! Here we used red for positive charge and black for negative charge but the color doesn’t matter so long as you can remember what is what.\n\rOpening LED Sample Code Click on File -\u0026gt; Examples -\u0026gt; 01.Basics -\u0026gt; Blink  Now click the upload button to deploy the program to the Arduino.  EXTRA: Notice the timing of the LED turning on and off. What do you think you could change in the program to modify that timing? If you said the number 1000 in delay (1000); you are RIGHT! Change that number (don’t forget to hit the upload button again). Notice a difference? Why do you think 1000 is 1 second? How long would 10 minutes be? Why?\n"},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/downloading-your-program/","title":"Downloading your program","tags":[],"description":"","content":"At the bottom of your workspace you should see this bright pink download button next to the name of your program. You can name your program anything, here it’s called adafruit_musicalfruit. Click on the download button.\nYou should see a window popping up, asking where to save your file. It should default to the Downloads folder, if not, navigate to your downloads folder and save the file there.\nNow you can plug your USB cable into the computer. You should see some rainbow lights! This means your chip is on and running the default program. We are going to replace that with our program. Click the small reset button in the center of the chip. The lights should turn red then green. If your lights didn’t go green, quickly double click the reset button and wait a few seconds.\nOnce your lights are green, open up a Windows Explorer window if one doesn’t pop up. You should now see a CPLAYBOOT drive. Here it is shown as the D: drive but it could be E:, F:, etc.\nOnce you’ve verified that you can see this CPLAYBOOT, go to the Downloads folder and find the file that you saved there. You need to click and drag that file until you are hovering over CPLAYBOOT. You should see some text pop up saying “\u0026ndash;\u0026gt; Move to CPLAYBOOT”. Drop the file there to copy it to CPLAYBOOT\nAfter you’ve dropped the file in the right place, the green lights will go away to indicate that you’ve successfully programmed your Adafruit!\nCONGRATS! You’ve done it. Feel free to go back and tweak the sounds or your magic number in the comparisons. "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/getting-started-earsketch/","title":"Getting started with Earsketch","tags":[],"description":"intro on how to use Earsketch","content":"\nEarSketch is a free educational programming environment developed at Georgia Institute of Technology. We will be composing music using EarSketch today.\n  To make music, click on EarSketch to open it in a new tab.\n  Now, let\u0026rsquo;s get started. Click on Scripts icon on the left menu bar and select Create a new script. When prompted to enter the script name, enter myjam and click on Create button.\n  Do not delete any of the pre-existing code! We will insert our code in between them.  Recommended for Teachers - Overview of EarSketch Please take a look at overview of EarSketch before you start with the class. It is important to know how to navigate back and forth in the UI.\nThe navigation bar on the left side of the screen is your homebase for navigating through all that EarSketch has to offer.\n  The first item of the navigation bar is the Sounds collection. It is the central location for all the pre-loaded sounds that earsketch has to offer. In the sound browser, you can filter which sounds appear based on the artists, the genre, or instruments.\n  The next icon on the navigation bar is the Scripts pane. This is where we will write our code.\n  The next (third from top) icon is the Share section. You can use this to save your code, download or share it with your friends. We will skip this section for this exercise.\n  The last two icons on the navigation bar are the API Browser and the Curriculum guides.\n  We will use API browser to make music. An Application Programming Interface or API is a set of code that is ready for you to use right away! You may notice two icons to the right of each API. The first icon provides a description of the API and an example on how to use the API. The second icon copies and pastes the API into the code editor, so you do not even need to type it! We will use a couple of these in the coming sections.\nThe last icon in the above picture shows the Curriculum guide. If you want to know more about EarSketch, you can explore the section that appears on the right side of the window when you click on it. We will skip this section for this exercise.\n"},{"uri":"https://nuevofoundation.github.io/workshops/security-phishing/other-phishing-types/","title":"More about phishing","tags":[],"description":"","content":"Alice goes on to explain different kinds of phishing scams other than the email phishing.\nSmishing (SMS Phishing) Phishing conducted via Short Message Service (SMS), a telephone-based text messaging service. A smishing text, for example, attempts to entice a victim into revealing personal information via a link that leads to a phishing website.\nIn the above image, an unknown sender texts you about free deals on iPads and lures you into clicking a malicious link.\nMalvertising Malvertising is malicious advertising that contains active scripts designed to download malware or force unwanted content onto your computer.\nIn the above image, a malvertisment blends into a genuine website. It encourages you to click on the download button. This can lead you to install a virus or a malware on your computer.\nSearch Engine Phishing Some phishing scams involve search engines where the user is directed to products sites which may offer low cost products or services. When the user tries to buy the product by entering the credit card details, the phishing site collects those details. There are many fake bank websites and fake product ads that are used to lure users into clicking a malicious link.\nMany search engines prioritize advertisement links for a search query. Make sure to verify the link before clicking on it so you avoid going to a malicious website as highlighted in the above image.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/colors_and_pixels/pixel-on-image/","title":"Pixels on an Image","tags":[],"description":"","content":" Pixels Pixels are a small area of color on a display screen. Images are formed by pixels on the screen. We can manipulate pixels by changing the RGB Value, which are essentially changing the value of red, green and blue color on each pixels. When we see the an image on the screen, it is made of huge numbers of tiny pixel. Each tiny pixels has its only unique position and color it displays.\n       Let\u0026rsquo;s jump into making images. Don\u0026rsquo;t forget, we learned how to open and save images in Python using the Pillow module in the earlier sections!\nMaking images using pixels # Remember to import Image from PIL import Image Image.new(mode, size) Image.new(mode, size, color) Image.new() creates a new image with the given mode and size (and optionally, the color). Here, we can use RGB as mode. Size is a (width, height) value of an image. Color is the RGB Color of the pixels. We can also use color names rather than RGB values. If you do not initialize color value, the image is filled with black.\nLet\u0026rsquo;s see some examples # Remember to import Image from PIL import Image img = Image.new(\u0026#39;RGB\u0026#39;, (200,100),(100,100,100)) img.save(\u0026#39;pil_grey.png\u0026#39;) The variable img stores the PNG image that looks like this:\n# Remember to import Image from PIL import Image img=Image.new(\u0026#39;RGB\u0026#39;, (200,100),\u0026#34;black\u0026#34;) img.save(\u0026#39;pil_black.png\u0026#39;) Here, specifying black as the RGB color creates and stores the PNG image that looks like this:\nChanging a pixel in an image What if we want to put another pixel in an image?\nThe function img.putpixel( (x,y), (r, g, b)) puts a new pixel on the image with the given position and color. Position is a (width, height) value of that pixel\u0026rsquo;s location on the image. Color is the RGB Color of that pixel.\nLet\u0026rsquo;s see an example # Remember to import Image from PIL import Image img=Image.new(\u0026#39;RGB\u0026#39;, (200,100),\u0026#34;yellow\u0026#34;) img.putpixel( (100,50), (0, 0, 0)) img.save(\u0026#39;pil_black-dot.png\u0026#39;) After creating a 200x100 yellow image, the putpixel function puts a tiny small dot in the middle of this yellow block. This is one small pixel - in fact, it\u0026rsquo;s so small you may have to expand the image to actually see it!\n"},{"uri":"https://nuevofoundation.github.io/workshops/security/spy-game/","title":"Spy Game","tags":[],"description":"","content":"From our last activity we learnt that a strong password is a combination of random characters (possibly having uppercase and lowercase letters), numbers and some special characters. Now it\u0026rsquo;s time to play Hacked or Safe!\nFrom a list of passwords used by our Nuvi select the strongest password which cannot be hacked by Eve.\n Can this password be Hacked? Yes No   Can this password be Hacked? Yes No   Can this password be Hacked? Yes No   Can this password be Hacked? Yes No  CONGRATS! You did it. See the answers by clicking the button below. Done  "},{"uri":"https://nuevofoundation.github.io/workshops/debugging/03-identify-the-problem2/","title":"Step 1 - Finding the problem (Part 2)","tags":[],"description":"","content":"Print Statements Compiler errors are one thing, but runtime errors and bugs are another. While the compiler can easily tell you where to look, we’ll need to find runtime bugs ourselves. To do so, we’ll need to know what the program is doing when the bug happens: the values of variables, which program instruction is being executed, etc. In smaller applications (like in school assignments), we can use print statements to quickly figure out the program’s running state. Print statements are a quick and dirty way to look into a program as it’s running, and with luck you’ll be able to find what’s causing the bug without much infrastructure.\nBinary Search Let’s look at an example of how you can use print statements effectively to fix a bug. One of the simpler algorithms you will learn or have learned is binary search, which lets you search for an item in a sorted list in logarithmic time. The idea is to check the middle of the sorted list and see if it matches the element we want; if we find the element, the algorithm is finished. If the element is higher, we search the upper half of the list. Otherwise, we search the lower half of the list. The program below tries to implement this algorithm in C.\n\rFirst, we’ll need to understand what the program is doing.\n The main function first waits for the user to type a number. It then calls the binary search function, binary_search(). binary_search takes three arguments: The array, the array length, and the element we are searching for. binary_search will then call the recursive function, rbin_search(), which takes 4 arguments: The array, the index to start searching from, the index to stop searching on, and the element query. rbin_search() performs the binary search and returns the element if it is found - in theory.  To compile the program, open the Shell tab and use\nmake BinarySearch\rYou can run the program with the command\nexamples/BinarySearch\rThe implementation we gave you seems to work. After running the program, try inputting 1. The program seems to find the answer immediately. However, try inputting 2. The program stalls!\nYou can use Ctrl + C to terminate a running program on the command line. (⌘ + C on Mac)\n\rWhen faced with such a problem, you should ask yourself, what is the behavior of the bug? In this case, it is an infinite loop occuring somewhere in the code. This should quickly narrow down where you need to search for the bug, because there\u0026rsquo;s only one function where infinite looping can occur: the recursive rbin_search() function.\nA recursive function tries to break a problem into a bunch of smaller problems, which are easier to handle separately as a set of base cases. A recursive function that doesn\u0026rsquo;t terminate usually has problems in its handling of base cases and/or how it breaks up the problem into smaller ones. So, when dealing with such a problem, it is important to ask the following questions:\n What are the base cases we are trying to handle? Could there be a bug in the base cases?   Click to show answer  The base case for binary search is if we find manage to find the element, we return it. Otherwise, if the search is over (i.e. the size of the region we are searching is 0), we return NULL.\n \r\rWhat makes the problem we are trying to solve smaller? Is there a bug in how we handle that?   Click to show answer  To make the problem smaller, binary search looks in only the relevant half of the array. We constantly compare the desired element with the middle element.\n \r\rYou can insert print statements to show the state of variables as the program runs. A useful thing to know, for example, is the values of hi and lo because they indicate whether the problem is shrinking. If hi and lo don\u0026rsquo;t change and are never equal to each other, we\u0026rsquo;ve found the problem! Try inserting a print statemente before the line if(key \u0026lt; query\u0026gt;), and print out the values of hi and lo. Don\u0026rsquo;t forget to recompile the code!\n Spoiler  You should see that the program is infinitely looping, because the values of hi and lo stop changing and thus never fulfill the exit condition. This is a case where the programmer overlooked how the problem gets smaller: When we recursively call rbin_search, because hi and lo have inclusive ranges, the problem doesn\u0026rsquo;t get smaller for certain inputs.\nYou can try to fix the problem yourself, but you aren\u0026rsquo;t required to for this part of the workshop. As a hint for those who want to try, think about how the middle element (index) is used after we compare it with the query. Do we need to include it as part of the next recursive call?\n \r\rPrint statements are not a good tool to use when the program complexity grows. They are extremely inefficient and if a programmer forgets to remove them, someone else (e.g. a user running your program) might see the print statements. In addition, if you’re using a lot of print statements it will negatively affect performance. In summary, only use print statements for small projects and for 5 minute debugging.\n\rWhen you run it, the program runs into a segmentation fault, which means that it tried to access some memory that it wasn’t allowed to. (For a more detailed explanation, see the aside).\rWe need to find where the program is trying to access this illegal memory. We can try to ensure that the program stays within bounds by writing an assertion, i.e. we never look outside the memory bound we expect.\r(Work)\rAha! It seems that the assertion has caught something. The program is trying to dereference a `NULL` pointer, which should never happen. The fix is simple - we need to add an `if`-statement to make sure that the pointer is not `NULL`. --\r"},{"uri":"https://nuevofoundation.github.io/workshops/security/summary/","title":"Summary","tags":[],"description":"","content":"Remember the characteristics of a strong password are:  At least 8 characters - the more characters, the better A mixture of letters and numbers Inclusion of at least one special character, e.g., ! @ # ? ] Note: do not use \u0026lt; or \u0026gt; in your password, as both can cause problems in Web browsers  A strong password is hard to guess, but it should be easy for you to remember - a password that has to be written down is not strong, no matter how many of the above characteristics are employed.\nSolution In the Spy Game the passwords \u0026ldquo;Ilovemypet\u0026rdquo; and \u0026ldquo;12345678\u0026rdquo; are weak and can be easily hacked by a malicious person.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-tictactoe/activity-4/","title":"4. Check the winner","tags":[],"description":"write method to check the winner with an input board","content":"Displaying a Winner Write a method getWinner(String[] curBoard) that returns the winner in a String with an array input of the current game board.\n If the player wins, return \u0026quot;Congratulations! \\nYou won the Game :)\u0026quot;. If the computer wins, return \u0026quot;Game Over! \\nYou lost the Game :(\u0026quot;. If there\u0026rsquo;s a tie, return \u0026quot;It's a TIE! Try again\u0026quot;. If there isn\u0026rsquo;t a winner yet, return \u0026quot;\u0026quot;.  There are several ways to write this method.\nGive it a try in the following repl.it first; it will tell you if your method is correctly written!\n Ideas/Hints for writing the method getWinner()  Concatenate Strings at the 3 positions that consist a horizontal, vertical, or diagonal row. Use equals() to check if each of the concatenated Strings is \u0026quot;XXX\u0026quot; or \u0026quot;OOO\u0026quot; for a winner. (You can even create another method that checks if an input String is \u0026quot;XXX\u0026quot; or \u0026quot;OOO\u0026quot;) If all the spots in the array is filled (a for loop can be helpful) and there is no winner, the game ends in a tie. \n Calling the Winner Method In main(), call the method getWinner() after the line of code where you place the player\u0026rsquo;s move, \u0026quot;X\u0026quot;.\nCheck if the game should continue (when there is no winner or a tie).\nIf there is a winner or a tie, print out the final board and the game result! And, add the line of code break;, which prompts the program to break out from the while loop!\nRepeat Step Above In main(), repeat the code in the previous step (check winner and print result if needed) after you place the computer\u0026rsquo;s move, \u0026quot;O\u0026quot;.\nClose the Scanner Object Outside of the while loop, add the code sc.close() to close the Scanner object from reading any new inputs.\nIt is good practice to close the Scanner object if we won\u0026rsquo;t be getting any more inputs after we break from the while loop!\nAll Done :) ! You should now have a functioning TicTacToe game! You should be so proud of yourself for finishing this workshop! Good Job 👍!\nAs an overview, this should be the structure of your code: "},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/activity-4/","title":"Control Structures","tags":[],"description":"Introduce if-else, for, and while loops in Java.","content":"\nMake a Decision: If-Statement Patrick 🐥 is a very polite duck who likes to greet everyone he meets with \u0026ldquo;Good Morning,\u0026rdquo; \u0026ldquo;Good Afternoon,\u0026rdquo; or \u0026ldquo;Good Night\u0026rdquo; depending on the current time.\n(image by National Geographic: giphy.com/natgeochannel)\nAs we learned before, we can print these statements as below:\nSystem.out.println(\u0026#34;Good Morning\u0026#34;); // say it between 0:00 - 11:59 System.out.println(\u0026#34;Good Afternoon\u0026#34;); // say it between 12:00 - 19:59 System.out.println(\u0026#34;Good Night\u0026#34;); // say it between 20:00 - 23:59 However, we also know Patrick 🐥 should only decide to say one of these statements based on the current time.\nIn other words, we need to write code that makes a decision on what to print based on the conditions of the situation (conditionally).\nIn Java, we make a decision by using an if statement or an if\u0026hellip;else statement. Read the notes below:\nIf Statement if(boolean expression){ Action(s) to Take } An if statement follows the structure shown above. The actions to take (statements) in the block will only be executed if the boolean expression is true. Otherwise, the program will skip to the statement after the block if the Boolean expression is false.\nIf-Else Statement if(boolean expression){ Action(s) to Take A }else{ Action(s) to Take B } An if-else statement follows the structure shown above. If the boolean expression is true, the program will execute the Action(s) to Take A within the if block. Otherwise, the program executes only Action(s) to Take B within the else-block.\nExample boolean likeMusic = true; if(likeMusic == true) { System.out.println(\u0026#34;I like Music\u0026#34;); } else { System.out.println(\u0026#34;I don\u0026#39;t like Music\u0026#34;); } The code above will print the statement I like Music because the boolean expression, likeMusic == true, is true.\n Let\u0026rsquo;s revisit the greating example above, and make decision for Patrick on whether to say \u0026ldquo;Good Morning,\u0026rdquo; \u0026ldquo;Good Afternoon,\u0026rdquo; \u0026ldquo;Good Night\u0026rdquo;.\nPatrick should say \u0026ldquo;Good Morning\u0026rdquo; between 0:00 - 11:59, \u0026ldquo;Good Afternoon\u0026rdquo; between 12:00 - 19:59, and \u0026ldquo;Good Night\u0026rdquo; between 20:00 - 23:59.\n We have a variable currentHour that stores the current hour. Fill out the correct boolean expression A and boolean expression B to complete the program. Test your result by assigning the variable currentHour to numbers from 0 to 23:   Repeat It Again: For-Loop, While-Loop In math class, Patrick\u0026rsquo;s 🐥 teacher ask the class to solve a math challenge, and he might need some help.\nThe teacher asks them to find the sum of 1, 2, 3, \u0026hellip;., 100. That is what is 1 + 2 + 3 + 4 \u0026hellip; + 99 + 100?\nWhile we can plug this into a calculator, that is gonna take a while. Thankfully, in Java, you can easily calculate this in 3 lines with the help of a for loop or while loop.\nFor loops and While loops are control structures in Java that allow you to execute blocks of code multiples times.\nWhile Loop while(boolean expression){ Action(s) to Take } Action(s) to Take in the while block will be executed as long as the boolean expression is true.\nThe following is an example that prints out 1 through 10:\nint number = 1; while(number \u0026lt;= 10){ System.out.println(number); number = number + 1; // number is incremented by 1 } In the while loop above, the program will print out the value of number and increment number. This step will be performed as long as number \u0026lt;= 10, and in this case the loop terminates when number is 11.\nNote: For while loops, you must remember to increment the conditional variable, otherwise you will introduce an infinite loop into your program.\nFor Loop for(initialization; termination condition; update statement){ Action(s) to Take } In a for loop, there are three parts the in condition block: initialization, termination condition, and update statement.\n When executing a for loop, the program will execute the initialization part. An example is, int number = 1. Next, the program checks for termination condition. An example is number \u0026lt;= 10. If it is true:  execute the Action(s) to Take execute the update statement (an example is number = number + 1)   Repeat step 2 and 3. If the termination condition is false, exit the for loop.  The following is an example that prints out 1 through 10:\nfor(int number = 1; number \u0026lt;= 10; number = number + 1){ System.out.println(number); } \n After learning about for loop and while loop, let\u0026rsquo;s see how do we help Patrick 🐥 and calculate 1 + 2 + 3 + 4 \u0026hellip; + 99 + 100 easily?\nLet\u0026rsquo;s try to do it in a while loop:\n We have a variable called total that tracks the total addition sum we get so far. We have a variable called num that tracks the next number to be added to total. Write out the appropriate boolean expression and write out the while loop.  By following those step we will get a while loop like this:\nint total = 0; int num = 1; while(num \u0026lt;= 100){ total = total + num; num = num + 1; } System.out.println(\u0026#34;Answer calculated in a while loop: \u0026#34; + total); Test this out below by clicking Run and write a for loop version that calculates the same thing! You should get the same answer!\n "},{"uri":"https://nuevofoundation.github.io/workshops/unity/making-nuvi-move/","title":"Making Nuvi Move","tags":[],"description":"","content":"Now that we know what a Script looks like, let\u0026rsquo;s actually make one.\nFirst, we want to create a new folder called \u0026ldquo;Scripts\u0026rdquo; in Assets under the Project window, similar to the Drawings folder. We will do this because it is better practice to have all the scripts in an easy to access place. Double click the Scripts folder and create a script by right clicking and selecting \u0026ldquo;C# Script.\u0026rdquo; You can also go under the \u0026ldquo;Assets\u0026rdquo; tab and choose \u0026ldquo;Create -\u0026gt; C# Script\u0026rdquo; as shown below.\nName this script \u0026ldquo;PlayerMovement\u0026rdquo; and drag and drop this script into the Nuvi Inspector window. We can also search for the script name in the Nuvi Inspector like we did for the Rigidbody2D component.\nOpen the script and copy and paste the code below:\nusing System.Collections; using System.Collections.Generic; using UnityEngine; public class PlayerMovement : MonoBehaviour { public float speed; private Vector3 movement; //(x,y,0) vector  private float move_x; //x coordinate of player  private float move_y; //y coordinate of player  void Start() { speed = 7f; movement = new Vector3(0.0f, 0.0f, 0.0f); } void Update() { move_x = Input.GetAxisRaw(\u0026#34;Horizontal\u0026#34;); //returns a -1/0/1  move_y = Input.GetAxisRaw(\u0026#34;Vertical\u0026#34;); movement = new Vector3(move_x, move_y, 0.0f); } void FixedUpdate() { if(movement != Vector3.zero) //if no input, then don\u0026#39;t move  { rb.MovePosition(transform.position + speed * movement * Time.deltaTime); //physically moves Nuvi in the direction  transform.rotation = Quaternion.LookRotation(transform.forward, -movement); //for facing the direction its moving  //-movement because otherwise it will face the opposite direction since transform is facing downwards  } } } If we were to try to run the script now, it would not work because of compiler errors. To fix this, we need to add public Rigidbody2D rb; under public float speed;. Then save in order to update the script into Unity.\nAs we can see in the PlayerMovement section in the Nuvi Inspector, the rb variable is empty. We need to drag and drop Nuvi\u0026rsquo;s rigidbody2D from their inspector into the rb variable. Now, try running the game!\nLooking all good! \u0026hellip;Or is it?\nTake a moment to observe how Nuvi moves horizontally/vertically compared to diagonally. Nuvi actually moves a little bit faster diagonally. We should fix this — it\u0026rsquo;s a small detail, but an important one. To understand why, we need to bring in some math.\nRecall Pythagorean\u0026rsquo;s Theorem, a2 + b2 = c2. When Nuvi moves diagonally, the horizontal and vertical movements are being merged together. This happens in movement = new Vector3(move_x, move_y, 0.0f).\nOur game receives \u0026ldquo;1\u0026rdquo; as horizontal input when horizontal keys are pressed, and \u0026ldquo;1\u0026rdquo; as vertical input when vertical keys are pressed. But when they\u0026rsquo;re pressed at the same time, our game uses the Pythagorean Theorem to figure out Nuvi\u0026rsquo;s diagonal movement, c.\nIf we set a=1 and b=1, then our equation looks like:\na2 + b2 = c2\n12 + 12 = c2\n2 = c2\n√2 = c\n1.414\u0026hellip; = c\nSo, Nuvi is actually moving 1.414 times faster than they do horizontally or vertically.\nTo fix this, add movement = movement.normalized; under movement = new Vector3(move_x, move_y, 0.0f). This line will turn that 1.414 into a 1. Now run the game to see that Nuvi moves at the same speed diagonally\n There\u0026rsquo;s also an important thing that\u0026rsquo;s missing in our game. Do you notice how Nuvi can run off the screen? Now that is a big problem — we don\u0026rsquo;t want Nuvi running off into space, do we? In the next lesson we will thoroughly fix this.\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/puzzle2/","title":"Puzzle 2","tags":[],"description":"","content":"Let\u0026rsquo;s add a welcome message that the user can see when they start your app!\nGo to MainActivity.kt and find // PUZZLE 2 in the code and write a toast that welcomes the user to your game with \u0026ldquo;Welcome to Tic-Tac-Toe!”. Now press the play button (►) at the top of Android Studio and your app should look like this:\nHELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help. Beware of the following when coding in Android:\n The t in Toast is capitalized. Make sure the sentence you wish to show is surrounded in quotation marks, and that the parantheses are in the right place. Do not delete any curly braces { or }. \n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-2/","title":"Activity 2 - Determine User Location","tags":[],"description":"Use a Linux command to determine what directory you are currently in","content":" So before we can stop the hackers, we need to learn to navigate the Linux filesystem.\nWhat is a filesystem? A filesystem is a structured collection of files and data on a computer disk or drive. The highest level of a filesystem is referred to as the \u0026ldquo;root\u0026rdquo;. You can think of it as the beginning of the filesystem.\nFun fact: filesystems are often described as a \u0026ldquo;tree\u0026rdquo;. This is because the filesystem looks like an upside down tree with each folder as a branch or leaf. For example, your filesystem may look like the below.\n On a windows computer, you can browse the computer\u0026rsquo;s \u0026ldquo;C:\u0026quot; drive filesystem in the \u0026ldquo;file explorer\u0026rdquo; like below\nOn a Mac computer, you can browse the computer\u0026rsquo;s home filesystem in \u0026ldquo;Finder\u0026rdquo; like below\nWhere in the filesystem are you? We want to find out what our \u0026ldquo;current working directory\u0026rdquo; is. This is the location in the filesystem that you are currently at.\nThe Linux command pwd will display your current location. This stands for Print Working Directory. Try it!\nThe output above is /home/nuvi and its meaning is explained below:\n /: This is the symbol for the root directory of this filesystem. /home: This is the path of the home directory, which is located within the root directory. /home/nuvi: This is the path for the nuvi directory, which is located within the home directory. The output stops here, meaning /home/nuvi is the current working directory where we are located. This process of going into the filesystem through each folder can go on for many more steps in some cases. The path shown and described above is called the absolute path, because it is the path given from the current directory all the way up to the root directory.  How do I move around the filesystem? To move to a different directory, use the command cd. This stands for change directory. The format of this command is cd [directory name].\nIn the output above, you can see that when we type pwd again, the working directory we are in is now Desktop. Try cd ...\nTry one more example of cd below:\ncd .. The .. after the cd command takes you one level up the filesystem tree. The output of pwd now shows we are back where we started. We began in the nuvi directory, moved down the tree into Desktop with cd Desktop, and then moved up the tree with cd ...\nGreat job, next we\u0026rsquo;ll look at how to explore the directories themselves.\n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/answer-key/","title":"Answer Key - Linux Basics","tags":[],"description":"Use a Linux command to determine what directory you are currently in","content":"Activity 1 whoami Activity 2 pwd cd Desktop cd.. Activity 3 ls -l mv Documents/ Downloads/ ls -l Downloads mv Downloads/Documents/ . Activity 4 mkdir files touch file1 vim file1 mv file1 files Activity 5 chmod u=rwx g=rx o=x file1 chmod 751 [insert filename] Activity 6 cd grep -R \u0026quot;Do. Or do not. There is no try.\u0026quot; find . -name *.sh Activity 7 head -n 5 malware.sh tail -n 5 malware.sh cat malware.sh more malware.sh less malware.sh Activity 8 find . -name *.txt grep -R \u0026quot;Do. Or do not. There is no try.\u0026quot; ls -la diff malware.sh secret-message.txt vimdiff malware.sh secret-message.txt Activity 9 rm Doenloads/malware.sh rm files mkdir files Activity 10 mv secret-message.txt . ls -l cp secret-message.txt file1 ls cd files cp secret-message.txt file1 ls -l Activity 11 tar -f files.tar.gz "},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/activity-3/","title":"Activity 3 - Displaying Clothing Samples","tags":[],"description":"","content":" Now, you will be displaying all of your clothing samples by doing the following:\nCopy the following code into your Colab notebook. This displays a collection of images along with their specific category.\nplt.figure(figsize=(10,10)) #sets the image size to 10x10 inches for i in range(25): #displays first 25 images with their class name plt.subplot(5,5,i+1) plt.xticks([]) plt.yticks([]) plt.grid(False) plt.imshow(train_images[i], cmap=plt.cm.binary) plt.xlabel(class_names[train_labels[i]]) plt.show() #shows images with their labels Question 1 Your supervisor hands you out around 15-20 more clothing samples, which you will have to include in your program. Change the \u0026ldquo;for loop\u0026rdquo; so that there are 6 rows and 7 columns. How many images should you display?\nThink about where you need to change the code to display this. The code currently displays 5 rows and 5 columns.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-5/","title":"Activity 5: More advanced filters","tags":[],"description":"","content":" In the last section, we saw an example of creating a blue filter and thought about how to create the grey filter. Now, let us create our grey filter together.\nExample - Create a grey filter Let us change the original cat image below with our grey filter together!\n# We need to import PIL package to allow manipulation with pixels. from PIL import Image # Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) # Grey filters for i in range(img.size[0]): # For every col: for j in range(img.size[1]): # For every row color = img.getpixel( (i,j)) # Get color  GREY = (color[0] + color[1] + color[2]) // 3 # Average the pixel values img.putpixel((i,j),(GREY, GREY, GREY)) # Set the color accordingly # Save the cat after filtering img.save(\u0026#34;Mycat.png\u0026#34;) Remember, to set a grey pixel all three values of RGB have to be the same. However, setting each pixel to the same random value (ex. 200) will make the whole image grey, rather than just adding a filter on top of the existing cat image.\nHow can we best figure out how to set a pixel to be the \u0026lsquo;greyed\u0026rsquo; version of it? We can take an average of each value of the RGB colors. You can use // to do an integer division, which guarantees that the result of the average operation is a whole number.\n Wow! This is our cat after the grey filter.\nExample - Partial filter Now, let us think about how to add filter on only part of our lovely cat.\n# We need to import PIL package to allow manipulation with pixels. from PIL import Image # Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) # Grey filters for i in range((img.size[0] // 2)): # For first-half columns for j in range((img.size[1] // 2)): # For first-half rows color = img.getpixel((i,j)) # Get color GREY = (color[0] + color[1] + color[2]) // 3 # Average the pixel values img.putpixel((i,j),(GREY, GREY, GREY)) # Set the colour accordingly #Save the cat after filtering img.save(\u0026#34;Mycat.png\u0026#34;) Wow! This is our cat after the filter. We only filtered one-forth of the cat on the upper left corner！\nChallenge - Create your own partial filter It\u0026rsquo;s now your turn to filter whichever part you want with different kinds of filters on the cute cat! Exciting！\n  details summary::-webkit-details-marker { display: none; } details summary { width: 100%; padding: .5rem 1rem .5rem 2.5rem; color: #fff; position: relative; cursor: pointer; background:#6bb1e0; } details summary:before { content: \"+\"; color: #fff; position: absolute; line-height: 0; margin-top: 1rem; left: 1rem; font-weight: 200; transform-origin: center; transition: 200ms linear; } details[open] summary:before { transform: rotate(45deg); font-size: 2rem; } details { margin: 2rem 0; position: relative; padding: 0px; display: block; background: #e6f3fb; color: rgba(47, 103, 141, 0.995) !important }   Advanced Wouldn\u0026rsquo;t it be nice if we could take the steps above and make it simpler? Let\u0026rsquo;s do this by using the Pillow ImageFilter function filter() \u0026amp; convert().\nTo use the filter() function, you can specify the ImageFilter type within the parentheses. For example, image.filter(ImageFilter.BLUR) will make the image blurry. Or, if you use ImageFilter.CONTOUR instead, it will add a ‘sketch’ type effect to your image.\nFor example, for the \u0026lsquo;img\u0026rsquo; above:\nblurredImage = img.filter(ImageFilter.BLUR) blurredImage.save(\u0026#34;myCatBlurred.jpg\u0026#34;) You should see the saved cat image is blurred. Try this with a few other image filters until you find one you like!\nAdditionally, we can use the convert() function to set our image to black \u0026amp; white. To use this function, you can specify the mode you want to convert your image to. The most common ones are \u0026ldquo;L\u0026rdquo;, which converts an image to greyscale, and “RGB” which converts an image to its true color.\nLet’s try it out like this:\ngreyscaleImage = img.convert(\u0026#34;L\u0026#34;) greyscaleImage.save(\u0026#34;myCatBW.jpg\u0026#34;) If you combine the blurred function and the black and white convert function, you\u0026rsquo;ll get something like this – purrfect!\n  "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/placing-things/","title":"Placing Things into Phaser","tags":[],"description":"","content":"Placing Text Now, you will learn how to place things within Phaser. Look at the repl below.\nLet\u0026rsquo;s first go over how to place text!\nmessage = this.add.text(20, 10, \u0026#34;Hello World!\u0026#34;, { font: \u0026#34;25px Arial\u0026#34;, fill: \u0026#34;white\u0026#34; }); These lines of code create a variable named \u0026ldquo;message.\u0026rdquo; This variable adds the text \u0026ldquo;Hello World\u0026rdquo; to the (X, Y) coordinate (20, 10) on our game window. The code also specifices that the text is created to be the color white, have font Arial, and have font size 25 px.\nPut this line in your create() method at the bottom of the page and see if it pops up in your game window.\n When creating text, the variable name is not the text that gets displayed the screen, it is what you put in quotations This syntax can also be used to place text that is stored in a String variable. \n Help! My game window is very small! Don\u0026rsquo;t worry, it\u0026rsquo;s actually relatively big, but repl minimizes it as default. You can extend your window view by dragging around the bars in between them.\n Placing a Background Texts are very simple, but when we want to use our own custom sprites for the game (which you almost always will), you have to first load the sprite in preload() before you specify its location in create().\nLet\u0026rsquo;s start by creating a background. Put this code into your preload() method.\nthis.load.image(\u0026#39;background\u0026#39;, \u0026#39;assets/sky.png\u0026#39;); This simply loads the image into the game. Next, let\u0026rsquo;s add this image to the game with create():\nthis.add.image(400, 300, \u0026#39;sky\u0026#39;); This line simply places the image on coordinate (400, 300). Try it out, and see if your background is no longer a black screen!\nThe coordinate (400, 300) refers to the location where we are placing the center pixel of our image. This means that (400, 300) will be the center of the image. We are placing the image here so that it covers the whole screen like a background should.\n Placing a Character Next, let\u0026rsquo;s put a character into our world.\nThe code that goes into your preload() function looks like this:\nthis.load.spritesheet(\u0026#39;dude\u0026#39;, \u0026#39;assets/dude.png\u0026#39;, { frameWidth: 32, frameHeight: 48 }); This requires a bit more code because it is a spritesheet instead of a simple sprite. Spritesheets look like this: This is the spritesheet for our character. Spritesheets are essentially a collection of sprites of a single character or thing in multiple positions. When played back to back, they will create animation for our game (which we will describe in more detail in the next lesson). Although it is obvious to us that it is a bunch of images of the same character, the computer isn\u0026rsquo;t able to easily detect this on its own. So we have to have more syntax to tell the computer how big each character sprite is in the spritesheet (in this case, 32x48).\nThe syntax to place this spritesheet in create() is nearly the same as with the image, but with a physics tag:\ndude = this.physics.add.sprite(250, 200, \u0026#39;dude\u0026#39;); In this line, we are creating variable \u0026ldquo;player\u0026rdquo; that adds the first image in the spritesheet at coordinate (250, 200). The image is also given the name \u0026ldquo;dude.\u0026rdquo;\nIn this line, player is the name of a variable that we are creating. 250 and 200 are the X and Y coordinates that we have placed the sprite, so it will be placed at the coordinate (250, 200) on our screen. \u0026ldquo;dude\u0026rdquo; is the name of our sprite, but it won\u0026rsquo;t come into play in this particular lesson.\nTry adding in the character! Do you see the character on your screen?\n In order to see the character, the dude variable in create() MUST be created after the background. This is because code is read by the computer from top to bottom, so if the character is placed before the background, then the computer will put the background on top of the character, covering him and making him not visible by the user. The dude is supposed to be looking to the left because at first placement, spritesheets will always be placed in the first entry in the sheet, and for our dude, he\u0026rsquo;s looking to the left \n "},{"uri":"https://nuevofoundation.github.io/workshops/guidelines/formatting/","title":"Formatting","tags":[],"description":"","content":"When creating or modifying workshops, you\u0026rsquo;ll write them using standard Markdown syntax, plus some additional custom syntax. This page explains what syntax to use to add specific formats to a workshop.\nFormatting Reference  Standard Markdown cheatsheet  Custom Formatting Options using shortcodes   Formatting Examples This theme includes a number of options to customize the look and feel of your site. Below, you can find several usage examples, which include the syntax to use followed by what is actually shown on a page when you use that syntax.\nAlerts Info {{\u0026lt; alert theme=\u0026quot;info\u0026quot; \u0026gt;}}**This** is an info {{\u0026lt; /alert \u0026gt;}}  This is an info Success {{\u0026lt; alert theme=\u0026quot;success\u0026quot; \u0026gt;}}**Yeahhh !** is a success{{\u0026lt; /alert \u0026gt;}}  Yeahhh ! is a success Warning {{\u0026lt; alert theme=\u0026quot;warning\u0026quot; \u0026gt;}}**Be careful** is a warning{{\u0026lt; /alert \u0026gt;}}  Be careful is a warning Danger {{\u0026lt; alert theme=\u0026quot;danger\u0026quot; \u0026gt;}}**Beware !** is a danger{{\u0026lt; /alert \u0026gt;}}  Beware ! is a danger Buttons {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; \u0026gt;}} go to Nuevo Foundation {{\u0026lt; /button \u0026gt;}}  go to Nuevo Foundation  Success Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;success\u0026quot; \u0026gt;}} Success {{\u0026lt; /button \u0026gt;}}  Success  Info Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;info\u0026quot; \u0026gt;}} Info {{\u0026lt; /button \u0026gt;}}  Info  Warning Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;warning\u0026quot; \u0026gt;}} Warning {{\u0026lt; /button \u0026gt;}}  Warning  Danger Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;danger\u0026quot; \u0026gt;}} Danger ! {{\u0026lt; /button \u0026gt;}}  Danger !  Default Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;default\u0026quot; \u0026gt;}} Danger ! {{\u0026lt; /button \u0026gt;}}  Danger !  Expand {{\u0026lt;expand \u0026quot;Click here to expand!\u0026quot;\u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. {{\u0026lt; /expand\u0026gt;}}   Click here to expand!  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  Notices Note Notice {{\u0026lt; notice note \u0026gt;}} A notice disclaimer {{\u0026lt; /notice \u0026gt;}}  A notice disclaimer\n Info Notice {{\u0026lt; notice info \u0026gt;}} An information disclaimer {{\u0026lt; /notice \u0026gt;}}  An information disclaimer\n Tip Notice {{\u0026lt; notice tip \u0026gt;}} A tip disclaimer {{\u0026lt; /notice \u0026gt;}}  A tip disclaimer\n Warning Notice {{\u0026lt; notice warning \u0026gt;}} An warning disclaimer {{\u0026lt; /notice \u0026gt;}}  An warning disclaimer\n Example icons available Full list here    Icon Icon Name Example Usage        asterisk {{\u0026lt;icon name=\u0026quot;asterisk\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      plus {{\u0026lt;icon name=\u0026quot;plus\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      euro {{\u0026lt;icon name=\u0026quot;euro\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      eur {{\u0026lt;icon name=\u0026quot;eur\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      minus {{\u0026lt;icon name=\u0026quot;minus\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      cloud {{\u0026lt;icon name=\u0026quot;cloud\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      envelope {{\u0026lt;icon name=\u0026quot;envelope\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      pencil {{\u0026lt;icon name=\u0026quot;pencil\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      glass {{\u0026lt;icon name=\u0026quot;glass\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      music {{\u0026lt;icon name=\u0026quot;music\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      search {{\u0026lt;icon name=\u0026quot;search\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      heart {{\u0026lt;icon name=\u0026quot;heart\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      star {{\u0026lt;icon name=\u0026quot;star\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      star-empty {{\u0026lt;icon name=\u0026quot;star-empty\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      user {{\u0026lt;icon name=\u0026quot;user\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      film {{\u0026lt;icon name=\u0026quot;film\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      th-large {{\u0026lt;icon name=\u0026quot;th-large\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      th {{\u0026lt;icon name=\u0026quot;th\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      th-list {{\u0026lt;icon name=\u0026quot;th-list\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      ok {{\u0026lt;icon name=\u0026quot;ok\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      remove {{\u0026lt;icon name=\u0026quot;remove\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      zoom-in {{\u0026lt;icon name=\u0026quot;zoom-in\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      zoom-out {{\u0026lt;icon name=\u0026quot;zoom-out\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      off {{\u0026lt;icon name=\u0026quot;off\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      signal {{\u0026lt;icon name=\u0026quot;signal\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      cog {{\u0026lt;icon name=\u0026quot;cog\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      trash {{\u0026lt;icon name=\u0026quot;trash\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      home {{\u0026lt;icon name=\u0026quot;home\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      file {{\u0026lt;icon name=\u0026quot;file\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      time {{\u0026lt;icon name=\u0026quot;time\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      road {{\u0026lt;icon name=\u0026quot;road\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      download-alt {{\u0026lt;icon name=\u0026quot;download-alt\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      download {{\u0026lt;icon name=\u0026quot;download\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      upload {{\u0026lt;icon name=\u0026quot;upload\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      inbox {{\u0026lt;icon name=\u0026quot;inbox\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      play-circle {{\u0026lt;icon name=\u0026quot;play-circle\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      repeat {{\u0026lt;icon name=\u0026quot;repeat\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      refresh {{\u0026lt;icon name=\u0026quot;refresh\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      list-alt {{\u0026lt;icon name=\u0026quot;list-alt\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      lock {{\u0026lt;icon name=\u0026quot;lock\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      flag {{\u0026lt;icon name=\u0026quot;flag\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      headphones {{\u0026lt;icon name=\u0026quot;headphones\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      volume-off {{\u0026lt;icon name=\u0026quot;volume-off\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      volume-down {{\u0026lt;icon name=\u0026quot;volume-down\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      volume-up {{\u0026lt;icon name=\u0026quot;volume-up\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      qrcode {{\u0026lt;icon name=\u0026quot;qrcode\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      barcode {{\u0026lt;icon name=\u0026quot;barcode\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      tag {{\u0026lt;icon name=\u0026quot;tag\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      tags {{\u0026lt;icon name=\u0026quot;tags\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      book {{\u0026lt;icon name=\u0026quot;book\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      bookmark {{\u0026lt;icon name=\u0026quot;bookmark\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      print {{\u0026lt;icon name=\u0026quot;print\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      camera {{\u0026lt;icon name=\u0026quot;camera\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      font {{\u0026lt;icon name=\u0026quot;font\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      bold {{\u0026lt;icon name=\u0026quot;bold\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}      italic {{\u0026lt;icon name=\u0026quot;italic\u0026quot; size=\u0026quot;large\u0026quot;\u0026gt;}}    "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/change-screen-text/","title":"Change the screen text","tags":[],"description":"","content":"Let\u0026rsquo;s change the start screen text:\nAdd below command in the file [File: start-screen.js] var text = game.add.text(0, 0, \u0026ldquo;Press Space to Start\u0026rdquo;, textOptions);\nWorking Together In the repl.it window below, we started the code with the line var text = game.add.text(0, 0, \u0026quot;Press Space to Start\u0026quot;, textOptions);.\nIn your console you should see Press Space to Start after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/introduction/for-loops/","title":"For Loops","tags":[],"description":"","content":"\n-- When you know exactly how many times you want to loop through a block of code, use a for loop instead of a while loop:\nfor (statement 1; statement 2; statement 3) { // code block to be executed }  Statement 1 is executed (one time) before the execution of the code block. Statement 2 defines the condition for executing the code block. Statement 3 is executed (every time) after the code block has been executed.  The example below will print the numbers 0 to 4:\nfor (int i = 0; i \u0026lt; 5; i++) { System.out.println(i); }  Statement 1 sets a variable before the loop starts (int i = 0). Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end. Statement 3 increases a value (i++) each time the code block in the loop has been executed.  This example will only print even values between 0 and 10:\nfor (int i = 0; i \u0026lt;= 10; i = i + 2) { System.out.println(i); } "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/functions/","title":"Functions","tags":[],"description":"","content":" Functions are a way to organize pieces of similar or repeating code. Rather than having to constantly type out the same code, we can put the desired code in a function and call it whenever we want to use it.\nNote: The purpose of a function is to help reduce redundant code throughout the program.\n Creating a function Define your function - name \u0026amp; parameters To make a function in python, we must use the def keyword. This keyword tells the code editor where the function is defined. def is followed by the name of the function. In order to generalize the function (so that we can use it at multiple places), we might need to send some information to it. This is achieved using parameters. They are placed in between parentheses () and follows right after the name of the function. If no parameters are needed, they can be ignored. The function declaration ends with a colon. Here\u0026rsquo;s what a function looks like:\nMake sure that the first line of your function always ends with a colon :\n Write the function body In Python, indentation defines which code is controlled by the function. For example, look at the following image: The code that is indented underneath the sectionA function is the code that is executed each time function sectionA is called.\nWarning: Since identation is very important in Python, make sure that the body of the function always starts with 2 spaces.\n Using the function - Function call To call a function, input the name of the function and its parameters wherever you want to execute the function. For example, in order to call function sectionA, we would do something like this: Be careful: When making a function in Python, you must define the function and its contents before it is called. In other words, in the code, you need to put the function declaration above the function call. Otherwise, you will receive a NameError like below. See the following figure for an example:  Challenge 1 - Create your own function! Challenge: Create a function called addNumbers that takes 2 parameters called number1 \u0026amp; number2 and prints the sum on console. Call the function addNumbers with parameters 3 \u0026amp; 5. What is printed on the console?\n Challenge 2 Let’s try to create some simple math functions. Create a function called add that takes in two parameters, number1 and number2, and return the sum of the two numbers.\nFirst copy the structure of the triple function. Change the triple function name, and replace the parameter number with number1 and number2, separated with a comma. Both number1 and number2 should be int, and don’t forget to add number1 and number2 together!\n To check that your function is working correctly, add the following code after your function definition, which calls the function add() and save its value in a variable. For example:\n value2 = add(2, 3) print(\"This should print 5: \" + str(value2))  Challenge 3 Can you create functions for subtraction, multiplication, and division?\nTest the functions out by calling each function, saving its return value, then printing it out to the console.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/queues/","title":"Queues: Receiving Orders","tags":[],"description":"","content":"--  A restaurant might receive hundreds of orders at a time and has to prepare the food as quickly as possible to get it delivered to the customer. It’s up to you how you want to store this information. A restaurant should start preparing the food on a first come first serve basis as in a customer that ordered their meal an hour ago should be prepared long before a customer who placed their order only 10 minutes ago. We will implement this behavior by utilizing a queue.\nTopics  Examples \n   Introduction \n   Problem 1: Queue Basics \n    "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/html-attributes/","title":"HTML Attributes","tags":[],"description":"","content":"HTML Attributes Each tag can also have additional information like style attributes that can change the properties of an element. There are attributes that we can use to change the visual appearance of an element, such as the size, the color, and the text font.\nAll attributes are formatted as: attribute-name=\u0026quot;value in quotes\u0026quot;. For example, we can change the color of a paragraph to red with this code: \u0026lt;p style=\u0026quot;color:red\u0026quot;\u0026gt;This text is red\u0026lt;/p\u0026gt;.\nThe image tags need a source, so we need an attribute within the tag to tell the browser where to go get the image from.\nHere is an example: And here is the result: "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-3/","title":"Activity 3 - Change the key assignment to move left paddle","tags":[],"description":"","content":"Activity 3 Kudos! You not only fixed the game boundary, but you are able to give color to objects too. Now, let\u0026rsquo;s see if you can change the keys for paddle movement.\nTo do this, we need to modify one of the parameters we passed in when creating the left paddle object. Remember from the basics section, you defined the Paddle class with UP and DOWN key assignments as its attributes.\nFind // TODO (ACTIVITY 3) in the code. Modify the appropriate attribute value for the left paddle so that pressing the 's' key moves the left paddle down. Notice that currently the downward movement of the left paddle is controlled by the 't' key.\nTry swapping the UP key with a different key. Press run to test your changes.\n  ## Takeaway You have just modified `down_key` attribute in `Paddle` class to influence how the left paddle object should move on screen. "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-3/","title":"Activity 3 - Drawing a hexagon","tags":[],"description":"","content":"Great job! You just drew your first shape in Python with Turtle! Now let’s slightly change the code we already wrote to draw a square to instead draw a hexagon. Alex is a bee, after all, and he needs to draw hexagons to build his first honeycomb.\nTo help you draw a hexagon, think of how many sides a hexagon has. How many degrees are in each angle of a hexagon?\nAs a helpful reminder, this is the code that was used to create a triangle:\nfor i in range(3): turtle.forward(50) turtle.left(120)  "},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/activity-4/","title":"Activity 4 - Conditions","tags":[],"description":"","content":"Very well!\nWe are getting closer and closer to making our secret messages. But let\u0026rsquo;s also not forget that we have to be able to decipher these messages!\nFor that, we are going to enter in the console a 1, if we want to encrypt a message, or the number 2, if we want to decrypt it.\nFor this we will need conditions.\nConditions if / else A condition in programming is an instruction or a group of instructions, which can be executed or not, based on whether a condition is true. It would look something like this: IF(if) this happens, execute these instructions, IF NOT (else), execute these other instructions.\nExample\nif(3 \u0026gt; 1){ cout \u0026lt;\u0026lt; \u0026quot;3 is greater than 1\u0026quot; \u0026lt;\u0026lt; endl; }else{ cout \u0026lt;\u0026lt; \u0026quot;3 is not greater than 1\u0026quot; \u0026lt;\u0026lt; endl; } The program will print:\n3 is greater than 1  if(3 \u0026gt; 1) checks to see if the number 3 is greater than 1. If this is true, then the code block immediately following if will be executed. Otherwise, the code block following else will be executed. In the example, the else block will not run because the if condition is true - 3 is indeed greater than 1.  To create conditions, we usually use logical operators in the parentheses () beside if. Suppose a = 5 and b = 3. Then, the following are examples of logical operators we can use:\n Less than: a \u0026lt; b (is 5 is less than 3?) Less than or equal to: a \u0026lt;= b (is 5 less than or equal to 3?) Greater than: a \u0026gt; b (is 5 is greater than 3?) Greater than or equal to: a \u0026gt;= b (is 5 greater than or equal to 3?) Equals: a == b (is 5 equal to 3?) Not equals: a != b (is 5 not equal to 3?)   For the activity, we are going to use a condition to know if what we want is to create a secret message (encrypt it) or uncover a message (decrypt it).\nFor that, we must follow the following steps:\n Create a variable of type int. Request input from the user, and store the inputted data into the variable of type int. Create an if/else condition to check if the number inputted is equal to 1. If so, then we want to encrypt the message; otherwise, we want to decrypt the message. Print to console in each case what we wish to do. For example, if 1 is inputted, then print out \u0026quot;Encrypt a message\u0026quot;. Otherwise, print \u0026quot;Decrypt a message\u0026quot;.  If you need help, remember that you can go back to the previous activities and review.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/activity-4/","title":"Activity 4 - Interacting with the Customer","tags":[],"description":"","content":"Interacting with the Customer Let\u0026rsquo;s continue interacting with the customer and get their order! In the main() function, the next thing we need to do is create an empty list stored in the variable listOrderItems so that any items they will eventually order are stored here.\nNow let\u0026rsquo;s use our knowledge of if-else statements and while loops to receive the customer\u0026rsquo;s order. If the customer responded No to the question asking them whether they would like to order anything from the menu, then print out a Goodbye statement. Otherwise, ask them to input the first item and quantity they would like to order with a specified format such as \u0026quot;(Example order item: Spring Rolls-2)\u0026quot; provided in the prompt.\nWe\u0026rsquo;ve got the first item the customer wants to order! Well, that\u0026rsquo;s what we think at least\u0026hellip; However, we don\u0026rsquo;t actually know what the customer entered into the input() function, they might have just entered \u0026quot;Baa Baa Baa Ba ba banana\u0026quot; from the Minions movie. Or they might have entered a valid menu item, but it\u0026rsquo;s not in the format you specified. They might have written \u0026quot;Spring Rolls : 2\u0026quot; or \u0026quot;Spring Rolls -2, neither of which is a valid input! Or they might have even given you a NEGATIVE quantity, point being, we have no clue what the customer might have entered, and we need to protect the customer and our program against this invalid input.\nSo let\u0026rsquo;s write a function that will check any user\u0026rsquo;s order item input and call it orderItemChecking(item). Notice how we gave it a parameter? That signals we need to pass in the order item as an argument to this function from the main(). In this function we\u0026rsquo;re going to want to safeguard against all of the possible pitfalls mentioned in the previous paragraph.\nHint: Use if statements to catch incorrect input.\nHint: Return a boolean value, either True if the input is valid or False if the input is invalid.\nHint: A helpful string method to analyze the orderItemInput would be str.split()\u0026hellip; what should we split by?\nSince we can check customer input, let\u0026rsquo;s go back to the main() function and add a while loop in the else block under the call to get the customer\u0026rsquo;s first item. This while loop will continue to ask the user to input a valid order item and quantity just like earlier until orderItemChecking(item) returns True. Remember to store the result of the input() in the same variable as you used when you first asked for input, otherwise the while loop can\u0026rsquo;t continue.\nWhen the user has finally entered a valid first order item, add that item into the list listOrderItems you created earlier.\nSince we\u0026rsquo;ve gotten one item successfully, let\u0026rsquo;s find out if the customer wants to order another item, or another two items, or even more. In order to do this, we\u0026rsquo;ll be writing another helper function, isOrderComplete(), which will ask the user to input either Yes or No similar to the orderFromRestaurantYN() in a specified format until they give us a valid response. If they say Yes, then we return True to indicate that they do want to order at least one more item. Otherwise we return False since they don\u0026rsquo;t want to order anything else.\nOur helper functions are complete! Now we just need to call these functions in the else block of the main() function. The logic for this last part is essentially:\n While isOrderComplete() is True, continue to ask the customer to enter an item from the menu they\u0026rsquo;d like to order and the quantity. Within this while loop\u0026hellip; After the user gives us an item they want to order, check with orderItemChecking(item) to see whether it\u0026rsquo;s a valid input or not. While it\u0026rsquo;s not a valid input, continue to ask the customer to try again until they successfully order another item. Make sure to let them know they gave us an incorrect input. After the inner while loop terminates, indicating the user entered a correct item and quantity, add this item to the list listOrderItems from before.  If some of that process sounded familiar, that\u0026rsquo;s good! It\u0026rsquo;s exactly what we did when we had the user input the first item they wanted to order.\nGreat job! You have successfully taken user input and checked for any errors they might have made, which is awesome!\n"},{"uri":"https://nuevofoundation.github.io/workshops/microbit-distance-checker/light-it-up/","title":"Lighting it up","tags":[],"description":"","content":"We have all our logic written, but no way to tell if we\u0026rsquo;re more than 6 feet apart. Now we\u0026rsquo;ll add some lights so we can actually see when we\u0026rsquo;re far enough apart. Click the Basic section at the top and drag a \u0026ldquo;show icon\u0026rdquo; block into the if part of our logic block. Click on the icon to see a list of other icons and choose the sad, frowning face. Go back to the Basic menu, grab another \u0026ldquo;show icon\u0026rdquo; block, and place it in the else part of the logic block. Change the icon to a smiling face. When you\u0026rsquo;re done, your code will look like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/strings/","title":"Strings","tags":[],"description":"","content":"Strings Anything that is surrounded in quotation marks is called a string. This is how a computer represents words or sentences. For example, \u0026quot;a\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;banana!\u0026quot;, and \u0026quot;Hello World\u0026quot; are strings, but Hello World and 2 are not strings, because the quotation marks are missing.\nYou can combine many strings together using the + operator. For example:\n \u0026quot;Apple\u0026quot; + \u0026quot;Pineapple\u0026quot; produces the string \u0026quot;ApplePineapple\u0026quot;. \u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; produces the string \u0026quot;Nuevo Foundation\u0026quot;.  Console.WriteLine(\u0026#34;Apple\u0026#34; + \u0026#34;Pineapple\u0026#34;); Console.WriteLine(\u0026#34;Nuevo\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Foundation\u0026#34;); Working Together In the repl.it window below, we started the code with the line Console.WriteLine(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;);.\nNote that there are many ways to combine strings together. For example, another way to print Nuevo Foundation would be to write Console.WriteLine(\u0026quot;Nue\u0026quot; + \u0026quot;vo Fou\u0026quot; + \u0026quot;ndation\u0026quot;);.\nWe will brainstorm at least one more way to print the string \u0026quot;Nuevo Foundation\u0026quot; using two + symbols in each Console.WriteLine statement. Verify that Nuevo Foundation is printed out 3 times. In other words, your console should look like this after you press run:\nNuevo Foundation Nuevo Foundation Nuevo Foundation   "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/colors_and_pixels/access-pixel/","title":"Access pixels on image","tags":[],"description":"","content":" More about pixels We have already learned how to make a pure color image using pixels and change a pixel on the image. Now, we will learn how to identify pixels in existing images.\n For information about how to use lists and tuples in Python see more on these pages: Data Structure  Get image data # Remember to import Image from PIL import Image Image.size Image.size[0] Image.size[1] Image.size gives a (width, height) value of an image. Image.size[0] gives the width of the image and Image.size[1] gives the height of the image.\nLet\u0026rsquo;s see an example # Remember to import Image from PIL import Image img=Image.new(\u0026#39;RGB\u0026#39;, (200,100),(100,100,100)) # Let\u0026#39;s print out the image details: print(img.size) print(img.size[0]) print(img.size[1]) The above code will print out:\n(200, 100) 200 100 Here the image size is 200 by 100. The width is 200, the height is 100.\nGet pixel information img.getpixel(x,y) will get a Color value at a certain position. Position is a (width, height) value of that pixel. Color is the RGB Color of that pixel.\nLet\u0026rsquo;s see an example # Remember to import Image from PIL import Image img=Image.new(\u0026#39;RGB\u0026#39;, (200,100),\u0026#34;yellow\u0026#34;) color=img.getpixel((100,50)) # Let\u0026#39;s print out the pixel color print(color) The above code will print out:\n(255, 255, 0) Get RGB value of a pixel Each RGB color gives a tuple value (red, green, blue) of a pixel. Color[0] gives the red value of the pixel, Color[1] gives the green value of the pixel, and Color[2] gives the blue value of the pixel.\nLet\u0026rsquo;s see an example # Remember to import Image from PIL import Image img=Image.new(\u0026#39;RGB\u0026#39;, (200,100),\u0026#34;yellow\u0026#34;) color=img.getpixel((100,50)) # Let\u0026#39;s print out the RGB value of a pixel print(color[0]) print(color[1]) print(color[2]) The above code will print out:\n255 255 0 Here the RGB value breaks down so that red has a value of 255, green has a value of 255, and blue has a value of 0.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-1-set-tempo-add-sounds/","title":"Activity 1 - Set tempo &amp; add sounds","tags":[],"description":"Setting up headphones","content":"\nLet\u0026rsquo;s take a closer look at the pre-existing code and understand what it means. We will be placing our new code between the setTempo() and finish() functions. The setTempo() function allows you to set the overall project tempo.\nQuick Fact: Tempo is the speed at which a piece of music is played. Changing a project\u0026rsquo;s tempo allows for different styles of music to be created. Try changing the tempo of your setTempo function and see what happens! Please make sure it is a number between 45-220.\n Activity 1  Now that our tempo is set, it is time to add sounds. To do so, we must utilize the fitMedia() function. Make sure the cursor in your program is between setTempo() and finish() functions.  Navigate to the Api Browser icon on the left side menu. Scroll through the list to the fitMedia() function. Click on Paste icon on the right corner of fitMedia() to insert the function between the setTemp and finish functions. You may notice that when you paste the function, Earsketch produces some placeholder texts that we will need to replace later. These placeholder texts are also known as parameters.   You can specify your own values for the following:\n fileName - Navigate to the 'Sounds' pane and find a sound you like. trackNumber - Select any positive integer as the track number. startLocation/endLocation - These parameters are quantified in measures. A measure is a segment of time which correlates to a specific number of beats.  If you are not sure what values to choose, try this:\n fitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17)  Your code should now look something like this: from earsketch import * init() setTempo(120) fitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17) finish() \n Make sure the capitalization of the method call is correct. Most programming languages, Python included, are case sensitive. This means that adding capital letters can call a different function than expected. For example: fitMedia() is not the same as FitMedia().\n Once you have input your own parameters, press run, then click on play to listen to your audio clip!  If you see any red text, you have encountered some errors! Please ask for help. The fitMedia() function is the backbone to making music in Earsketch. We will be using this function a lot, so if you have any questions regarding its usage, please ask!    Digital Audio Workstation (DAW) is the area which the sounds appear in. It is at the center top of your EarSketch window. The following is an example of how different sections of a song may look in the DAW. "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/activity-2/","title":"Activity 2 -  Joystick with Serial Output","tags":[],"description":"","content":"Wiring the Joystick Now that you understand how we can get the system to provide signals from the program (outputs) and use those to control LEDs, let’s look at how we can get dynamic inputs into the system. For this activity we will use a joystick input, similar to those used in video game consoles.\n Attach one end of a jumper wire to GND on the joystick and the other to GND on the Elegoo. Attach one end of a jumper wire to +5V on the joystick and the other to 5V on the Elegoo. Attach one end of a jumper wire to VRx on the joystick and the other to A0 (analog pin 0) on the Elegoo. Attach one end of a jumper wire to VRy on the joystick and the other to A1 (analog pin 1) on the Elegoo. Attach one end of a jumper wire to VRy on the joystick and the other to A1 (analog pin 1) on the Elegoo. Attach one end of a jumper wire to SW on the joystick and the other to 2 (digital pin 2) on the Elegoo. Plug in the Arduino board via USB to your PC and open the Arduino IDE application.  Recognizing and printing Analog Inputs We will again use sample code for our programs. This time we\u0026rsquo;ll get it from the elegoo website itself. Copy the following into your Arduino IDE.\n//www.elegoo.com\r//2016.12.09\r// Arduino pin numbers\rconst int SW_pin = 2; // digital pin connected to switch output\rconst int X_pin = A0; // analog pin connected to X output\rconst int Y_pin = A1; // analog pin connected to Y output\rvoid setup() {\rpinMode(SW_pin, INPUT);\rdigitalWrite(SW_pin, HIGH);\rSerial.begin(9600);\r}\rvoid loop() {\rSerial.print(\u0026quot;Switch: \u0026quot;);\rSerial.print(digitalRead(SW_pin));\rSerial.print(\u0026quot;\\n\u0026quot;);\rSerial.print(\u0026quot;X-axis: \u0026quot;);\rSerial.print(analogRead(X_pin));\rSerial.print(\u0026quot;\\n\u0026quot;);\rSerial.print(\u0026quot;Y-axis: \u0026quot;);\rSerial.println(analogRead(Y_pin));\rSerial.print(\u0026quot;\\n\\n\u0026quot;);\rdelay(500); }\rNow click the upload button to deploy the program to the Arduino. Click on the “Serial Monitor” button on the top right of the screen to display the console.  Notice how the X and Y values change when you move the joystick around.  "},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/answer-key/","title":"Answer Key - Adafruit","tags":[],"description":"Easy reference answer key for the adafruit curriculum","content":"Setup In summary:\n The two alligator clips should be clipped into the surface of the oranges. The other side of the clips should be on the A1 and A2 inputs on the adafruit. The USB should be plugged in to the adafruit, but not into the computer.  After setup, the oranges and adafruit should look like this:\nSolution Solution - advanced (with lights) How it Works "},{"uri":"https://nuevofoundation.github.io/workshops/security/answer-key/","title":"Answer Key - Security","tags":[],"description":"Easy reference answer key for the security curriculum","content":"Solution In our Spy Game the passwords \u0026ldquo;Ilovemypet\u0026rdquo; and \u0026ldquo;12345678\u0026rdquo; are weak and can be easily hacked/guessed by a malicious person\n"},{"uri":"https://nuevofoundation.github.io/workshops/debugging/04-identify-the-problem3/","title":"Step 1 - Finding the problem (Part 3)","tags":[],"description":"","content":"Debuggers Debugging code is such a widespread, common problem that people have built entire programs designed to help other programmers debug more efficiently. These are suitably named “debuggers”, and there are plenty of debuggers that work for C. We\u0026rsquo;ll take a look at gdb, a common debugger used on the command line.\nGDB (GNU Project Debugger) is a powerful debugger that lets you debug a program from the command line, which is useful in cases where you don’t have access to a GUI. To use GDB, open a console in the repl.it below. First, compile the program we’ll use with GDB by typing make examples/quicksort (see the aside on quicksort). Next, run gdb examples/out/quicksort. This should open the GDB command line interface. In general, to debug a program with gdb you can use gdb \u0026lt;name of program\u0026gt;.\nQuicksort is an algorithm that sorts an array by first selecting an element in the array as a pivot. Next, the elements are organized into two groups: elements with a value less than the pivot, and elements with a value greater than the pivot. Finally, the algorithm is recursively run on the two groups.\nMore information can be found online.\n\r\rWe can use GDB as an aide in identifying where bugs occur. As usual it is important to understand the program. It runs a recursive implementation of quicksort (see the note for a quick summary). The sorting itself occurs in the sort function. The pivot chosen is the far right element for simplicity, and performs comparisons in the array starting from lo and ending at the pivot index. Here\u0026rsquo;s a picture for a bit more insight:\nFirst, compile the program using the make as usual:\nmake Quicksort\rNow you can \u0026ldquo;attach\u0026rdquo; the program to gdb:\ngdb examples/Quicksort\rWhen we compile the program, we pass in two flags: -g and -Og. The first tells the compiler to add debugging information, meaning that without that flag, gdb would not be able to debug the program. The second tells the compiler to optimize the program in a way that wouldn\u0026rsquo;t affect the program\u0026rsquo;s run structure. Without -Og, the compiler could potentially optimize away some of your code, so a debugger would not be nearly as effective.\nIt is important to keep note of the second flag. For debugging, you should ALWAYS make sure the compiler makes minimal optimizations to your code, because optimizations could drastically change how the code is run!\n\rYou should see something like this:\nMake sure that GDB says that it is Reading symbols from examples/Quicksort..., otherwise you didn\u0026rsquo;t attach the program to GDB. You can exit GDB by entering the command quit (or any of its prefixes: q works) as if it were the normal shell command line.\nTo debug the program, we need to run it from GDB. Enter the command run (or r). This will execute the program as if you\u0026rsquo;d run it from the normal command line.\nThe program first prints the contents of the array to be sorted: an array index along with its corresponding value. This value is used to perform the sort. Next, it runs the sort algorithm, and finally prints out the array sorted along its values. You can see how the array indices are shifted during the sort!\nHowever, it seems that there is an array entry out of place! In theory, we can add a print statement somewhere in the sort\nFrom there, you can use one of the most important tools that GDB provides: breakpoints. A breakpoint tells the debugger to pause the program whenever it reaches that line of code as it is executing. This enables you to take a look at what is happening within the program “in real time”. Note that the debugger does not run the line of code the breakpoint is on until after you continue executing the program.\nTo create a breakpoint in GDB, use the following command syntax: break \u0026lt;filename:line\u0026gt;. For example, to create a breakpoint on line 15 in the quicksort.c file, use the following command:\nbreak quicksort.c:15\rIf you try running the program now using run, the program will halt when it reaches the breakpoint on line 14, and show you some information about the program, such as the line of code it is stopping on.\nWhile the program is paused, you can see the values of variables. The print command evaluates an expression and prints it. For instance, print hi will print the variable hi. You can get more elaborate than that by using entire expressions - print hi + 2 will evaluate hi + 2 and print it.\nYou can manually step through your code by calling next (or n), which will tell the debugger to advance to the next line of code without jumping into a function call. A related command is step, which will move the debugger to the first line of code in a function call. You can try it out by creating a breakpoint within the quicksort function, and try either using next or step to see which line of code you\u0026rsquo;ll land on next.\nIf you want to have your code continue running until the next breakpoint, you can use the continue (or c) command. Finally, to delete a breakpoint, you can use the delete (or d) command followed by the breakpoint number, which you see when you set the breakpoint.\nAnother useful command to know is bt or backtrace. This shows you the calling stack, or which functions were called in order to get to the line of code the program is halted on. This can be helpful in tracking execution order and finding control flow bugs. It also works well to find out how a program crashed by seeing the functions that led up to the crash.\nThere are plenty of commands GDB offers. We recommend using a cheatsheeet that you can find online. These cheat sheets work:\n Reference 1  Reference 2   Planning Where to Place Breakpoints For this example, where is all the sorting actually taking place?\n Click to show answer  The sorting takes place within the for loop. Here, the elements are being moved around.\nAnother place the sorting takes place is in the base case - if there are two elements, the function simply swaps the values if they are not sorted. Does the code reflect that?\n \r\rYou should now insert a breakpoint where much of the sorting takes place (with the `break` command). Next, enter the `run` command, and say 'yes' if GDB asks you to restart the program. The program should stop at your breakpoint.\rHere\u0026rsquo;s where the frustrating part happens - you need to find the faulty variables that cause your program to not work as expected. What variables are changing within the loop?\n Click to show answer  i, pivotIdx, and tmp change (technically tmp is declared inside the loop though).\n \r\rYou can make GDB display these variables every time the debugger pauses by using the `disp` command. Run these two commands:\rdisp i\rdisp pivotIdx\rNow, whenever the debugger stops, it\u0026rsquo;ll display the values of i and pivotIdx.\nAt this stage, it is crucial to understand what the implementation is doing. Refer to the picture above to get an idea of the process, then try to match it with the code. Next, run a few iterations of the loop, watching the indices update. If you need a hint, open the expander below.\n Click to show hint  When should i be updated - in the loop header, or under certain conditions within the loop body?\n \r\rNote that all debuggers should have the same basic concepts: they allow you to step through your code as it runs, in real time. You should almost always use debuggers over print statements. You won\u0026rsquo;t regret it!\nAnother Type of Bug: Memory Errors A C/C++’s nightmare, memory errors are one of the most frustrating kinds of bugs that exist. Failing to address them can result in undefined behavior (non-replicable bugs!) and memory leaks. Thus, fixing them is a huge priority.\nA memory leak happens when your program allocates memory using malloc or calloc (or other memory allocation calls), and doesn’t free it. The memory is “lost” - there’s no (easy) way to retrieve it until the program terminates.\n\rLuckily, people have also written programs to help you find memory errors, and one of these programs is valgrind. Valgrind is a tool that not only looks for memory errors, but shows you exactly where the errors occur in your code. Let’s use valgrind to find where memory errors occur. As an example, we have a rudimentary implementation of a vector in C, which is the C++ standard library’s version of a dynamically sized array.\n\rFirst make the program using\nmake Vector\rNow run it using\nexamples/Vector\rNotice that there\u0026rsquo;s an error called a \u0026lsquo;double free\u0026rsquo;! This is a type of memory caused by calling free to a pointer twice.\nNow instead of using gdb, use valgrind to check how memory is allocated and used. Run the command:\nvalgrind --tool=memcheck leak-check=full examples/Vector\rIt should be apparent valgrind caught some errors, perhaps related to the double free (notice the ERROR SUMMARY at the bottom has a few errors detected!).\nLet\u0026rsquo;s take a look at some of the errors.\nThe error shown above is called an invalid read, which is often because you are reading memory that was free\u0026rsquo;d in another block. Valgrind lets you see where the memory is free\u0026rsquo;d and alloc\u0026rsquo;d:\nThe block of memory was allocated by the malloc function in createVectorInt, which was called in the main function. The block was free'd by the free function called in the pushBack function.\nFinally, in the heap summary, you can see that there were 96 bytes that were \u0026lsquo;lost\u0026rsquo; - in other words, there was a memory leak. This happened because we forgot to call deleteVectorInt on the vector at the end of the main function.\nValgrind provides a plethora of information that you can use to hunt down memory errors in your C and C++ programs. It not only informs you of where errors are happening, but also where memory blocks are allocated and subsequently free\u0026rsquo;d (or not free\u0026rsquo;d, in the case of a memory leak). Can you find the bug that causes all the invalid reads in the vector example?\n Click to show answer  Notice that when we are reallocating the array, we forgot to update list-\u0026gt;__arr! This means that we writing to a pointer that was free\u0026rsquo;d, which explains the invalid reads and writes we see on Valgrind, the double frees (since we call free on that already free\u0026rsquo;d pointer), and the memory leaks (since we never refer to the newly allocated arrays ever again)! All you need to do is set that pointer to the new updated array, which should fix the error.\n \r\rIn the exercises, you will be required to fix any memory errors that appear.\n"},{"uri":"https://nuevofoundation.github.io/workshops/security-phishing/whats-phishy/","title":"What&#39;s Phishy?","tags":[],"description":"","content":"From our last section we learned about different types of phishing methods and how to recognize them. Now it\u0026rsquo;s time to play a game called What's phishy?\nWhich images from the list given below do you think are phishy?\n Does this email look phishy? Yes No  Does this email look phishy? Yes No  --  Does this banner look phishy? Yes No   Does this text message look phishy? Yes No   Does this text message look phishy? Yes No   Does this text message look phishy? Yes No  Does this text message look phishy? Yes No  -- Check answers!  "},{"uri":"https://nuevofoundation.github.io/workshops/java-tictactoe/activity-5/","title":"5. (Optional) AI Move","tags":[],"description":"Use Minimax algorithm to pick move for the computer","content":"Let\u0026rsquo;s make the computer think Previously, we used a Random object to randomly generate a move for the computer. As a result, the competitiveness of the computer is fairly low.\nIn this exercise, we want to increase the difficulty of the game by making optimal decisions for the computer.\nWe will do so by adding artificial intelligence into our program with the use of the Minimax algorithm (a well-defined procedure that allows computers to solve problems).\nMinimax Algorithm Minimax is an algorithm that is used in two-player games to make optimal decisions for a player.\n The two players are labeled as maximizer and minimizer respectedly. While the maximizer maximizes its chance to win, the minimizer tries to minimize its loss. The algorithm examines all the possible future game states based on the current game board assuming both the maximizer and minimizer will pick the move that benefits them the most. In our case, we pick the computer to be the maximizer, and the player to be the minimizer. We will attempt to make optimal decision for the computer by maximize its chance to win!  How will Minimax Algorithm work in TicTacToe?   We examine all the possible moves of \u0026quot;X\u0026quot; and \u0026quot;O\u0026quot; and give a score to a game board if there is a winner or tie.\n  Since we want the computer to win with the fewest steps possible, we design the score for the game boards as the following:\n  If computer wins, calculate the score with the formula 1 * (number of available spots on the board + 1).\n  If the player wins, calculate the score with the formula -1 * (number of available spots on the board + 1).\n  If there is a tie, the score is 0.\n  Note that by giving larger scores to game states where the computer can win with fewer steps, we are teaching our code to pick the optimal move for the computer.\n  Let\u0026rsquo;s look at an example below:\n  In the first row, we considered the 3 possible moves for the computer \u0026quot;O\u0026quot;, who is the maximizer.\n  We examine all the game states until all the moves end will a computer win, player win, or a tie. We then give them their corresponding score.\nFor example, in the second board in row 1, the computer wins by placing \u0026quot;O\u0026quot; at position 8. That state will then be given a score of 1 * (number of available spots on the board + 1) = 1 * (2+1) = 3.\n  At game states that don\u0026rsquo;t have a winner or a tie, we pick the smallest score during minimizing rounds (when \u0026quot;X\u0026quot; make a move), and the largest score during maximizing rounds (when \u0026quot;O\u0026quot; make a move).\n  If you follow along through the maximizing/minimizing rounds on the picture above, you should note that the optimal move for the computer is to place \u0026quot;O\u0026quot; at position 8, allowing the computer to win with 1 move from the starting game board.\n  Code Structure In activity-3, you wrote the method int getComputerMove(String[] curBoard) to randomly generate a spot for the computer. Let\u0026rsquo;s write another method called getComputerMoveAI(String[] curBoard) that returns the optimal move for the computer by calling the int minimax(String[] curBoard, boolean isMaximizing) method.\nint getComputerMove(String[] curBoard){ // 1. this method calls minimax() on all the possible moves the computer can pick  // 2. it takes the maximum out of all of them  // 3. return the optimal move } int minimax(String[] curBoard, boolean isMaximizing){ // 1. In the maximizing round, it calls minimax() on all the possible moves for the computer, \u0026#34;O\u0026#34;, return the maximum score  // 2. In the minimizing round, it calls minimax() on all the possible moves for the player, \u0026#34;X\u0026#34;, return the minimum score }  The method minimax() is a recursive function, which means that the function calls itself inside of the implementation of itself. In our method, minimax() call itself with different possible boards by placing \u0026quot;X\u0026quot; or \u0026quot;O\u0026quot; at each available spots. And, the method pick either maximum or minimum score depending on whether its a maximizing round. \n Write the Method getComputerMoveAI()  For each available spot on the game board, place \u0026quot;O\u0026quot; at that spot and get the score for that board by calling minimax().   Note you should pass false for the second argument since it\u0026rsquo;d be the minimizer\u0026rsquo;s turn. You should change that spot back to \u0026quot; \u0026quot; after getting the score, so you maintain the original state of the game board during the next iteration. \n Track the largest score and its corresponding position of the board at each iteration. Return the position with the largest score.   Have a variable called bestScore that stores the current best score and have an initial value of Integer.MIN_VALUE (minimum value of an integer). This is an useful way to find the maximum value in a data structure. For example:  public int getLargestNum() { // the following code find the maximum value in the array \u0026#34;nums\u0026#34;  int[] nums = {3, 5, -2, 10}; int largestNum = Integer.MIN_VALUE; for(int i = 0; i \u0026lt; nums.length; i++){ if(nums[i] \u0026gt; largestNum){ largestNum = nums[i]; } } return largestNum; } \n Write the Method minimax() As we discussed above, the minimax() method has the header int minimax(String[] curBoard, boolean isMaximizing).\n  Call getWinner() on the board to check if there is a winner. If so, return the corresponding score.\n(Score: computer wins (1 * number of available spots on the board + 1), player wins (-1 * number of available spots on the board + 1), tie (0)).\n  Get Minimax Score\n    If it\u0026rsquo;s maximizer\u0026rsquo;s turn (\u0026quot;O\u0026quot;), for each available spot on the game board, place \u0026quot;O\u0026quot; at that spot and get the score for that board by calling minimax().\n  If it\u0026rsquo;s minimizer\u0026rsquo;s turn (\u0026quot;X\u0026quot;), for each available spot on the game board, place \u0026quot;X\u0026quot; at that spot and get the score for that board by calling minimax().\n  Return Largest Score   If it\u0026rsquo;s maximizer\u0026rsquo;s turn (\u0026quot;O\u0026quot;), track the largest score and the corresponding position at each iteration, and return that score. If it\u0026rsquo;s minimizer\u0026rsquo;s turn (\u0026quot;X\u0026quot;), track the smallest score and the corresponding position at each iteration, and return that score.  Test your methods Copy and paste your two methods below main().\nClick Run to test around your methods. We provided a given test of the example of the picture above.\nYou can plug in different boards to test if you get a desirable output.\n Remember to test your methods!\n Update the Program After testing the methods, update all the method calls of getComputerMove() to getComputerMoveAI() in your TicTacToe program.\nIt should be way more challenging to win this time around😀!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/activity-5/","title":"Methods","tags":[],"description":"Introduce methods in Java.","content":"\nWhat is a Method? So far, we\u0026rsquo;ve learned about how to store data in variables, print data and sentences, and make decisions with if-statement, for-loop, and while-loop.\nFrom the last exercise, we know the following block of code calculates the sum from 1 to 100:\nint total = 0; int num = 1; while(num \u0026lt;= 100){ total = total + num; num = num + 1; } System.out.println(\u0026#34;Sum: \u0026#34; + total); But what if we want to calculate the sum from 1 to 77 instead? How do we do it without writing the whole blocks of code again?\nWe want to create a ✨ magic box ✨ in code that does the calculation for us no matter which 2 numbers we want to create a sum for! In Java, a method is like the magic box that performs a specific task by running a block of code that can use user inputs.\nThere are 2 parts in a method: header and body:\nMethod Header To define a method, we need to first write out its method header. A method header has four main parts:\n   Part Name Description Examples or possible options     access specifier provides the level of access to the method public tells the computer that anyone can use this method. private tells the computer it can only be called within a class. (We\u0026rsquo;ll learn about classes on the next page!) protected tells the computer it can be called by objects of the same class.   return type data type that is returned to the calling function use void if the method doesn\u0026rsquo;t return anything.   method name name of the method used to call it user defined based on what the method does   list of parameters list of inputs that must be provided when the method is used format of (type input name, type input name, \u0026hellip; ).    // an example public void sing (String songName) 1. 2. 3. 4. Note: The variable names for the parameters do not have to match the variable name of the data being passed into the method.\n\nMethod Body Next, we put the block of code associated with the method in the method body, which is between { and } after the method header.\nTo return some data, we put the keyword return followed by a variable name or a value to be returned.\nNote: Once you return, nothing else after that in the method runs.\nThis is an example of how to define a method that sum of numbers from numA through numB:\n/* Method Name: sumNum * Input/Parameter: 2 numbers of type int * Funtionality: return the sum from numA through numB */ public int sumNum(int numA, int numB){ int total = 0; int num = numA; // we access the first input with the name numA  while(num \u0026lt;= numB){ // we access the first input with the name numB  total = total + num; num = num + 1; } return total; // return statement } \nMethod Call Lastly, to execute a method in your code, we need to make a method call. We write out the method name with appropriate input. For example:\nsumNum(1, 3); // one line of code that calls method sumNum() with the return value 6 Knowing sumNum(1, 3) returns an int with the sum from 1 to 3, we can do the following to store the value:\nint sum1to3 = sumNum(1, 3); \n Count the Pyramid!🔺 (photo credit: aliexpress.com/item/32306945847.html)\nThe above is an image of square-number pyramid where each level is a perfect square of the number of current level counting from the top.\nThat is the top level has 1 * 1 bead, the 2nd level has 2 * 2 beads.\n\nLet\u0026rsquo;s write a method that takes in the number of total levels and output the total number of beads in the pyramid!\nOnce you solved the challenge, you will see the following message:\nCongratulations! Challenge Solved!  "},{"uri":"https://nuevofoundation.github.io/workshops/unity/colliders/","title":"Colliders","tags":[],"description":"","content":"The reason Nuvi runs off is because there are no colliders to stop them.\nColliders allow two objects to touch each other.\n So, let\u0026rsquo;s use colliders to add invisible walls around our arena. Head over to the Hierarchy window and right-click, then choose \u0026ldquo;Create Empty\u0026rdquo;. Name this empty object \u0026ldquo;Walls\u0026rdquo;.\nThen, right-click the \u0026ldquo;Walls\u0026rdquo; object you just made, and this time choose \u0026ldquo;3D Object -\u0026gt; Cube\u0026rdquo;. Resize the cube into a rectangular shape so it covers a side of the screen like below:\nThen, remove the BoxCollider component that the cube has by default, and add a BoxCollider2D component.\nDo the same to make 3 more invisible walls that surround Nuvi, like:\nNow run the game and see what happens. \u0026hellip;Uh-oh, Nuvi still runs off. That\u0026rsquo;s because Nuvi doesn\u0026rsquo;t have a Collider. For two objects to collide, both of those objects need to have a Collider!\nSo, let\u0026rsquo;s go ahead and add a BoxCollider2D component to Nuvi. In that component, click on \u0026ldquo;Edit Collider\u0026rdquo;, and you should see a green box surrounding Nuvi. Resize this box so it fits snugly around Nuvi. Run the game and see that Nuvi won\u0026rsquo;t run off anymore\u0026hellip; but now Nuvi starts spinning when they hit a corner of the arena. To stop this, go into Nuvi\u0026rsquo;s Rigidbody2D component, expand \u0026ldquo;Constraints\u0026rdquo;, and check \u0026ldquo;Freeze Rotation\u0026rdquo;.\nTo add a background and get Nuvi working in outer space, drag the \u0026ldquo;background\u0026rdquo; png file from the Drawings folder like you did for Nuvi\u0026rsquo;s image, and then drop it into the Scene. Resize the background image; looking at the Game window will help you do so.\nIf Nuvi hides behind the background image, go into Nuvi\u0026rsquo;s Sprite Renderer component, expand \u0026ldquo;Additional Settings\u0026rdquo;, and change Nuvi\u0026rsquo;s \u0026ldquo;Order in Layer\u0026rdquo; to 1 (or any number larger than 0).\n Finally, run the game again and make sure things are looking alright. If so, then congratulations! We have successfully helped Nuvi move around in outer space!\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/comments/","title":"Comments","tags":[],"description":"","content":"Developers often need to collaborate with other developers. Comments are an easy way for developers to write notes in the code and communicate with others. Comments are ignored by the computer; thus, they are also an easy way to tell the computer to not run certain lines of code. There are two ways to create comments:\n To comment out one line, place // in front of a line of code. For example:  // This is a single-line comment. To comment out multiple lines at once, indicate the start of the comment with /* and the end of the comment with */. For example:  /* This is a multi-line comment. This line is also part of the comment. */ To remove a comment (or uncomment a line), simply delete the // for a single-line comment, or the /* and the */ characters for the multi-line comment.\nWorking Together  Type // in front of Toast.makeText(this, \u0026quot;Welcome to Tic-Tac-Toe”, Toast.LENGTH_LONG).show(). After pressing the play button (►), check to make sure that Welcome to Tic-Tac-Toe does not show up on the screen. Delete the // and instead, surround Toast.makeText(this, \u0026quot;Welcome to Tic-Tac-Toe”, Toast.LENGTH_LONG).show() with /* and */. Check that Welcome to Tic-Tac-Toe is still not printed to the console after pressing the play button (►). Delete both /* and */, and press the play button (►). Welcome to Tic-Tac-Toe should now be printed to the console. Throughout today\u0026rsquo;s puzzles, you will see various multi-line comments and // PUZZLE comments (like the one for Puzzle 2). These comments will guide us towards completing the Tic-Tac-Toe game, so be sure you understand how to comment and uncomment code. \n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-3/","title":"Activity 3 - Explore Current Directory","tags":[],"description":"Use Linux commands to view the contents of the current directory","content":" Now that we know who and where we are, let\u0026rsquo;s take a look around for signs of the hackers.\nHow do you explore the directory? To see the files in the current directory, we use the ls command. Try ls -l.\nTo see the Files in the current directory, we use the ls command.\nTry it:\nls How do I get more info about the files in this directory? Try it:\nls -l The -l flag in the above command tells ls to list long form information.\nWhat information is being displayed? Let\u0026rsquo;s examine the top line of the example above from left to right, for the directory Desktop:\ndrwxr-xr-x 2 nuvi nuvi 4096 Aug 10 23:50 Desktop  drwxr-xr-x: The first character d denotes that Desktop is a directory. If it were a - it would mean that Desktop was a file. 2: The number of links for this file nuvi: The user who owns this file nuvi: The group this file belongs to 4096: The size of the file in bytes Aug 10 23:50: Date and time the file was created Desktop: Name of the directory  "},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/building_neural_network/","title":"Building the Neural Network","tags":[],"description":"","content":" This is the first step in building a neural network, which is actually a tool to allow us to do \u0026ldquo;machine learning\u0026rdquo;. With this tool, we are training a model/computer to analyze various training images/data, likely labeled in advance, and perform and execute a specific task as a result. In our scenario, we are using pre-labeled images of clothing to train our model to correctly predict the type of clothing for any clothing sample we input.\nNeural Network Take a look at these two images.\nAs we can see from these images, we have two sneakers. How do we know this, even though the images themselves and their pixel values vary significantly? Our brain interprets these images by looking at patterns we observed before and says \u0026ldquo;That is a sneaker!\u0026rdquo;\nAnd why is this called a sneaker? Everyone at some point has collectively agreed that this is different from other types of shoes because sneakers have laces, long snouts, thick rubber soles, and cover your feet upto your ankles. This is what we were probably told as kids - to identify these types of shoes as sneakers.\nHow is this relevant to what we are doing next? We will need to tell the computer that these types of images are sneakers. We cannot just mark these two images as sneakers because this would be ineffective when predicting future inputs using this model.\nMoreover, we don\u0026rsquo;t have to stop with only sneakers to categorize images - we can use multiple categories to classify images (Recall creating the list of different clothing categories in Activity 1). In the end, these are the categories we are using to sort all the clothing apparel.\nWhat is a neural network? The concept of a neural network originated from the idea of replicating the human brain, more specifically its ability to recognize patterns. In fact, the word \u0026lsquo;neural\u0026rsquo; is a derivation of the word \u0026lsquo;neuron\u0026rsquo;, which are receptors in the brain that fire off when, for example, it sees an image or an object it recognizes.\nIn this case, we are training the computer to recognize what each image is (whether it\u0026rsquo;s a shoe, a shirt, a bag, etc.), so our main goal of utilizing the neural network in this workshop is to give the computer the ability to classify images from the dataset into different categories.\nThe image below shows a simple implementation of a neural network.\n The input layer is reponsible for feeding data into the system, pointing to different neurons to train the model. The hidden layer consists of many neurons, which are responsible for recognizing the different patterns from the input data. These nodes then point to the output layer. The output layer consists of a single node or multiple nodes that return an output value which the model predicts.  Simply put, a neural network is a system, or an algorithm, that trains the computer to recognize different types of patterns.\nHow is related to what we are doing? We would recommend looking at the first code block below and the neural network diagram to better understand the relationship between them and the following points.\n  The input layer takes the different types of images from the dataset and feeds it into the neurons (the hidden layer). The neurons (128 of them) then recognize different patterns in the images by observing different features and the relationships between them and the predetermined categories. This layer gives the computer the ability to categorize images on its own. The output layer consists of 10 different nodes, representing the 10 different categories we would sort the images by. Depending on the specific image and the way the computer was trained by the neurons, the output will be the highest predicted category for that particular image.  Optional:\nIf you are interested in reading more about neural networks, you can check out this website by MIT News.\nImage Source\n Copy the following code onto Google Colab: model = keras.Sequential([ # The first layer (input layer) transforms each image (resolution is 28 x 28 pixels)  # into a one dimensional array whose indices correspond to all the pixels in the image. keras.layers.Flatten(input_shape=(28, 28)), keras.layers.Dense(128, activation=\u0026#39;relu\u0026#39;), #hidden layer keras.layers.Dense(10) #output layer ]) model.compile(optimizer=\u0026#39;adam\u0026#39;, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=[\u0026#39;accuracy\u0026#39;]) Don\u0026rsquo;t worry if you don\u0026rsquo;t see any output after running this code. This is expected.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-6/","title":"Activity 6: Crop Image","tags":[],"description":"","content":" In this section, we will start to learn how to crop your image.\nExample - Crop cat into half Now, let us crop out the right half of the cat image\n# We need to import PIL package to allow manipulation with pixels. from PIL import Image # Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) width = img.size[0] height = img.size[1] # Set up a new image with the half width and height newimg = Image.new(\u0026#39;RGB\u0026#39;, (width // 2, height)) # Set the pixels for the new image for i in range(width // 2): for j in range(height): # For every row color = img.getpixel((i,j)) # Get the color from original image newimg.putpixel((i,j),color) # Put the color into new image newimg.save(\u0026#34;Mycat.png\u0026#34;) Wow! This is our cat after the cropping. We cropped right half of the image!\nExample - Crop out the central piece Let us crop the cat image to have only the center part!\n# We need to import PIL package to allow manipulation with pixels. from PIL import Image # Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) width = img.size[0] height = img.size[1] # Set up a new image with the half width and half height newimg = Image.new(\u0026#39;RGB\u0026#39;, (width // 2, height // 2)) # Set the pixel for the new image for i in range(width // 4, (width // 4) * 3): # Let\u0026#39;s get the first 1/4th width of the image to last 1/4th width of the image  for j in range(height // 4, (height // 4) * 3): # For every row color = img.getpixel((i,j)) # Get the color from original image newimg.putpixel((i - width // 4, j - height // 4), color) # Put the color into new image newimg.save(\u0026#34;Mycat.png\u0026#34;) Wow! This is our cat after cropping. Challenge - Crop image based on your own choice It\u0026rsquo;s now your turn to crop whichever part you want on the cute cat! Exciting！\n "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-1/","title":"Activity 1 - Place Background and Player Ship","tags":[],"description":"","content":"This activity will have two parts: loading in the game\u0026rsquo;s background and loading in the ship that the player will eventually control (it will just be an image that doesn\u0026rsquo;t move for now). For both of these activities, the method will be very similar: we will first upload the image into the game on Scene 1 and then make it visible with Scene 2. You can think of Scene 1 as being used to upload the picture into the game and Scene 2 being used to create things that we\u0026rsquo;ve uploaded.\nPart 1: The Background Let\u0026rsquo;s start with the background. Again, to add images to the game, we will first upload them in Scene 1 and then put it in our game in Scene 2. First go to Step 1 in the preload() function in Scene1.js:\nNow, load the background image into preload().\nFor review,\n  Nothing will happen after you complete this line because you are simply loading the image for future use, not placing it anywhere.\n  imageID is the name you give to the image.\n  imagePosition is the position of the image. (a image called example.png in assets folder, imagePosition will be assets/example.png)\n  Next, go to Step 1 and Step 2 in the create() function in Scene2.js. Each step will require one line of code, creating 2 lines in total:\nTry loading the page and see if the background is working! Your console on the right should look like this:\nPart 2: The Player Ship We will do nearly the same thing with the player but with different syntax because the player\u0026rsquo;s ship is a spritesheet instead of a normal image (you will see why in the next activity).\nFor this part you will be doing Step 2 in the preload() function in Scene1.js:\n  SpriteID and SpritePosition works the same with imageID and imagePosition.\n  FrameWidth will be 32 and FrameHeight will be 48.\n  and the player section in Scene2.js:\nIf the player section filled in correctly, but player does not shown up on the screen. Try to change x and y, the player may be out of screen!\n After adding the player\u0026rsquo;s ship, your console should look like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/arrays/iteration/","title":"Iterating over Arrays","tags":[],"description":"","content":"One of the common array operations is to iterate over the values and process each one of them in some way. Let\u0026rsquo;s go over and discuss some of the simplest ways to achieve this:\nArray.forEach() The forEach() method calls a function (a callback function. In this case, function named printBr) once for each array element.\nThe function passed to forEach is executed once for every item in the array, with the array item passed as the argument to the function. Unassigned values are not iterated in a forEach loop.\nSyntax:\narrayName.forEach(functionName); Example: "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/jump/","title":"Make the bird jump","tags":[],"description":"","content":"What should we do with the bird?\nLet\u0026rsquo;s make him jump:\nAdd below command in the file [File: create-game.js] spaceKey.onDown.add(jump, this);\nWorking Together In the repl.it window below, we started the code with the line spaceKey.onDown.add(jump, this);.\nIn your console you should see a Jsappy bird jumping after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/reading-from-console/","title":"Reading from the Console","tags":[],"description":"","content":"Now that we know the basics about variables, we can ask for input from the user. Use the following line to tell our program to wait until the user types something into the console. Then, the computer takes whatever is typed into the console, and stores it into the variable called value.\nvalue = input Here\u0026rsquo;s and examples of how to use input() to accept user input:\nprint(\u0026#34;What\u0026#39;s your name?\u0026#34;) value = input() print(\u0026#34;Hello \u0026#34; + value + \u0026#34;!\u0026#34;) Give this a try! When you hit run, you\u0026rsquo;ll notice that the below image doesn\u0026rsquo;t appear on the console yet.\nThis is because the program is waiting for you to type something! Enter your name or \u0026lsquo;Nuvi\u0026rsquo; into the console on the right, press Enter, and check that it prints out correctly.\nEven if we type in a number, such as 8, the variable value will contain the string \u0026quot;8\u0026quot;. Be careful when attempting to do math on input variables!\n Challenge Let’s see if we can write a program that first prints the following two lines to console:\nWelcome! How can I help you today?  Afterwards, the console waits for user input. After the user types something in the console and presses Enter, the computer prints out:\nYou asked: [input]? I don’t know the answer to [input]. Goodbye!  [input] should be replaced with whatever the user had typed into the console. For example, if you wanted to ask \u0026ldquo;How old am I?\u0026quot;, the computer will print out that it doesn’t know the answer to that.\nThis is very similar to the example that we went through together above. Try making some small changes from what we have already given you.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/stacks/","title":"Stacks: The Driver","tags":[],"description":"","content":"--  A driver has to both pick up an order and deliver it to the customer. A driver may pick up multiple orders at the same time. For maximum efficiency, a driver wants to pick up the most amount of orders and make the most deliveries in the shortest path possible. If a driver is on the way to pick up an order from a restaurant, but suddenly a customer orders from a restaurant that is very close and on the way, to make the most out of his drive, a driver should be able to pick up the order from that restaurant. In general, a driver wants to pick up and deliver orders based on the shortest distance away. We can implement this behavior by utilizing a stack.\nTopics  Examples \n   Introduction \n   Problem 1: Stack Basics \n    "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-2/","title":"Activity 2 - CSS","tags":[],"description":"","content":"Style it with CSS Tags tell the browser what website elements to use. But we also need to tell it how to display the elements, and where to place them. We may want the title on the center or on the right side. We may want a picture on the right and a paragraph on the left. There are two ways we can do this: through HTML attributes or Cascading Style Sheets.\nCascading Style Sheets (CSS) HTML attributes are straight-forward but they can become messy quickly. If we wish to do a lot of styling, each HTML element can become long and hard to read. Furthermore, what if we want to style many elements the same way? We would have to copy all the attributes for each element, which is not efficient and prone to mistakes. For most styling, it’s better to use CSS.\nCSS files work closely with HTML tags. Each HTML tag can have a class attribute and/or an id attribute that helps to identify each element. Many elements can have the same class, and an element can have multiple classes. However, an element can only have one single id, and the id cannot be shared among elements. The CSS file uses these attributes to display styling specific to each class or id.\nSee this example below:\nSee the Pen Styling it up by Deliana Escobari (@Sunny-Dee) on CodePen.\n\rClick the \"HTML\" tab on the top left corner to see the HTML code, and the \"CSS\" tab to see the CSS code.\rLet\u0026rsquo;s take a look at the HTML code. Try to find a \u0026lt;div\u0026gt; tag with the attribute \u0026quot;info\u0026quot;. It looks like \u0026lt;div id=\u0026quot;info\u0026rdquo;\u0026gt;. By giving this div an id, we can then use CSS to specify styling for this specific element.\nSwitch over to the CSS file. We can also give styling to all elements of a specific type - for example, we could use CSS give all \u0026lt;p\u0026gt; elements the same style. In the header block, we tell the browser to color all the headers #0097A7 (which is the teal color).\nLet\u0026rsquo;s talk about the syntax (or the way of writing) for CSS. First, you start with what element you want to style. If you want to style all elements with the same tag (such as \u0026lt;header\u0026gt;), simply write the name. If you want to style an element with a class or id, put a . or a # in front of the class or id name respectively. Then, for each property you wish to change, use the format attribute-name: value;. Don\u0026rsquo;t forget to end each line with a ;. All these styles should be surrounded by the curly braces { and }.\nThere are way too many style elements to cover them all in this tutorial. If, in the sketch you made earlier, you aren\u0026rsquo;t sure how to use CSS to accomplish the desired styling, try searching online.\nWhile CSS understands 140 color names such as \u0026ldquo;green\u0026rdquo;, \u0026ldquo;red\u0026rdquo;, and \u0026ldquo;blue\u0026rdquo;, this can still be limiting. What about if we want a dark green, or a slightly lighter green? To achieve this, we can also refer to colors in hexadecimal or RGB form. Check this link to see the colors and their corresponding hexadecimal form.\n\rAdding a new font As you might know, there are multiple fonts that you can use. This part will show you how to import different fonts to your site.\n Let\u0026rsquo;s import the Heebo font from the internet. First we import the font at the top of the CSS file with this statement: @import url('https://fonts.googleapis.com/css?family=Heebo|Open+Sans'); Then we assigned it to the body tag. Since this tag will contain all the other HTML elements, our choice of font will be used for all elements.   Notice that the format inside the curly braces is: name: value;  @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Roboto+Mono'); \nfont-family: 'Roboto Mono', monospace; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Indie+Flower');\nfont-family: 'Indie Flower', cursive; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Pacifico'); \nfont-family: 'Pacifico', cursive; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Permanent+Marker');\nfont-family: 'Permanent Marker', cursive;    Acivity 2 - Adding attributes and style   Open the web editor (click the \u0026ldquo;Try it yourself!\u0026rdquo; button below)\n  Add an id attribute to one of the header tag. For example, \u0026lt;header id=\u0026quot;page-title\u0026quot;\u0026gt;\n  Toggle to the CSS tab #page-title\r{\rstyling here...\r} \n  Change the title color by adding color: yellow; inside the curly braces\n  Change the font by adding font-family: \u0026lsquo;Roboto Mono\u0026rsquo;, monospace; inside the curly braces and adding @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Roboto+Mono'); at the top of the CSS tab\n  Try it yourself!\n"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-4/","title":"Activity 4 - Change the key assignment to move right paddle.","tags":[],"description":"","content":"Activity 4 Now you know how to change key assignments to control a paddle\u0026rsquo;s movement. Great work!\nWe have added movement for the left paddle. Can you apply the knowledge about the Paddle object and its attributes that influence its movement on screen to change the key assignment for the right paddle?\nFind // TODO (ACTIVITY 4) in the code. Modify the appropriate attribute value for the right paddle such that pressing the 'UP' key moves the right paddle up.\nPress run to confirm the result.\n  Takeaway You have just modified up_key attribute in Paddle class to influence how the right paddle object should move on screen.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-4/","title":"Activity 4 - Simplifying code with functions","tags":[],"description":"","content":"We drew one hexagon. But this is just one of many hexagons Alex needs to build his honeycomb. Once again, it seems that we would have to repeat the code many times to draw multiple hexagons. Fortunately, we don\u0026rsquo;t have to! Functions to the rescue!\nFunctions A function is a way to group together lines of code to do something. For instance, turtle.forward(50) moves the turtle forward 50 steps, and turtle.left(120) turns the turtle left 120 degrees. What if we want to always do these two actions together? We can put them in a function called draw_line(), so that whenever this function is called, both of these actions take place simultaneously. Think of this like a recipe: we compile all the instructions together, and the recipe\u0026rsquo;s name is the food we are making.\n Here is an example of a function definition, and how we would use it:\ndef draw_line(): turtle.forward(50) turtle.left(120) The first line is called the function definition header. The def keyword tells the computer that we are defining a new function. Next, we give the function a name, in this case draw_line. Finally, don\u0026rsquo;t forget the (): at the end of the line, which tells the computer that we are starting the function body.\nExtra material - parameters Inside the parentheses () we would normally define parameters for the function. Parameters are inputs that we can give into the function, which the function can use to produce its output. For example, we must have two numbers to add them together and produce a result - the two numbers we used can be considered parameters. Today, we will not use parameters, and leave it as ().\n Similar to a for-loop, anything that we wish to define within the function needs to be preceded by 1 tab.\nIf you press run with just this code, you will notice that you won\u0026rsquo;t see any output! We\u0026rsquo;ve only created the functions, but we need to use them. To use the function we created, type in draw_line() again, but without the def.\ndef draw_line(): # Function definition turtle.forward(50) turtle.left(120) draw_line() # Function call This is called a function call for the draw_line() function. A function call runs the code that’s defined in the function with the same name. With the recipe analogy, think of it as actually performing the recipe.\nTips  Always make sure the names of your functions are descriptive enough to explain what the code in the function does. Your function call must be below the function definition. \n Tricky Python syntax - Part 2 Notice that functions use similar syntax rules with for-loops - you must have a : at the end of the function declaration, and anything in the function body needs to start with a tab.\nWhat happens when you need a for-loop inside of a function? Then, you need to combine the rules together! Here is an example on how to properly put a for-loop inside of a function.\ndef draw_line(): for i in range(3): turtle.forward(50) Notice that turtle.forward(50) has 2 tabs in front of it, because it is both inside of a function definition, and inside of a for-loop!\n So, let’s try that out by making our own draw_hexagon() function! Remember to include the function definition header, the number of sides a hexagon has, and the angle associated with a hexagon: 60 degrees.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/activity-5/","title":"Activity 5 - Analyzing the customer&#39;s order","tags":[],"description":"","content":"Pre-reqs  Functions Loops  Analyzing the customer\u0026rsquo;s order We\u0026rsquo;ve got the customer\u0026rsquo;s order, and now we have to simply calculate how much their order costs!\nCreating a dictionary from the customer\u0026rsquo;s order The first function we\u0026rsquo;ll be writing is createDictOrderItems(listOrderItems) and it takes the list of items in the customer\u0026rsquo;s order as a parameter. We\u0026rsquo;ll be returning a dictionary of all the items ordered and their respective quantities. Currently we only have a list of strings that contain both the item name and quantity, however, we need to separate this information out and convert the quantity into an integer type since it\u0026rsquo;s a number.\n Let\u0026rsquo;s first create an empty dictionary titled dictItems that will eventually store this information. Next, write a loop (Hmm, which type of loop do you want to use?) that iterates over all of the orderItems in the list we passed in. In this loop, we want to split each string by the \u0026quot;-\u0026quot; that is in between the item name and quantity. If you specified a different format with \u0026quot; : \u0026quot; or \u0026quot; - \u0026quot; or anything else, specify that here. The first item we receive from splitting the string is the item name. The second item we get is the quantity, convert this to an integer. Store both values in helpfully named variables like itemName and itemQuantity. Still within the loop, we now need to add this to the dictionary dictItems. However, remember that since a customer can technically order the same thing multiple times in separate order items, we need to combine that here. For instance, if the customer orders Spring Rolls-2 twice, we want to interpret that as 4 Spring Rolls. To do this, we need to have an if-else block where if the dictionary already contains the item name, then add this new quantity to the quantity already associated with the item name, else create a new key-value pair with the item name and quantity. Finally, after this loop ends, remember to return this dictionary!  Compute prices from the dictionary The second function we\u0026rsquo;re going to write is computePrices(dictItems) which takes the dictionary we created in the last function as a parameter and returns a new dictionary that has every item name associated with the price * quantity.\n Create an empty dictionary dictItemAndPrice will hold the item and the total price for that item. Loop through the items in the dictionary we just passed in. Within this loop, we want to get the item quantity from dictItems since it\u0026rsquo;s the value in the dictionary\u0026rsquo;s key-value pair. We also want to access the item\u0026rsquo;s price from the global variable dictMenu. Keep in mind though that it is the first value in the list associated with the item name and we need to access it accordingly. Multiply those two numbers together to get the total price for that item. Add the item name and total price pair to the dictionary dictItemAndPrice. Return this dictionary.  Compute the total price of the order The third function we\u0026rsquo;ll create is computeTotalPrice(dictItemAndPrice) which takes the dictionary we created in computePrices(dictItems) as a parameter and returns the total price of the customer\u0026rsquo;s entire order.\n Initialize a variable totalPrice to 0 so we can add the prices of each item to it. Loop through the dictionary dictItemAndPrice and add each of the values to totalPrice. Return totalPrice rounded to 2 decimal places by using round() and provide 2 as the second value so it rounds to the hundredths place since that\u0026rsquo;s how we want the final price to be displayed.  All 3 of these helper functions will be called in the main() function in the else block in the order we wrote them in. The value we returned for the 1st function will be the argument to the second function, and the value returned from the 2nd function will be the argument to the third function, and finally, the result of the 3rd function will be used in the next activity! Remember to explicitly store each of the results of the functions in variables so that you can reuse them multiple times.\n"},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/activity-5/","title":"Activity 5 - ASCII Code","tags":[],"description":"","content":"That\u0026rsquo;s great!\nIn this activity we will encrypt (make secret) the name of the recipient.\nLet\u0026rsquo;s use the ASCII Code\nASCII Code The ASCII code shows that each character has a numeric value. For example, the character A is the number 65, B is 66, C is 67, etc.\nThe following list shows the value of the most commonly used characters:\nSince each character has a numeric value, we can use this to add or subtract values to these letters, and thus change the order of them in a certain way. It allows us to convert characters (char) into numbers (int) and vice versa.\nExample\nchar letter = 'A'; int letter_value = letter; cout \u0026lt;\u0026lt; letter \u0026lt;\u0026lt; \u0026quot; = \u0026quot; \u0026lt;\u0026lt; letter_value \u0026lt;\u0026lt; endl; This will print:\nA = 65 In this example, we save the character in a variable type char. Then, in an int type variable we save the char type variable, but since the second variable saves numbers, it will convert the character into its numerical value according to the ASCII code.\nWe could do the opposite, for example:\nint letter_value = 67; char letter = letter_value; cout \u0026lt;\u0026lt; letter_value \u0026lt;\u0026lt; \u0026quot; = \u0026quot; \u0026lt;\u0026lt; letter \u0026lt;\u0026lt; endl; This will print:\n67 = C \n To create the secret message we will use a keyword, from which we will encode the name. The idea is to go through each character of the name with a for statement, and at the same time go through each character of the keyword. Then we will add the value of the character of the name and the keyword, and the result will be a new character, which will make the message encrypted.\nFor example, if my keyword is queen and the name I want to encrypt is programmer, the program has to add the 'r' and the 'p', and save the result in place of \u0026lsquo;p\u0026rsquo; in the string \u0026ldquo;programmer\u0026rdquo;. Then I would add the 'r' and the 'e', the 'o' and the 'i' , etc. When we are in character 5 of the programmer string (counted the first as 0), we will have to turn around in the queen string and start in the returned character 0, that is, the letter 'r', since the queen string has no more characters.\nFor that, we are going to gather part of what we have already done, and we must follow the following steps:\n First, create a variable of type string to be the keyword. Store the input received from console into this variable. This will be the name. Repeat the first two steps, but this will store the keyword. Declare a for loop, and use a variable of type int initialized to 0. Add 1 to this variable for each cycle of the loop, and continue the loop while the variable is less than the string variable\u0026rsquo;s size. In the body of the for loop, create an int variable that is equal to the sum of the name character (name[i]) and the keyword character at the counter position (key[counter]). From this sum we must subtract a lowercase letter 'a' so that the sum corresponds to a letter and not some other random character of the ASCII code. Use an if statement to determine whether the sum of characters corresponds to a character greater than 'z'. If so, subtract by 25 (the number of letters of the alphabet) to ensure we get a true letter in the alphabet. Set the character name[i] to be the value contained by the sum variable. This will change the original letter to the new character. Add 1 to the counter we carry from the keyword. Check if the keyword counter is greater than or equal to the length of the key string; if so, reset the counter to 0. Finally, after the for statement, print the encrypted message to the console.  Remember that you can always go back to the previous activities to review anything!\nOnce the steps are complete, start playing and encrypting your words! Press Run and type in the console the keyword followed by the enter key, and then the name or word to encrypt, followed also by a enter. For example, you can copy and paste the following into your console:\nprogrammer queen Warning: in this program we should always write the strings and characters in lowercase letters.  Important: To paste into the console, right click the console and click \u0026ldquo;Paste\u0026rdquo;. Otherwise, the paste operation may not work correctly. © 2022 GitHub, Inc.\n"},{"uri":"https://nuevofoundation.github.io/workshops/microbit-distance-checker/running-code/","title":"Downloading the code and trying it out","tags":[],"description":"","content":"Now that our code has been written, it\u0026rsquo;s time to try it all out. First, we have to pair the micro:bit with a computer. Find your USB cable and connect the smaller side to the silver USB port on the top of your micro:bit. Connect the other, larger end to a USB port on your computer. On the MakeCode workspace, click the ellipsis (\u0026hellip;) next to the Download button to make a small menu pop up. From that menu, click on \u0026ldquo;Pair device\u0026rdquo;.\nIn the new window that pops up, click the purple \u0026ldquo;Pair device\u0026rdquo; button in the bottom-right corner. Finally, another window will pop up. Click on \u0026ldquo;BBC micro:bit CMSIS-DAP\u0026rdquo; and then on the Connect button at the bottom. Now we\u0026rsquo;re connected and ready to download the code. You should only need to pair once.\nNow click the ellipsis (\u0026hellip;) next to the purple Download button again. This time, click the \u0026ldquo;Download to micro:bit\u0026rdquo; option. When the Download button is done spinning, look for the \u0026ldquo;Download complete\u0026rdquo; bubble: that means we\u0026rsquo;re done! Try moving away from other micro:bits on the same radio channel to see that frown on the micro:bit turn into a smile!\nThat\u0026rsquo;s it! Congratulations! You\u0026rsquo;ve just written code to make two pieces of hardware talk to each other wirelessly AND check distance. Well done! 👏🏽👏🏽👏🏽\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-2/","title":"Activity 2 - Add words to the word bank","tags":[],"description":"","content":"Instructions Find // TODO (ACTIVITY 2) in the GuessTheWord code. For the Guess the Word game, we will give the computer a word bank, and the computer will choose one of the words randomly to use for the game. So far, we have added the words \u0026quot;Hello\u0026quot; and \u0026quot;World\u0026quot; to the word bank. However, a Guess the Word game with only two possible words to guess is not fun at all! Add at least 3 more strings to the word bank.\nNote: The console output will not change from the previous activity. We do not want to tell the player the words inside the word bank when they play the game! For this activity, just make sure that you do not get any error messages in the console after pressing run.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-2-make-a-song/","title":"Activity 2 - Make a song!","tags":[],"description":"Setting up headphones","content":"\nNow that you have learned how to add sounds to Earsketch, let\u0026rsquo;s try and make a song! You should already have one audio clip in Earsketch, but songs are made up of various instruments, so we need to add more audio clips.\n Add another fitMedia() call. Find an audio clip you would like to add to your current song and input it under the fileName parameter. The trackNumber parameter should be a unique number. This will allow us to place our sounds on different tracks. Having different sounds on different tracks allows us to maintain organization of our sounds and play different sounds at the same time. Example: If the first fitMedia() call is on track 1, the second fitMedia() call should be on track 2. Complete the rest of the parameters. Repeat these steps until you have four different audio sounds in your song.  Your code should now look something like this: from earsketch import *\ninit() setTempo(120)\nfitMedia(RD_TRAP_BELLLEAD_1, 1, 5, 9) fitMedia(YG_TRAP_STRINGS_2, 2, 1, 17) fitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17) fitMedia(YG_TRAP_BASS_9, 4, 1, 9)\nfinish() \n"},{"uri":"https://nuevofoundation.github.io/workshops/arduino/activity-3/","title":"Activity 3 - Joystick &amp; LEDs","tags":[],"description":"","content":"Activity 3 - Joystick + LEDs Let’s combine activity 1 and activity 2. Let’s control LEDs based on the input from the joystick.\n Attach one end of a jumper wire to GND on the joystick and the other to 7X on the Breadboard. Attach one end of a jumper wire to +5V on the joystick and the other to 5W on the Breadboard. Attach one end of a jumper wire to VRx on the joystick and the other to A0 on the Elegoo. Attach one end of a jumper wire to VRy on the joystick and the other to GND on the Elegoo. Attach one end of a jumper wire to SW on the joystick and the other to 2 on the Elegoo. Attach the long lead (anode) of your blue LED to pin 8F and the short lead (cathode) into pin 9F. Attach a 220 resistor with one leg in 8G and the other in 4G. Attach one end of a jumper wire to 4H on the Breadboard and the other to 11 on the Elegoo. Attach one end of a jumper wire to 9G and the other to 12Z (anywhere in the blue [-] line) on the Breadboard. Attach the long lead (anode) of your yellow LED to pin 14J and the short lead (cathode) into pin 15J. Attach a 220 resistor with one leg in 14I and the other in 10I. Attach one end of a jumper wire to 10J on the Breadboard and the other to 10 on the Elegoo. Attach one end of a jumper wire to 15I and the other to 18Z (anywhere in the blue [-] line) on the Breadboard. Attach the long lead (anode) of your red LED to pin 21F and the short lead (cathode) into pin 22F. Attach a 220 resistor with one leg in 17G and the other in 21G. Attach one end of a jumper wire to 17H on the Breadboard and the other to 9 on the Elegoo. Attach one end of a jumper wire to 22G and the other to 25Z (anywhere in the blue [-] line) on the Breadboard. Attach the long lead (anode) of your green LED to pin 14A and the short lead (cathode) into pin 15A. Attach a 220 resistor with one leg in 10B and the other in 14B. Attach one end of a jumper wire to 10C on the Breadboard and the other to 8 on the Elegoo. Attach one end of a jumper wire to 15B and the other to 17X (anywhere in the blue [-] line) on the Breadboard. Connect the blue [-] rails together with a jumper wire Connect the red [+] rails together witha jumper wire Attach one end of a jumper wire to the +5V on the Elegoo and the other anywhere on one of the red [+] lines. Attach one end of a jumper wire to the GND on the Elegoo and the other anywhere on one of the blue [-] lines.  The Code int button=2;\rint buttonState=0;\rint buttonState1=0;\rvoid setup() {\rpinMode(7,OUTPUT);\rpinMode(button,INPUT);\rdigitalWrite(button,HIGH);\rSerial.begin(9600);\rpinMode(8,OUTPUT);\rpinMode(9,OUTPUT);\rpinMode(10,OUTPUT);\rpinMode(11,OUTPUT);\r}\rvoid loop() {\rint xValue = analogRead(joyX);\rint yValue = analogRead(joyY);\rSerial.print(xValue);\rSerial.print(\u0026quot;\\t\u0026quot;);\rSerial.println(yValue);\rbuttonState = digitalRead(button);\rSerial.println(buttonState);\rif (xValue\u0026gt;=0 \u0026amp;\u0026amp; yValue\u0026lt;=20)\r{\rdigitalWrite(10,HIGH);\r}\relse{digitalWrite(10,LOW);}\rif (xValue\u0026lt;=20 \u0026amp;\u0026amp; yValue\u0026gt;=490)\r{\rdigitalWrite(11,HIGH);\r}\relse{digitalWrite(11,LOW);}\rif (xValue\u0026gt;=1010 \u0026amp;\u0026amp; yValue\u0026gt;=490)\r{\rdigitalWrite(9,HIGH);\r}\relse{digitalWrite(9,LOW);}\rif (xValue\u0026gt;=490 \u0026amp;\u0026amp; yValue\u0026gt;=1010)\r{\rdigitalWrite(8,HIGH);\r}\relse{digitalWrite(8,LOW);}\rif (xValue\u0026gt;=1010 \u0026amp;\u0026amp; yValue\u0026gt;=1010)\r{\rdigitalWrite(9,LOW);\rdigitalWrite(8,LOW);\r}\rif (buttonState==LOW)\r{\rSerial.println(\u0026quot;Switch = High\u0026quot;);\rdigitalWrite(7,HIGH);\r}\relse{digitalWrite(7,LOW);}\rbuttonState1=digitalRead(7);\rSerial.println(buttonState1);\rdelay(100);\r}\r"},{"uri":"https://nuevofoundation.github.io/workshops/debugging/05-fixing-the-problem/","title":"Step 2 - Fixing the problem","tags":[],"description":"","content":"Once you’ve figured out what’s causing the bug, you can start thinking about how to fix the bug. Compiler errors are easy enough - most of the time, the compiler gives you plenty of hints on how to fix it, and during times you can’t figure it out by compiler output alone, you can turn to the web. Chances are, someone ran into the same problem as you years ago and asked the question already on a forum such as StackOverflow.\nWhen it comes to fixing runtime errors, it comes down to the application you are debugging. You’ll want to think about what your program is doing, what you want it to do, and how to write code to tell it to do what you want it to do.\nFor instance, a general way to fix a memory bug is to understand that you’ll need to ensure that the program only accesses memory it is allowed to. The obvious place to look is to see where memory accesses happen. Dereferencing pointers and/or using array indexing is usually where these problems occur. As we showed in the last part, a tool like valgrind is also valuable in finding memory leaks and where your program can be buggy.\nTo fix a program that exhibits strange behavior, the first place to look is to see whether your algorithm or strategy seems appropriate. The next place is whether your program actually implements the algorithm correctly. More often than not, a complex algorithm is difficult to get correct. There are many implementations of secure algorithms in cybersecurity, but a lot of them have faulty implementations that make them insecure!\nThe most important thing is to find the correct questions to ask yourself as you debug. Rubber duck coding involves the programmer talking aloud to a rubber duck, and being able to hear yourself explain what you are doing can catch erroneous errors.\nUnfornately, fixing an error is oftentimes extremely specific to the program. It is difficult to offer more than general suggestions.\n"},{"uri":"https://nuevofoundation.github.io/workshops/security-phishing/summary/","title":"Summary","tags":[],"description":"","content":"Conclusion In conclusion, the common features found in Phishing scams have at least one of the following properties:\n Lucrative offers or attention grabbing statements. Unusual sender of unexpected behavior or character. Sense of urgency by asking you to act fast because of limited time offers or deals. Example: Your password is about to expire click here to change it immediately.  Suspicious hyperlinks. Hovering over the link will show the actual URL you will be directed to. Misspellings or grammatical mistakes. Example: mail@g00gle.com instead of mail@google.com Email attachments with random file name or extensions.  Solution In the activity \u0026ldquo;What\u0026rsquo;s Phishy\u0026rdquo; the following emails and texts were potential phishing attempts:\n The email from spotifyaccounts. The text from Amazon for free Airpods. A voice notification email.  Remember to be careful about what you upload or download from the internet.\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/activity-6/","title":"Object and Classes","tags":[],"description":"Introduce object and class in Java.","content":"\nWhat is an Object and a Class? An object is an thing (noun) that has certain characteristics and can perform certain tasks. A Class is the blueprint or definition for that object.\nAn example is a Person. A Person is Class. A person can have certain characteristics that distinguish it from another person. It can have blue eyes, it can be 30 years old, etc. A person can also perform certain tasks. It can walk, it can talk, etc.\nA Java Object is an instance of a Java Class. In this instance \u0026ldquo;Bea\u0026rdquo; is a \u0026ldquo;Person\u0026rdquo;. \u0026ldquo;Bea\u0026rdquo; has brown eyes. This is a property (or data field) of \u0026ldquo;Bea\u0026rdquo;. \u0026ldquo;Bea\u0026rdquo; can speak in English. \u0026ldquo;Bea\u0026rdquo; can speak in Spanish. These are methods that \u0026ldquo;Bea\u0026rdquo; can perform.\nCreating a Class! Java is an object-oriented programming language, which means everything in Java is associated with an object and a class (the blueprint for the object).\nFor starters, the line of code that we used to print statements from activity 1 is actually a method call from a predefined class called System!\nSystem.out.println(\u0026#34;Hello World\u0026#34;);  System is a class that deals with user input and outputs. out is a variable in class System of the class/type PrintStream. println() is a method defined in the class PrintStream.  \nAnother class we have interacted with in the previous exercises is String. The String class defines a set of rules on how a list of characters should behave.\nWith following line of code, we created a String object called name using the rules defined in the String class:\nString name = \u0026#34;Patrick\u0026#34;; \nSystem, PrintStream, and String are predefined classes in Java. However, we are not limited to these predefined classes, and we can actually create our own data type by writing a class! This is useful for coders to create specific objects to have certain attributes and behaviors. Having access to these user-defined types allows us to build distinct programs.\nLet\u0026rsquo;s learn about the different parts in a class below:\nClass A class is a blueprint or prototype of a new type of object. In general, a class contains three important parts: (1) data fields/instance variables (2) constructor (3) methods.\n   Element Description Example     data fields/instance variables variables an object of this class has access to that describe the object Person class has fields eyeColor, age, height.   constructor method called to create an object from this Class There can be more than one constructor per class   methods methods an object of this class will be able to call to perform certain tasks Person class has methods talk and walk.    For example:\npublic class SampleClass{ // (1) data fields/instance variables  private String name; // example  // (2) constructor  public SampleClass(){ name = \u0026#34;example\u0026#34;; } // (3) methods  public sampleMethod(){} } \n Try it Out 🐥! Let\u0026rsquo;s make a Bird class to represent Patrick 🐥 and all of his Bird friends by following the steps below! Note: For this exercise, you will be working in Bird.java instead of Main.java.\n First, we start by defining the class name in the format public class name. public class Bird{} \nSecond, let\u0026rsquo;s declare all the fields of the Bird class: species, name, hobby, age, loveMusic. Each field is declared in the format: private data type name ;.\n  We declare all 5 fields as private in the class Bird. This ensures these data can only be accessed within this class.\n  Let\u0026rsquo;s identify the appropriate type for each field:\n   species should be a String that stores for exmaple: \u0026ldquo;duck\u0026rdquo;, \u0026ldquo;swan\u0026rdquo;, \u0026ldquo;owl\u0026rdquo;. name should be a String that stores for example: \u0026ldquo;Patrick\u0026rdquo;. hobby should be a String that stores for example: \u0026ldquo;play basketball\u0026rdquo;. age should be an int that stores for example: 25. loveMusic should be a boolean that stores either true or false.  For example, to declare species as a private field of class Bird, you would put private String species; .\nFinish creating the other 4 fields of the Bird class!  \nThird, let\u0026rsquo;s create the constructor for the class Bird. Usually, constructor is the method that initialializes value to all the fields in a class. It has the format public class name (parameter). Since we have 5 fields in this class, the constructor will take in 5 parameter/inputs.\npublic Bird(String speciesInput, String nameInput, String hobbyInput, int ageInput, boolean loveMusicInput){ // constructor body } In the constructor body, we need to initialize all the instance variables, by assign each variables to its initial values:\nspecies = speciesInput; name = nameInput; hobby = hobbyInput; age = ageInput; loveMusic = loveMusicinput; \nLastly, let\u0026rsquo;s create some methods for the class Bird. We are gonna create 6 methods for this class!\n getSpecies(); // return species of the bird getName(); // return name of the bird getHobby(); // return hobby of the bird getAge(); // return age of the bird getLoveMusic(); // return whether the bird loves music toString(); // return information in a String  Try to write out the first 5 methods with what you learned from the previous exercise about writing methods!\n\nAfter, let\u0026rsquo;s write the toString() method together!\ntoString() is a method that returns the String representation of the object.\nWe will return a String that include all fields of the Bird: name, age, species, hobby, loveMusic by calling the 5 methods you just implemented!\npublic String toString(){ // initialize variable info to have empty String  String info = \u0026#34;\u0026#34;; // append information to the String in the format:  // Hi, my name is [name]. I am a [age] year old [species] who likes to [hobby].  info = info + \u0026#34;Hi, my name is \u0026#34; + getName() + \u0026#34;. I am a \u0026#34; + getAge() + \u0026#34; year old \u0026#34; + getSpecies() + \u0026#34; who likes to \u0026#34; + getHobby() + \u0026#34;. \u0026#34;; // if the Bird likes music, append the String \u0026#34;I also like music very much!\u0026#34; to info  if(getLoveMusic()){ info = info + \u0026#34;I also like music very much!\u0026#34;; }else{ info = info + \u0026#34;However, I do not like music!\u0026#34;; } // return the full String  return info; } If you correctly implemented the Bird class, you will see the following message when you click Run:\nCongratulations! You correctly implemented the Bird Class :) If there is still something incomplete or incorrect when you click Run:\n You might get an error such as Main.java:3: error: cannot access Bird. Or, you will see the message, Something is still not quite right!.   Creating Birds 🐥! Congratulations! You just wrote you first Java class Bird class. Now let\u0026rsquo;s learn to write a program that uses Bird objects!\nWe defined the Bird class to have the following attributes (instance variables) and behaviors (methods): To create a new object of a particular class, we call the constructor of that class in the format class name variable name = new constructor call.\nRecall that the constructor of Bird class is the following:\npublic Bird(String speciesInput, String nameInput, String hobbyInput, int ageInput, boolean loveMusicInput); Hence, we can create a Bird with these attributes (species - duck; name - Patrick; hobby - hangout with friends; age - 15; loveMusic - true) with this line of code.\nBird patrick = new Bird(\u0026#34;duck\u0026#34;, \u0026#34;Patrick\u0026#34;, \u0026#34;hangout with friends\u0026#34;, 15, true); Try it out yourself and create multiple Birds of different species 🐦🐤🐔🐧!\n\nNext, let\u0026rsquo;s call the toString() method on these Bird objects we created to print the information of our friends. You can do either of the following:\n Print the return value of toString() method. (i.e. System.out.println(patrick.toString());) Directly print the Bird object, which prompt toString() to be called in the background. (i.e. System.out.println(patrick);).  Try it out and print out all the information of the bird friends you created 🐦🐤🐔🐧!\n"},{"uri":"https://nuevofoundation.github.io/workshops/unity/setting-up-enemies/","title":"Setting up the Enemies","tags":[],"description":"","content":"Now that Nuvi is all set and ready to move, let\u0026rsquo;s have them welcome aliens into the universe! Locate the alien png file called \u0026ldquo;alien_pink\u0026rdquo; from the Drawings folder. Then, drag and drop the alien_pink into the hierarchy. Rescale the enemy to match Nuvi\u0026rsquo;s size as it is too large.\nNow, if we were to run the game, Nuvi runs on top of the pink alien. We want Nuvi to collide with it. To do this, add a BoxCollider2D on the alien like we did with Nuvi and resize it if necessary. Now, if we were to run the game again, Nuvi runs into the alien instead of over it!\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/strings/","title":"Strings","tags":[],"description":"","content":"Anything that is surrounded in quotation marks is called a string. This is how a computer represents words or sentences. For example, \u0026quot;a\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;banana!\u0026quot;, and \u0026quot;Hello World\u0026quot; are strings, but Hello World and 2 are not strings, because the quotation marks are missing. You can combine many strings together using the + operator. For example:\n \u0026quot;Apple\u0026quot; + \u0026quot;Pineapple\u0026quot; produces the string \u0026quot;ApplePineapple\u0026quot;. \u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; produces the string \u0026quot;Nuevo Foundation\u0026quot;.  Working Together Delete all your System.out.println text in your code. Start your code with the line System.out.println(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;);. Note that there are many ways to combine strings together. For example, another way to print Nuevo Foundation would be to write System.out.println(\u0026quot;Nue\u0026quot; + \u0026quot;vo Fou\u0026quot; + \u0026quot;ndation\u0026quot;);. We will brainstorm at least one more way to print the string \u0026quot;Nuevo Foundation\u0026quot; using two + symbols in each System.out.println statement. Verify that Nuevo Foundation is printed out 3 times. In other words, your console should look like this after you press run:\n Nuevo Foundation Nuevo Foundation Nuevo Foundation  "},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-4/","title":"Activity 4 - Note Taking Practice","tags":[],"description":"Use Linux commands to view the contents of the current directory","content":" As a cybersecurity engineer, it is important to take a lot of notes. These are helpful for future reference to understand how the hack happened. Let\u0026rsquo;s step up our workspace!\nWhat if I want to create a new directory? To practice creating a new directory, use the command mkdir in the following format: mkdir new_directory_name.\nLet\u0026rsquo;s make a directory called files by typing the command below:\nmkdir files As you can see, now when ls -l is run, an additional directory named files appears\nWhat can you do with these files? One example of how you can manipulate a file or directory is by moving it to another location. This is accomplished by the move command, mv. Let\u0026rsquo;s practice by moving the Music directory into the Documents directory.\nType in the command listed below:\nmv Music/ Documents/ Now type in ls -l one more time and look at the output.\nYou should see that the directory Music no longer appears, because it was moved into the Documents directory.\nWe can see that it moved into Documents by using the ls command with an added directory path.\nls -l Documents/ \n Let\u0026rsquo;s practice mv one more time by moving it back.\nTry it:\nmv Documents/Music/ . This moves the Music directory from the Documents directory, back to our current directory, denoted by . The period, or dot, is used in commands to denote the current directory. Typing ls -l one more time shows Music has returned to this directory.\nGreat job, you now know how to move files around. We will use this knowledge soon to recover from the hack.\nWhat if I want to create a new file? To create a file we can use the touch command. The touch command creates an empty file with no data.\nTry the command below to create a file named file1:\ntouch file1 Now when we type ls -l we can see that the file has been created.\nWhat if I want to add data to the file? An empty file doesn\u0026rsquo;t have much use, so lets add some data to it, like our name. To open the file for editing, we will use the vim command. Vim is an editor that allows us to add, remove and change the data in a file.\nType in the command below to edit file1:\nvim file1 We are now in the Vim editor. Press i to enter insert mode. Now type in nuvi and press esc to exit insert mode. Finally type in :wq and press enter. The colon tells Vim you are entering a command. The w and q then tell vim you want to write the changes you made and quit.\nTo exit vim, press esc then type :wq. You will need this every time you open vim!\n Once again type ls -l and you can see that file1 now has 5 bytes of content, instead of 0 when it was blank.\nDefinition: A byte is a unit of measurement for data. At the lowest level, computers use what\u0026rsquo;s known as a \u0026ldquo;bit\u0026rdquo;, which is a single unit of data whose value can only be \u0026ldquo;0\u0026rdquo; or \u0026ldquo;1\u0026rdquo;, to represent information. A byte is a collection of 8 bits.\n One last thing. Let\u0026rsquo;s move our new file into our new directory.\nType in the following command:\nmv file1 files Congratulations, you have created, edited, and moved your first file! Now let\u0026rsquo;s secure our system!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/activity-4/","title":"Activity 4 - Training the Model","tags":[],"description":"","content":" The following code determines how many times model is trained. It is normal for this segment of code to take longer than usual to run.\nmodel.fit(train_images, train_labels, epochs=10) Epochs represent the number of times the model processes all the training data.\n The following code prints out the overall test accuracy.\ntest_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2) print(\u0026#39;\\nTest accuracy:\u0026#39;, test_acc) Question 1 Set the value of epochs equal to 2. What is the accuracy of the last epoch? What is the test accuracy when the trained model is compared to the test dataset?\nQuestion 2 Set the value of epochs equal to 10. Repeat Question 1.\nQuestion 3 Set the value of epochs equal to 20. Repeat Question 1.\nQuestion 4 What correlation do you see when you increase the number of epochs? Does the accuracy increase or decrease?\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-7/","title":"Activity 7: Change the background of image","tags":[],"description":"","content":" In this section, we will start to learn how to change the simple background of your image using pixels.\nExample - Change background color Let us change the background color of Nuvi to pink. from PIL import Image # Open the Nuvi image img = Image.open(\u0026#34;nuevo.png\u0026#34;) width = img.size[0] height = img.size[1] # Set up a new image with width and height newimg = Image.new(\u0026#39;RGB\u0026#39;,(width,height)) # Set the pixels for the new image colorpink = (244,114,208) coloryellow = img.getpixel((0,0)) for i in range(width): for j in range(height): color = img.getpixel((i,j)) # Get the color from original image if color == coloryellow: # If it is yellow, then: newimg.putpixel((i,j),colorpink) # Change the color to pink else: newimg.putpixel((i,j),color) # Else the color stays the same newimg.save(\u0026#34;nuevopink.png\u0026#34;) Wow! This is our new Nuvi after changing the background. Challenge - Change background based on your choice It\u0026rsquo;s now your turn to change whichever color you want on Nuvi!\nIn order to see your image, please click on top left corner (which says ‘Files’), and then click on the image file to see the result.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/animation/","title":"Creating Animations","tags":[],"description":"","content":"Animation in Phaser Animation works by showing a set of images back to back very quickly. When we do this quickly, our mind sees it as movement. In a way, you\u0026rsquo;re tricking the mind to think that this set of images is just one thing that is moving.\nWe use spritesheets for things we want to be animated because we can create that animation by scrolling through the spritesheets. In order to animate spritesheets, there are two steps we must do.\nThe first step is to create the \u0026ldquo;instructions\u0026rdquo; for the animation\nthis.anims.create({ key: \u0026#34;dude_anim\u0026#34;, frames: this.anims.generateFrameNumbers(\u0026#34;dude\u0026#34;), frameRate: 10, repeat: -1 }); This creates an animation called \u0026ldquo;dude_anim\u0026rdquo; that works on top of \u0026ldquo;dude\u0026rdquo;. The frame rate is essentially the speed of the animation. Repeat essentially refers to how many times the animation repeats when played, and a negative number means that the animation plays infinitely.\nThe next step is to simply tell the game to play the animation specified in our instructions. This can also be done in create().\nthis.dude.anims.play(\u0026#34;dude_anim\u0026#34;); When you make this play statement, the line must be put after dude is placed onto the screen, because code is written top to bottom, so if we make this play statement before we place the dude, the computer won\u0026rsquo;t know what to animate.\n Try animating the dude from the last lesson. Feel free to play around with values and see how they change the end result.\n"},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/gravity/","title":"Add gravity","tags":[],"description":"","content":"Let\u0026rsquo;s add gravity to the bird:\nAdd below command in the file [File: create-game.js] bird.body.gravity.y = 900;\nWorking Together In the repl.it window below, we started the code with the line bird.body.gravity.y = 900;.\nIn your console you should see a JSappy bird jumping with gravity after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/hashmaps/","title":"Hashmaps: The Delivery","tags":[],"description":"","content":"--  Now that the restaurants have finished prepping the order, a driver needs to come to pick up the order and deliver it to the customer. But where should the driver go? He needs an address somehow. We want to link a customer’s name and order to their respective address. We can accomplish this by utilizing a HashMap.\n"},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/media-elements/","title":"Media Elements","tags":[],"description":"","content":"Add a GIF GIF stands for Graphic Interchange Format, but all you need to know is that it\u0026rsquo;s just another type of image file. The only difference is that the file has many images. When displayed in the browser, the images are played in sequence, similar to the frames of a movie. Think of it like one of those flip books that seem like the image is animated when you flip it.\n Add a video Aside from text and images, one of the most common things we like to add to websites are videos. Video files are very large, so it’s best to use a service to upload and display the video such as YouTube. Once uploaded to YouTube, how do we get it to play on our website? We use a special tag called an iframe\nIframes display HTML from other websites inside our own. It’s like a window, where you can see what is happening outside on the internet from inside the current website. This process is called embedding.\nFor example, the video below is an iframe from Benji’s Instragram:\n   View this post on Instagram        Push yourself to try new things! 🍉 I stick to the paleo diet most days (usually just the meat part) but on occasion I go for something crazy\nA post shared by Benji Escobari Marquez (@benjimite_thegudboi) on Aug 25, 2018 at 10:05pm PDT\n \rMany sites offer iframes to embed in your website. As an example, here is how you find the iframe code for a YouTube video:\nHere is a sample iframe Copy the following code: \u0026lt;iframe width=\u0026quot;560\u0026quot; height=\u0026quot;252\u0026quot; src=\u0026quot;https://www.youtube.com/embed/lQsqEBSGdyc\u0026quot; frameborder=\u0026quot;0\u0026quot; allow=\u0026quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\u0026quot; allowfullscreen\u0026gt; \u0026lt;/iframe\u0026gt;\nPaste it on your Code Pen and it will look like this:\n\r"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-5/","title":"Activity 5 - Declare and use a variable for font","tags":[],"description":"","content":"Activity 5 Great progress so far! Now let\u0026rsquo;s make use of a variable to change the font of the text in the game.\nIn this activity, you need to apply the knowledge about variables you learned in Python basics.\nFind // TODO (ACTIVITY 5) in the code. Declare the variable font_label, assign it the value 'arial'. Now take a look at this statement in the code font_name = pygame.font.match_font('arial'). Can you figure out the place in this statement where you should use this new variable to control the font displayed on screen?\nYou can get different fonts supported in your system by running pygame.font.get_fonts(). Try using a different font than 'arial'. Which font do you like best? Press run to view the result.\n  ## Takeaway You have just modified the font parameter by using a variable. If you happen to use the same font at multiple places in your program, you can just modify the variable in one place, and it will take effect everywhere you used the variable! "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-5/","title":"Activity 5 - Drawing a honeycomb","tags":[],"description":"","content":"This is the finale! Let\u0026rsquo;s create the honeycomb that Alex will live in. Fortunately, a honeycomb is simply 6 hexagons, so let\u0026rsquo;s combine our knowledge of functions and loops to make our honeycomb!\nIn this activity, create a new function called draw_honeycomb(). Inside the function body, create a loop that repeats 6 times. Inside the loop we have to first draw a hexagon using our draw_hexagon() function we previously defined. Next, move the turtle so it can draw the next hexagon. To do so, after the turtle draws each hexagon, we need to tell our turtle to move forward 50 pixels and then turn right 60 degrees.\nNote that the drawing of the honeycomb may take a while. You can change how fast the turtle draws the honeycomb by setting the turtle\u0026rsquo;s speed to a number between 1 and 10, 1 being the slowest and 10 being the fastest. Place this code near where we change the color of the turtle.\nturtle.speed(8)  "},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/activity-6/","title":"Activity 6 - Functions","tags":[],"description":"","content":"Very well!\nYou\u0026rsquo;ve already done a lot of the program!\nIn this activity we will use functions to group sections of the code.\nFunctions Functions allow us to divide the work of a program into smaller tasks separate from the main section, that is, from the main function.\nWe can think of functions as a machine such that when we turn it on, it executes instructions to return a final result. You can have several machines that perform different processes, and we identify each one with a name, and the type of result it returns.\nIn this activity we will use functions with the void (empty) return type. These functions only process instructions, and do not return anything.\nTo declare (create) a function, we must use the following structure outside the main function:\nvoid name_function(){ //Code here } Let\u0026rsquo;s analyze this code in more detail:\n The return type of the function indicate the type of object the function will return. In this case, we use void to specify that this function doesn\u0026rsquo;t return anything. The name of this function is name_function. The parentheses () are added after the name to identify that it is a function. The braces {} determine the block of code that will execute when we use the function.  Calling a function Since the functions we declare go outside the main() function, when we press Run, the block of code we write in the functions will not run. Therefore, within the function main() we must call the function. We must tell the program when we want that block of code to run. To call a function, we must use the following statement:\nname_function(); We just have to write the name we gave to the function, followed by the parentheses, and finish with a semicolon ;. This will cause the instructions that are inside the function name_function() to be executed.\nParameters of a function When we declare a function, we can pass parameters to it. These are additional objects that the function can use to execute its instructions. The parameters go within the parentheses of the function. For example:\nvoid name_function(int sum, int \u0026amp;number){ number += sum; } And in the main() function we can call name_function with some parameters:\nint main(){ int x = 25; int y = 5; name_function(y, x); } Let\u0026rsquo;s understand in detail what we did:\n When declaring name_function, we write within the parentheses which variables we are going to pass into the function. Then, within the function body, we can use those variables. In main, we had two variables already declared, which we then pass as parameters into the created function name_function. By doing this, the variable sum equals the variable y. The variable number has this symbol \u0026amp; in front. This means that if we modify the variable within the function, the variable that we pass to it in the main function will also be modified. That is, the variable x will be modified by the function since we pass it by reference when writing that symbol in front. When we do not put this symbol, even if we modify its value in the function, we will not see that change in main.   That\u0026rsquo;s great! Now, let\u0026rsquo;s create 2 functions - one to encrypt the message, and the other to decrypt it. For this, we\u0026rsquo;re going to use code we already had, and we\u0026rsquo;ll program something new as well.\n  First, declare a function of return type void, just like encrypting, but to decrypt the name. Name this function decrypt().\n  Copy the contents of the encrypt() function into the new decrypt function.\n  In the sum variable, instead of adding, subtract the character of the name and character of the keyword, and add a letter a (instead of subtracting) so that the final character is a letter of the alphabet and not some random character.\n  Change the condition to turn in the alphabet. Instead of checking to see if the sum is greater than the character z, check if the sum is less than a; if so, add 25 to the variable, instead of subtracting.\n  In the main function, call the corresponding function in the if condition depending on if we want to encrypt or decrypt a message.\n  When you\u0026rsquo;re done, you can press Run and try the following examples:\nprogrammer 1 reina witvczxipigrmg 2 reina You should also try using your own secret words!\nWarning: in this program we should always write the strings and characters in lowercase letters. Remember that you can always go back to the previous activities to review anything!\n Important: To paste into the console, right click the console and click \u0026ldquo;Paste\u0026rdquo;. Otherwise, the paste operation may not work correctly. "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/numbers/","title":"Numbers","tags":[],"description":"","content":"Numbers The computer can also do regular math that you see in school. Use Console.WriteLine to print out the result from the math expressions. No quotation marks are needed for numbers!\nConsole.WriteLine(5 + 4); Console.WriteLine(6 * (9 - 7) / 3); Here is the full list of math symbols that you can use:\n   Operator Description Operator Description     + Add \\ | Divide |    - Subtract % Modulo (remainder)   * Multiply (,) Parenthesis    Fun Fact: Computer Division The computer does division differently from your regular calculator. Computer division will exclude remainders or decimals. For example, 15 / 4 produces 3, and not 3.75.\n Working Together Try printing out the answers to the following to the console. Ensure your brackets are matched. Use a calculator (or mental math) to verify the computer produced the correct answer.\n 2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7))  \n Fun Fact: Random Numbers Here is how to print a random number between 1 (inclusive) and 10 (exclusive):\nRandom random = new Random(); Console.WriteLine(random.Next(1, 10)); Try to find where we use Random in the GuessTheWord game! However, the details as to how this works is complicated, so we will skip this discussion.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-3-organize-songs-using-functions/","title":"Activity 3 - Organize your song using functions","tags":[],"description":"Setting up headphones","content":"\nIn Earsketch, functions are mostly used to organize different sections of a song. The most common musical form is A-B-A where each section is four measures in length, and the A sections sound different from the B section.\nNow that we learned how to use functions, let\u0026rsquo;s try to use them to organize our songs better.\n Define your function with a startMeasure parameter and endMeasure parameter. Place the sounds you would like to have the function represent underneath your function definition. Try to make multiple sections of a song (verse, chorus, intro, etc.) and define them with your functions. If you don\u0026rsquo;t do this, and only use multiple fitMedia calls, you will notice that your program will become long and hard to understand. To help avoid having a large project file, use functions!  Your code should now look something like this:\nfrom earsketch import * init() setTempo(120) fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9) # Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) # Section B def sectionB(startMeasure, endMeasure): fitMedia(Y37_ORGAN_1, 2, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(RD_UK_HOUSE__ARPLEAD_1, 6, startMeasure, endMeasure) sectionA(1, 9) sectionB(9, 17) sectionA(17, 25) finish() "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/activity-4/","title":"Activity 4 - LCD Display","tags":[],"description":"","content":"Wiring Diagram Now that you have mastered outputting signals to LEDs let’s look at displaying text with a simple display. Only 1 resistor (5K) is used to limit the brightness of the display. Try wiring this per the diagram without specific instructions.\nThe Code: //www.elegoo.com\r//2016.12.9\r/*\rLiquidCrystal Library - Hello World\rDemonstrates the use a 16x2 LCD display. The LiquidCrystal\rlibrary works with all LCD displays that are compatible with the\rHitachi HD44780 driver. There are many of them out there, and you\rcan usually tell them by the 16-pin interface.\rThis sketch prints \u0026quot;Hello World!\u0026quot; to the LCD\rand shows the time.\rThe circuit:\r* LCD RS pin to digital pin 7\r* LCD Enable pin to digital pin 8\r* LCD D4 pin to digital pin 9\r* LCD D5 pin to digital pin 10\r* LCD D6 pin to digital pin 11\r* LCD D7 pin to digital pin 12\r* LCD R/W pin to ground\r* LCD VSS pin to ground\r* LCD VCC pin to 5V\r* 10K resistor:\r* ends to +5V and ground\r* wiper to LCD VO pin (pin 3)\rLibrary originally added 18 Apr 2008\rby David A. Mellis\rlibrary modified 5 Jul 2009\rby Limor Fried (http://www.ladyada.net)\rexample added 9 Jul 2009\rby Tom Igoe\rmodified 22 Nov 2010\rby Tom Igoe\rThis example code is in the public domain.\rhttp://www.arduino.cc/en/Tutorial/LiquidCrystal\r*/\r// include the library code:\r#include \u0026lt;LiquidCrystal.h\u0026gt;\r// initialize the library with the numbers of the interface pins\rLiquidCrystal lcd(7, 8, 9, 10, 11, 12);\rvoid setup() {\r// set up the LCD's number of columns and rows:\rlcd.begin(16, 2);\r// Print a message to the LCD.\rlcd.print(\u0026quot;Hello, World!\u0026quot;);\r}\rvoid loop() {\r// set the cursor to column 0, line 1\r// (note: line 1 is the second row, since counting begins with 0):\rlcd.setCursor(0, 1);\r// print the number of seconds since reset:\rlcd.print(millis() / 1000);\r}\r"},{"uri":"https://nuevofoundation.github.io/workshops/debugging/06-testing/","title":"Step 3 - Testing","tags":[],"description":"","content":"You’ve implemented the fix(es) for your bug(s). Naturally, the first thing you do is recompile your code and run it. If it looks right, you’ve fixed the bug! …Or so you’d like to believe. However, in many settings it’s not that simple. You have to make sure that your fix hasn’t introduced new bugs, and that your fix actually works for all cases. To that end, knowing how to test your code is important. Testing is similar to debugging in that you are still trying to find where bugs happen. However, in testing you already know or have a good idea of where the bug will occur, and so in your tests you’ll want to intentionally run that code. However, going into testing blind won’t help you very much.\nUnit Tests Always start small with your tests. This idea is taken from scientific experiments: if you reduce the number of factors (independent variables) that are in play, you can narrow down the cause more easily. These are called unit tests. Rather than testing if the entire program or part works, a unit test looks at a specific part. For instance, a unit test could call one function that does not call other functions to see if it outputs the correct/expected value.\nIntegration Tests Only once your unit tests have succeeded should you start integration tests. Integration tests look at how multiple components of your program work together to see if they output the correct/expected value. An integration test could call a function that calls many other functions, or affects many different parts of the program. Just because your unit tests work doesn’t mean your integration tests work. As an analogy, just because I have working parts of an electronic circuit (battery, LED, resistor, etc.) doesn’t mean the circuit as a whole works!\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/activity-7/","title":"Data Structures (Array &amp; ArrayList)","tags":[],"description":"Introduce basic data structures in Java.","content":"\nIn previous exercises, we learned that variables allow us to access and store a piece data. But, what if we want to store a bunch of similiar data? Is there a good way to organize them without declaring multiple variables?\nIn programming, data structures are elements that allow coders to store multiple pieces of data of the same type. Using data structures is an efficient way to store and access large pieces of data. In this exercise, we will learn about 2 data structures used in Java: array and ArrayList.\nWhile array is a fixed length data structure, ArrayList is a variable lengthed where you can change the size of the data structure. Let\u0026rsquo;s start by looking at arrays!\nArray Let\u0026rsquo;s say we want to store Patrick\u0026rsquo;s 🐥 top 5 favorite movies. Instead of creating 5 variables, we can store all 5 pieces of data in an array, our first data structure!\nTo store data in an array, we do the following:\n We first declare an array by specifying a data type and size (number of data can be stored).  String topMovies[] = new String[5]; // create an array of Strings of size 5. We iterate through the array (go through all the data spots) and assign the data to a spot in the array.  Note that we access the array with its name and an index (0 to access the 1st element, 1 for the 2nd \u0026hellip; ).\ntopMovies[0] = \u0026#34;Birds Of Prey\u0026#34;; topMovies[1] = \u0026#34;The Birds\u0026#34;; topMovies[2] = \u0026#34;Angry Birds\u0026#34;; topMovies[3] = \u0026#34;Bird Box\u0026#34;; topMovies[4] = \u0026#34;The Secret Life of Pets\u0026#34;; // the array topMovies now store \u0026#34;Birds Of Prey\u0026#34;, \u0026#34;The Birds\u0026#34;, \u0026#34;Angry Birds\u0026#34;, \u0026#34;Bird Box\u0026#34;, \u0026#34;The Secret Life of Pets\u0026#34; in order Why is array indexing in Java start with 0? It\u0026rsquo;s tempting and reasonable to think to access the element of an array at the first index, we should start at index 1.\nHowever, when the computer read the code arr[1], it doesn\u0026rsquo;t think to get the 1st element from arr.\nIt actually reads arr[1] as to get the element 1 distance from the start of the array.\nIn other words, the index is actually a memory offset. To access the 1st element, we should get the element of 0 offset from the start of the array (i.e. arr[0]).\n An alternating way to create an array: If we know all pieces of data for an array in advance, we can create the array in one line by listing all the data between { and }.\nFor example:\nString topMovies[] = {\u0026#34;Birds Of Prey\u0026#34;, \u0026#34;The Birds\u0026#34;, \u0026#34;Angry Birds\u0026#34;, \u0026#34;Bird Box\u0026#34;, \u0026#34;The Secret Life of Pets\u0026#34;}; Just like how we initialize data with its index, we can access/modify each data with its index as well.\nFor example:\nString movie1 = topMovies[0]; // movie1 has value \u0026#34;Birds Of Prey\u0026#34; \n It is often useful to know how many elements are an array after creating it (to access the last element in the array for example). And, we can get the number of elements in the array from the length field of the array, typing array_name.length.\nFor example:\nint numOfMovie = topMovies.length; // numOfMovie has value 5 \nExercise: Write a method printArr() that takes an array input and prints out all the elements in that array in order (Hint: utilize for loop and .length to help you).\nAfter clicking Run, the program should print the following:\nBirds Of Prey, The Birds, Angry Birds, Bird Box, The Secret Life of Pets  ArrayList ArrayList is another popular data structure in Java. ArrayList is a class that was implemented using arrays. It is similiar to an array in that users access, store, and modify data by an index.\nYou create an ArrayList by specifying a name and the type between \u0026lt; and \u0026gt;. For example:\nArrayList\u0026lt;String\u0026gt; topMoviesList = new ArrayList\u0026lt;String\u0026gt;(); To add elements, we call the method add() on the ArrayList. For example:\ntopMoviesList.add(\u0026#34;Birds Of Prey\u0026#34;); topMoviesList.add(\u0026#34;The Birds\u0026#34;); topMoviesList.add(\u0026#34;Angry Birds\u0026#34;); topMoviesList.add(\u0026#34;Bird Box\u0026#34;); topMoviesList.add(\u0026#34;The Secret Life of Pets\u0026#34;); // the ArrayList now store \u0026#34;Birds Of Prey\u0026#34;, \u0026#34;The Birds\u0026#34;, \u0026#34;Angry Birds\u0026#34;, \u0026#34;Bird Box\u0026#34;, \u0026#34;The Secret Life of Pets\u0026#34; in order To access an element at a particular index, we call the method get(). Note that Java use 0-based indexing, so to get the first element in an ArrayList we make a method call get(0). For example:\nString movie1 = topMoviesList.get(0); // movie1 has value \u0026#34;Birds Of Prey\u0026#34; And, to get the number of elements in the ArrayList, we call the method size(). For example:\nint numOfMovie2 = topMoviesList.size(); // numOfMovie2 has value 5 \nAs we briefly mentioned above, the critical difference between array and ArrayList is that you need to know number of elements to store in an array upfront, but you do not for an ArrayList.\n  With the line of code String topMovies[] = new String[5] the array topMovies will forever have length 5. As a result, you can\u0026rsquo;t store more than 5 Strings in topMovies after creating it.\n  However, with the line of code ArrayList\u0026lt;String\u0026gt; topMoviesList = new ArrayList\u0026lt;String\u0026gt;(), the ArrayList starts with 0 element and can be infinitely added to or remove from.\n  To remove an element from an ArrayList, we call the method remove(). For example:\nSystem.out.print(topMoviesList.size()); // prints out 5 topMoviesList.remove(\u0026#34;Birds Of Prey\u0026#34;); System.out.print(topMoviesList.size()); // prints out 4 \nExercise: Write a method printList() that takes an ArrayList as input and prints out all the elements in that ArrayList in order (Hint: utilize for loop and size() to help you).\nAfter clicking Run, the program should print the following:\nBirds Of Prey, The Birds, Angry Birds, Bird Box, The Secret Life of Pets  End Of Workshop 🐥 Patrick 🐥 thank you for participating! Hope you learned a lot from this course :) (image created by Molang: giphy.com/molangofficialpage)\n"},{"uri":"https://nuevofoundation.github.io/workshops/unity/setup-projectile-and-prefab/","title":"Setting up the Projectile and Making it a Prefab","tags":[],"description":"","content":"Oh no! The pink alien is attacking now! It\u0026rsquo;s mad because Nuvi ran over it. Let\u0026rsquo;s set Nuvi up with a self-defense mechanism.\nAfter selecting Nuvi in the hierarchy, right click and select \u0026ldquo;Create Empty\u0026rdquo;, which creates an empty GameObject with only a Transform component.\nTo be able to see where our empty object is, make sure we are on the Move tool! You should see two intersecting arrows — where they intersect is where our empty GameObject is located.\n This Transform component will represent where the projectile is going to spawn from. Using the Move tool, let\u0026rsquo;s align the Transform so that it is in front of Nuvi\u0026rsquo;s protruding belly. Rotate the Transform using the Rotate tool to create an image similar to the one below:\nNow, in the Assets folder within the Project window, locate the \u0026ldquo;projectile\u0026rdquo; png from the Drawings folder. Drag and drop the projectile into the hierarchy. Resize the projectile so it is smaller than Nuvi. Make sure to add a BoxCollider2D and a RigidBody2D with the gravity scale set to 0.\nIf the projectile image doesn\u0026rsquo;t show, try going into the Sprite Renderer component and increase the \u0026ldquo;Order in Layer\u0026rdquo;, like you did for Nuvi when we added the background.\n Prefabs Since we will be firing multiple projectiles, it would be easier to make the projectiles a prefab. A prefab is a pre-made version of an object that you can make a bunch of copies of by just dragging it into the scene. If you make any changes to the prefab, that change will affect all copies of that prefab. You don\u0026rsquo;t have to go into each copy and manually change everything.\nFirst, let\u0026rsquo;s create a \u0026ldquo;Prefabs\u0026rdquo; folder under Assets in the Project Window. Then, to make the projectile a prefab, simply drag the projectile from the hierarchy into the Prefabs folder.\nNote that the text, \u0026ldquo;projectile\u0026rdquo;, and the empty cube next to it turned blue in the hierarchy.\n Now that the projectile is saved for future reuse, we can delete the projectile from the hierarchy. To do this, simply right-click on the projectile and choose \u0026ldquo;Delete\u0026rdquo;.\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/numbers/","title":"Numbers","tags":[],"description":"","content":"The computer can also do regular math that you see in school. Use System.out.println to print out the result from the math expressions.\nSystem.out.println(5 + 4); System.out.println(6 * (9 - 7) / 3); Here is the full list of math symbols that you can use:\n + Add \\ Divide   - Subtract % Modulo (remainder)   * Multiply (,) Parenthesis   Fun Fact: Computer Division\nThe computer does division differently from your regular calculator. Computer division will exclude remainders or decimals. For example, 15 / 4 produces 3, and not 3.75.\nWorking Together Try printing out the answers to the following to the console. Ensure your brackets are matched. Use a calculator (or mental math) to verify the computer produced the correct answer.\n 2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7)) 3 % 2 \n "},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-5/","title":"Activity 5 - Secure User Permissions","tags":[],"description":"Use a Linux command to secure your files","content":" Oh no. Some of our files might have been messed with! Let’s secure our notes, file1. We don\u0026rsquo;t want a hacker to mess with these!\nHow do we limit access to our files? By giving users \u0026ldquo;permissions\u0026rdquo; on files!\nPermissions are a way for the computer to determine who has access to files and what they can do with those files.\nIn Linux, there are three common types of access to a file that a user might request: \u0026ldquo;read\u0026rdquo;, \u0026ldquo;write\u0026rdquo;, or \u0026ldquo;execute\u0026rdquo;.\n\u0026ldquo;Read\u0026rdquo; access means that a user may open and read a file. \u0026ldquo;Read\u0026rdquo; access is often denoted with a r symbol.\n\u0026ldquo;Write\u0026rdquo; access means that a user may open and write to a file. This includes renaming and moving a file to a different location in the filesystem. \u0026ldquo;Write\u0026rdquo; access is often denoted with a w symbol.\n\u0026ldquo;Execute\u0026rdquo; access means that a user may attempt to run the file as a program. \u0026ldquo;Execute\u0026rdquo; access is often denoted with a x symbol.\n But how do we know how secure our files are? Is there a command that we have learned so far that can show us how secure our files are?\nFeel free to go back if you need to!\nWe should keep using that command to check if we changed the permissions as expected.\n How do we secure the files with permissions then? chmod u=rwx g=rx o=x file1 chmod is a command used to modify the permissions of your files for the following 3 different groups of users:\n the user and owner of the file the group and the members of the group of people with access to the file the others or anyone else  These groups can be modified to have permissions to do the following:\n read write execute.   Try it on your own! Now, let\u0026rsquo;s try to change the permissions of our files. We want anyone outside of our group and aside from ourselves to have no permissions for file1. How do we do that?\nFun Fact: Shortcut! chmod can also be used with simple number commands. These commands are written like:\nchmod 751 [insert filename] The values can be understood as giving users the permission to read, write, and execute.\nWhat permissions do the other two values give?\n   Number Meaning     7 read + write + execute   6 read + write   5 read + execute   4 read   3 execute + write   2 write   1 execute   0 no permission    "},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/activity-5/","title":"Activity 5 - Testing the Model","tags":[],"description":"","content":" Now that we have built and trained our model, we want to go ahead and test it against returned clothing items. Let\u0026rsquo;s start off with our first sample item, which was the shoe.\nprobability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()]) predictions = probability_model.predict(test_images) The following code gives a list of probabilities that an image fits in a specific category. The index value corresponds to what image would be classified.\npredictions[0] #Returns the index with highest probability, depends on the index value. Question 1 The array of values represents the confidence level that an image belongs to a specific category. What index has the most confidence value, and what has the least confidence value?\nQuestion 2 Verify your answer to the highest probability value by running the code below:\nnp.argmax(predictions[0]) test_labels[0] In the class_names array, what category does this index correspond to? (Hint: Given the index of the maximum probability value, what index should you look for?)\nVerify what category this image falls under using this code. Is it correct?\nclass_names[9] "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-8/","title":"Activity 8: Flip your image","tags":[],"description":"","content":" In this section, we will start to learn how to flip your image using pixels.\nExample - Flip your image upside down Let us flip the cat upside down. Flipping the image upside down is the same as creating a symmetrical image with respect to the horizontal central line, which is the black line in the following image.\n # We need to import PIL package to manipulation with pixels. from PIL import Image # Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) width = img.size[0] height = img.size[1] # Set up a new image with the same width and height newimg = Image.new(\u0026#39;RGB\u0026#39;, (width,height)) # Set the pixel for the new image for i in range(width): # For every column for j in range(height): # For every row heightNew = height - 1 - j # Get the new height location of the pixel. color = img.getpixel( (i, heightNew) ) # Get the color from original image newimg.putpixel((i,j),color) # Put the color into new image newimg.save(\u0026#34;Mycat.png\u0026#34;) Wow! This is our new cat after flipping.\nHow did we figure out how to set heightNew? In the above code we have:\nheightNew = height - 1 - j\nThis is the key point for flipping the cat upside down. This takes the height of the image and subtracts 1 as well as the current pixel height location (j). We subtract 1 for indexing; remember that computers start counting at \u0026lsquo;0\u0026rsquo; instead of \u0026lsquo;1\u0026rsquo;. We subtract the current pixel height location to get location of where the new pixel should be.\nYou can draw some simple pictures by hand to visualize this.\nRemember our original code mainly is:\nwidth = img.size[0] height = img.size[1] # Set up a new image with the same width and height newimg = Image.new(\u0026#39;RGB\u0026#39;, (width,height)) # Set the pixel for the new image for i in range(width): # For every column for j in range(height): # For every row heightNew = height - 1 - j # Get the new height location of the pixel. color = img.getpixel( (i, heightNew) ) # Get the color from original image newimg.putpixel((i,j),color) # Put the color into new image For example, try to apply this code on the following 4x4 letter group:\nThen create the symmetrical output with respect to horizontal central line and compare it with the previous output. Are they the same?\nChallenge - Flip your cat from left to right It\u0026rsquo;s now your turn to flip your cat from left to right!\nFlip the image from left to right is same as creating a symmetrical image with respect to the vertical central line.\nPay attention to the variable widthNew and think carefully about how to set it.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-2/","title":"Activity 2 - Animating the Player&#39;s Ship","tags":[],"description":"","content":"To add some life to our game, let’s get things moving around! Animate the player we have created.\nOnce your ship is animated, it should look like this. Notice the flames coming out of the ship\u0026rsquo;s engine! (Although it may be faster or slower depending on the frame rate that you picked).\nWe will make one final touch to the animation - we will move the background as well. Change the background from a regular image to a TileSprite like this:\nthis.background = this.add.tileSprite(0, 0, config.width, config.height, \u0026#34;background\u0026#34;); this.background.setOrigin(0, 0); TileSprites will allow our background to move even though it\u0026rsquo;s not a spritesheet because it is a type of Sprite with repeating texture, so it can be scrolled through Phaser\u0026rsquo;s infinite Canvas.\nNow try it! If it’s working properly, then it will look like the ship is flying through space!\n"},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/jump-force/","title":"Make the bird jump with force","tags":[],"description":"","content":"Let\u0026rsquo;s add force to the bird\nAdd the below command in the file [File: create-game.js] bird.body.velocity.y = -350;\nWorking Together In the repl.it window below, we started the code with the line bird.body.velocity.y = -350;.\nIn your console you should see a Jsappy bird jumping with force after you press run:\nBonus Activity Let\u0026rsquo;s make the bird jump up and forwards:\nAdd below command in the file [File: create-game.js] bird.body.velocity.x = 100;\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/arrays/methods/","title":"Methods","tags":[],"description":"","content":"Methods represent some action we wish to perform on the array. They can be used to change the behaviour or perform some operations on itself.\nTo make things easier, arrays provide a lot of methods. Let\u0026rsquo;s go over some of the basic ones which would give you an idea of they look like.\nHow is it different compared to properties ? Properties are basically information that an array has. Methods are what an array can do.\n Concat() Joins two or more arrays and returns a new array.\nSyntax:\nvar value = arrayName1.concat(arrayName2); Example: Push() Adds one or more elements to the end of an array and returns the resulting length of the array.\nSyntax:\nvar value = arrayName.push(newElement); Example: Pop() Removes the last element from an array and returns that element.\nSyntax:\nvar value = arrayName.pop(); Example: Shift() Removes the first element from an array and returns that element.\nSyntax:\nvar value = arrayName.shift(); Example: Unshift() Adds one or more elements to the front of an array and returns the new length of the array.\nSyntax:\nvar value = arrayName.unshift(newElement); Example: Sort() Sorts the elements of an array in place, and returns a reference to the array.\nSyntax:\nvar value = arrayName.sort(); Example: Reverse() Transposes the elements of an array, in place: the first array element becomes the last and the last becomes the first. It returns a reference to the array.\nSyntax:\nvar value = arrayName.reverse(); Example: "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-3/","title":"Activity 3 - Adding a GIF of Nuvi","tags":[],"description":"","content":" Follow this link to see the available GIFs Click on the one you like and select \u0026ldquo;Embed\u0026rdquo;  Copy the code from the white box below \u0026ldquo;GIF Embed Code\u0026quot;\n Paste the code anywhere in your page as long as it\u0026rsquo;s inside the \u0026lt;body\u0026gt; tags.\nTry it yourself!  "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-6/","title":"Activity 6 - Fix the &#39;if&#39; condition to track correct score.","tags":[],"description":"","content":"Activity 6 You have come a long way; we hope you are enjoying this workshop!\nIn this activity, you need to apply your knowledge of \u0026lsquo;if\u0026rsquo; control structures you learned in the Python basics workshop.\nFind // TODO (ACTIVITY 6) in the code. We introduced an 'if' block on purpose that has the wrong condition for tracking the score when the right paddle misses the ball. This not only causes the wrong score to be displayed on screen; it causes the ball to move in an erratic manner. Can you figure out what \u0026lsquo;condition\u0026rsquo; the 'if block should check for when the right paddle misses the ball? Ask the person beside you, or the workshop staff, if you need help.\nYou may need to check the boundary value for the horizontal position (represented by \u0026lsquo;X\u0026rsquo; axis) of the ball when the right paddle misses it. Can you guess what value it should be? Press run to confirm the result.\n  ## Takeaway You have just fixed a condition for checking boundary values when ball moves horizontally out of the game boundary. "},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/activity-7/","title":"Activity 7 - Input line","tags":[],"description":"","content":"Congratulations!\nYou are very close to completely saving the nation. All that remains is to be able to enter a complete sentence! For this we only have to make a few small changes. First, you need to use the statement to enter the string:getline().\nstring phrase; getline(cin, phrase); By doing it this way, the console will be able to accept a complete message, not just a single word.\nFollow these steps, and complete the program to save the kingdom:\n In the main function, change the statement cin \u0026gt;\u0026gt; name; to getline(cin, name);. In both functions, add an if condition in the for loop, and execute the contents of the for loop only if the current character is greater than or equal \u0026lsquo;\u0026gt;=\u0026rsquo; to the character \u0026lsquo;a\u0026rsquo; and less than or equal \u0026lsquo;\u0026lt;=\u0026rsquo; to the character \u0026lsquo;z\u0026rsquo;. By doing so, we can ignore encrypting and decrypting exclamation points, commas, spaces, and other special characters.  Don\u0026rsquo;t forget how this program works:\n First, the program asks for the user\u0026rsquo;s name. Next, we must decide if the message must be encrypted or decrypted by typing 1 (for encryption) or 2 (for decryption). Finally, we type in the message to encrypt or decrypt.  Create your own secret messages, or decrypt those of your peers!\nWarning: in this program we should always write the strings and characters in lowercase letters. Remember that you can always go back to the previous activities to review anything!\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/part-2/","title":"Part 2 - Building a Mandala Flower","tags":[],"description":"","content":"Great job! You finished building a honeycomb for Alex’s beehive, but Alex needs to also get his pollen from flowers! Wouldn’t it be nice to add a flower to the picture as well? In part 2, we will be creating a mandala flower!\n(Stay tuned - we\u0026rsquo;ll show you what a mandala flower looks like.)\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/booleans/","title":"Booleans","tags":[],"description":"","content":"Booleans Booleans are true or false statements. Unlike strings or numbers, booleans store statements of truth: is what I am saying true or false? For example, if I ask, \u0026ldquo;Are you a robot?\u0026quot;, this question produces a true or false result, which we call a Boolean. In this case, since you are not a robot (hopefully!), we would produce false.\nWe can also use math operators to create boolean expressions. Here are some examples; however, notice the unusual symbols for \u0026ldquo;equal to\u0026rdquo; and \u0026ldquo;not equal to\u0026rdquo;:\n   Operator Description Operator Description     \u0026lt; Less than \u0026gt; Greater than   \u0026lt;= Less than or equal to \u0026gt;= Greater than or equal to   == Equal to != Not equal to    As usual, use Console.WriteLine to print out your results:\nConsole.WriteLine(10 \u0026lt; 8); Console.WriteLine((3 * 6) == (32 - 14)); Working Together Try guessing the answers to the following expressions. Use Console.WriteLine to check your answers.\n 54 \u0026lt; (10 + 32) (37 / 5) == 7 \u0026quot;Hello\u0026quot; + \u0026quot;World\u0026quot; == \u0026quot;Hello World\u0026quot; false == false  \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-4-add-effects-to-your-songs/","title":"Activity 4 - Add effects to your song","tags":[],"description":"Setting up headphones","content":"\nEffects in EarSketch Effects allows the producer to alter the sound of the audio clip into its own unique sound. Similar to how we used fitMedia() to add new audio clips, we must use the setEffect() function to define specific effects for each audio clip. It is important to note that multiple effects can be placed on the same track. This allows for the producer to combine multiple effects together. Earsketch has many effects built-in. To reference all the effects, visit this link and make sure Curriculum pane is selected in the navigation bar.\nBefore we start adding effects to our song, let\u0026rsquo;s breakdown the pieces of the two setEffect functions:  track: The track number to which the effect is applied to. Note: To apply an effect to the Master track, use 0 as the value for track. The master track is where all the audio is collectively played together. This is an easy way to apply an effect to all the sounds being processed. effectType: The specific effect being used effectParameter: The setting for the effect being used effectValue: The value applied to the effectParameter  Add setEffect function to your song Since we are more familiar with using effects, let\u0026rsquo;s add an effect to our song.\n  On the API browser on the left, scroll to setEffect API.\n  Insert a setEffect function call into your code, using the paste icon.\n  We need to replace the parameters with our own values. Put an integer value for trackNumber. Let\u0026rsquo;s put 2.\n  For the rest of the effect parameters, click on the eye icon on the setEffect API and you will see a link to \u0026ldquo;Every Effect Explained in Detail\u0026rdquo;. Click on it to open this section on the right side of your window.\n  You may notice that Earsketch has many different variations of effects. By default, you should see section 30.4 BANDPASS on the right. For now, we will use the DELAY from section 30.4 as effectType in our setEffect function call.\n  Now that we have chosen our effectType, we need an effectParameter. Navigate to section 30.4 on the right to check out different parameters supported for DELAY. Here is a picture of that section. We recommend using the DELAY_FEEDBACK.   For the final parameter, input a valid value. Since we have chosen DELAY_FEEDBACK, we must specify a number between -120.0 and -1.0 (as shown in the picture above). Example: Use -6.0 as your effect value for DELAY_FEEDBACK.\n  Your code should now look something like this:\nfrom earsketch import * init() setTempo(120) fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9) # Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) # Section B def sectionB(startMeasure, endMeasure): fitMedia(Y37_ORGAN_1, 2, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(RD_UK_HOUSE__ARPLEAD_1, 6, startMeasure, endMeasure) sectionA(1, 9) sectionB(9, 17) sectionA(17, 25) setEffect(2, DELAY, DELAY_FEEDBACK, -6.0) setEffect(2, DELAY, DELAY_TIME, 1200.0) finish() "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/appendix/","title":"Appendix","tags":[],"description":"","content":"Appendix The components, in detail Imagine our circuit is a play. Before the final performance in front of an audience, we need a place to practice. This is where the breadboard comes in.\n Breadboards are simple platforms that we can use to build temporary circuits for testing and debugging before finalizing our design and permanently soldering (welding) it together. Breadboards allow us to easily add, remove, or reposition components. Below on the left is an image of a breadboard. The image to the right shows how the pins are connected to each other. Each one of the numbered rows on the breadboard, shown in yellow, contains 5 pins holes. Every pin hole on a row (yellow line) is connected to the other pin holes on that line. The red line on the right shows a common connection between those pin holes, while the blue line on the right side show a common connection between those pin holes. The same is true on the red and blue lines on the left. However, the red and blue lines on the right and left are not connected to each other. Components that are plugged into the same common connection are connected in the circuit  The Light Emitting Diode (or LED for short) is a small light that turns on when electricity flows through it.\n The LED has 2 leads: the Anode and the Cathode. The Anode is longer than the Cathode and is always attached to the higher voltage.   The resistor is a small piece of ceramic material that slows down the flow of electricity.\n A resistor has 2 leads, but it is omnidirectional. In other words, it doesn’t matter which lead you attach to the higher voltage. Most electronics can only handle a certain amount of electricity before they break, so resistors protect the other components in our game by keeping the electricity low.   "},{"uri":"https://nuevofoundation.github.io/workshops/unity/firing/","title":"Firing","tags":[],"description":"","content":"Now that the projectile is all set up, let\u0026rsquo;s get Nuvi firing those projectiles. Make a script called \u0026ldquo;FiringBehavior\u0026rdquo;, then copy and paste this code:\nusing System.Collections; using System.Collections.Generic; using UnityEngine; public class FiringBehavior : MonoBehaviour { public Transform spawn_coor; //where the projectile will spawn  public float projectile_speed; //how fast projectile will go  public GameObject projectile_object; //red projectile sprite  // Start is called before the first frame update  void Start() { projectile_speed = 15f; } // Update is called once per frame  void Update() { if(Input.GetButtonDown(\u0026#34;Jump\u0026#34;)) //space bar will spawn projectile  { Rigidbody2D rb = projectile.GetComponent\u0026lt;Rigidbody2D\u0026gt;(); rb.AddForce(spawn_coor.up * projectile_speed, ForceMode2D.Impulse); //makes projectile move  } } } Right now this script doesn\u0026rsquo;t work; we need to tell the game what to spawn when the spacebar is pressed. To do so, add GameObject projectile = Instantiate(projectile_object, spawn_coor.position, spawn_coor.rotation); above Rigidbody2D rb = projectile.GetComponent\u0026lt;Rigidbody2D\u0026gt;();. The Instantiate method indicates what to create, where to create it, and in what direction it should be facing.\nDrag and drop this script into Nuvi\u0026rsquo;s inspector. If you were to run the script now, you will notice that nothing changed. This is because there are public variables that have not been assigned yet. Head to Nuvi\u0026rsquo;s inspector and scroll down to the Behavior script. Notice that spawn_coor and projectile_object are empty. For spawn_coor, drag and drop the empty GameObject you made in the last lesson that represents where projectiles spawn. For projectile_object, drag and drop the projectile prefab that you also made in the last lesson.\nAlso, now that Nuvi has everything they need to defend, let\u0026rsquo;s also make Nuvi into a prefab!\nRun the game and notice what you see. We got Nuvi to fire projectiles, but these projectiles can\u0026rsquo;t do anything! In the next few lessons, you\u0026rsquo;ll learn how to get them to interact with other objects.\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/booleans/","title":"Booleans","tags":[],"description":"","content":"Booleans are true or false statements. Unlike strings or numbers, booleans store statements of truth: is what I am saying true or false? For example, if I ask, \u0026ldquo;Are you a robot?\u0026quot;, this question produces a true or false result, which we call a Boolean. In this case, since you are not a robot (hopefully!), we would produce false. We can also use math operators to create boolean expressions. Here are some examples; however, notice the unusual symbols for \u0026ldquo;equal to\u0026rdquo; and \u0026ldquo;not equal to\u0026rdquo;:\n   Operator Description Operator Description     \u0026lt; Less than \u0026gt; Greater than   \u0026lt;= Less than or equal to \u0026gt;= Greater than or equal to   == Equal to != Not equal to    As usual, use System.out.println to print out your results:\nSystem.out.println(10 \u0026lt; 8); System.out.println((3 * 6) == (32 - 14)); Working Together Delete all your System.out.println text in your code. Try guessing the answers to the following expressions. Use System.out.println to check your answers.\n 54 \u0026lt; (10 + 32) (37 / 5) == 7 \u0026ldquo;Hello\u0026rdquo; + \u0026ldquo;World\u0026rdquo; == \u0026ldquo;Hello World\u0026rdquo; false == false \n Booleans Operators You can also connect boolean expressions together using the \u0026amp;\u0026amp; (AND) and the || (OR) operator. For example, suppose I ask: \u0026ldquo;Are you a human, and is Nuvi a robot?\u0026rdquo; The word \u0026ldquo;and\u0026rdquo; connects the two true-false questions together. In this case, since it is true that you are a human, and it is also true that Nuvi is a robot, then the overall result is true. Here\u0026rsquo;s a chart that describes what happens when we connect booleans together:\n   Expression Result Expression Result     true \u0026amp;\u0026amp; true true true || true true   true \u0026amp;\u0026amp; false false true || false true   false \u0026amp;\u0026amp; true false false || true true   false \u0026amp;\u0026amp; false false false || false false    To summarize, \u0026amp;\u0026amp; requires both Boolean expressions to be true, while || only requires one of the two Boolean expressions to be true. Here are some more examples:\n (5 \u0026lt; 8) \u0026amp;\u0026amp; (9 != 10) produces true since both 5 is less than 8 and 9 is not equal to 10. (6 != 2 * 3) || (8 \u0026lt; 2 * 4) produces false since both 6 not equal to 2 * 3, and 8 not being less than 2 * 4 produce false.  "},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-6/","title":"Activity 6 - A BAD File","tags":[],"description":"Use Linux commands to search","content":" I know I had a file secret-message.txt with one of my favorite quotes in it. \u0026ldquo;Do. Or do not. There is no try.\u0026rdquo; Can you help me find it?\nSearching for a pattern in a file? grep is a command used to search for text within files. There are different flags or options that can change how it is used.\nThe format is: grep [flag] “[pattern]” [filename].\n   flags Uses     -c To get the number of files with the pattern.   -i To make the search case-insensitive. “uNiX” is the same as “unix”   -n To return matched lines and their line numbers.   -R Search all files in current directory.    Let\u0026rsquo;s practice this command to find my secret-message.txt! Let\u0026rsquo;s try the following command:\ncd grep -R \u0026quot;Do. Or do not. There is no try.\u0026quot;  Why does the secret-message file look like that? Remember that file we saw with the strange name? It was called malware.sh. We should go find it again and take a closer look at it. I think this was left by the hackers!\nfind is a command used to search for a file with certain parameters within a directory or region of files. It can be used in multiple ways including:\n Searching for a file with a specific file name\nThe format is: find [directory] -name [filename] Searching for all files with a specific file extension (for example, text files, ending with .txt)\nThe format is: find [directory] -name *.txt  Use the find command to search for the file within the current directory. Is there a command we can use to figure out what the current directory is?\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/activity-6/","title":"Activity 6 - Testing the Model","tags":[],"description":"","content":"Let\u0026rsquo;s repeat the same thing with the second clothing sample you chose in Activity 2. Change the index value to the one used for the second image in Activity 2. Then, repeat Activity 5 starting from predictions[your_index_value]\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-9/","title":"Activity 9: Rotate your image","tags":[],"description":"","content":" In this section, we will start to learn how to rotate your image using pixels.\nExample - Rotate your image 180 degree clock-wise Let us rotate our cat 180 degrees clock-wise. # We need to import PIL package to allow manipulation with pixels. from PIL import Image # Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) width = img.size[0] height = img.size[1] # Set up a new image with the half width and height newimg = Image.new(\u0026#39;RGB\u0026#39;,(width,height) ) # Set the pixel for the new image for i in range(width): # For every column for j in range(height): # For every row # Focus on how we get our heightNew. heightNew = height - 1 - j # Focus on how we get our widthNew. widthNew = width - 1 - i color = img.getpixel((widthNew, heightNew)) # Get the color from original image newimg.putpixel((i,j),color) # Put the color into new image newimg.save(\u0026#34;Mycat.png\u0026#34;) Wow! This is our new cat after rotating. Pay attention to how we get our heightNew and widthNew. Think about those variables carefully and try to visualize them.\nFor example, try to apply them on the following 4x4 letter group:\nThen rotate it 180 degree clockwise and compare it with the previous output. Are they the same?\n Challenge - Rotate your cat 90 degrees counter-clock-wise It\u0026rsquo;s now your turn to rotate your cat 90 degrees counter-clockwise!\n  details summary::-webkit-details-marker { display: none; } details summary { width: 100%; padding: .5rem 1rem .5rem 2.5rem; color: #fff; position: relative; cursor: pointer; background:#6bb1e0; } details summary:before { content: \"+\"; color: #fff; position: absolute; line-height: 0; margin-top: 1rem; left: 1rem; font-weight: 200; transform-origin: center; transition: 200ms linear; } details[open] summary:before { transform: rotate(45deg); font-size: 2rem; } details { margin: 2rem 0; position: relative; padding: 0px; display: block; background: #e6f3fb; color: rgba(47, 103, 141, 0.995) !important }   Advanced The Pillow module has functions here that can help simplify the steps above! To do that, let’s look at the Pillow Image function rotate().\nThe rotate image works using angles. For example, rotate(45) will tilt your picture sideways by 45 degrees. Using rotate(90) will turn your picture sideways.\nLet’s give that a try! Let’s rotate the image before we save it:\nimage = Image.open(\u0026#34;cat.jpg\u0026#34;) image.rotate(90) image.save(\u0026#34;myCat.jpg\u0026#34;) Hmm, the picture didn’t seem to rotate. Why? Well, the image we opened is saved in the image variable. When we rotate the picture, we don’t save the rotated picture in any variable, so our code doesn’t save the rotated image.\nLet’s do this instead:\nimage = Image.open(\u0026#34;cat.jpg\u0026#34;) image = image.rotate(90) image.save(\u0026#34;myCat.jpg\u0026#34;) Challenge: can you turn this image all the way around? Can you turn the image 3/4ths of the way around without using an angle \u0026gt; 180? (Hint: try using negative angle numbers!)\nRotated all the way around, my image looks like this:\n  "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/input/","title":"Enabling User Inputs","tags":[],"description":"","content":"User Inputs Inputs are essential because without the user inputting things with controls, our game isn\u0026rsquo;t really much of a game. Although Phaser supports a variety of different input options, we are going to go over three that you will use in the Space Invaders Game.\nArrow Keys Let\u0026rsquo;s start with one of the most important controls: arrow keys. First, we will create a variable that is able to detect when the player presses an arrow key.\nthis.cursors = this.input.keyboard.createCursorKeys(); To use this variable, you must pick between 4 boolean statements.\nthis.cursors.up.isDown this.cursors.down.isDown this.cursors.left.isDown this.cursors.right.isDown Each of these boolean statements will equal true if the associated key is pressed and false if it is not.\nSpace Bar To add a space bar input, the process will be very similar to the arrow keys. First we will create a variable that detects the space bar being pressed.\nthis.spacebar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE); Then we can use a boolean statement to check whether the input has been pressed.\nPhaser.Input.Keyboard.JustDown(this.spacebar) Single Click You can also use the same process that we used to add arrow key and space bar inputs for clicks, but we will go over a slightly different method here because it is something you will likely use in the Space Invaders game.\nthis.input.once(\u0026#34;pointerdown\u0026#34;, this.restart, this); This line calls the method this.restart when the player clicks. However, this is a single-use input, meaning that after the player clicks once, it can no longer be used without being called again. You will typically use this somewhere within update() or the helper functions instead of create().\n"},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/add-rotation/","title":"Bird falling with rotation","tags":[],"description":"","content":"Let\u0026rsquo;s add rotation to the bird:\nAdd below command in the file [File: update-game.js] if (bird.angle \u0026lt; 50) { bird.angle += 1; }\nComments: If is a conditional block where we are checking the angle of the bird and if it\u0026rsquo;s less than 50 we are executing the condition. -bird.angle+=1;\nWorking Together In the repl.it window below, we started the code with the line bird.angle +=1;.\nIn your console you should see a Jsappy bird rotating with an angle after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-4/","title":"Activity 4 - Try the form and change the style","tags":[],"description":"","content":"Adding a Contact Form Finally, we will add a contact form to let people reach us if they are interested in Benji.\nMost browsers do not support sending emails directly from the contact form because it\u0026rsquo;s an easy way for trouble makers to send spam to users. Spam is an irrelevant or inappropriate message sent over the internet. Therefore, to send a form, we will use a free service called FormSpree . If we want the messages in the contact form to go to our email, we will first need to confirm it with FormSpree. This confirmation method keeps bad actors from just putting down anyone’s email in a contact form and spamming the victim.\nSee the Pen Contact Form by Deliana Escobari (@Sunny-Dee)\ron CodePen.\n\rActivity 4  Click on the try it yourself! button to open the editor Change the part that says \u0026lt;YOUR EMAIL HERE!\u0026gt; to your personal email if you have one. If you don\u0026rsquo;t, use email@nuevofoundation.org If you do, try to send a test message and see if it works Add any styling to the form. For example, try changing font or color of the form  Try it yourself!\n"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-7/","title":"Activity 7 - Define the key combination to exit the game","tags":[],"description":"","content":"Activity 7 Time for the final activity in this workshop; yay! You have done an awesome job getting here. You should be proud of yourself!\nIn this activity, you need to change the way the game exits anytime a given key combination is pressed.\nFind // TODO (ACTIVITY 7) in the code. The Pygame library gives you a handy way by using event to detect what keystrokes are being pressed anytime during the life of program. Currently the game exits by pressing the 'BACKSPACE' key. Change it so the game exits when the 'ESC' key is pressed on the keyboard.\nIf the value of 'BACKSPACE\u0026rsquo; key in Pygame library is K_BACKSPACE, then can you guess the value of the 'ESC key? Give it few tries before you ask for help. Press run to confirm the result.\n  ## Takeaway You have just changed the way game exits by listening for a specific key press. "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-6/","title":"Activity 6 - Moving the turtle","tags":[],"description":"","content":"Our first step is to move the turtle to a new location to draw the flower (we don’t want to draw the flower on top of the beehive!). To do this, we first need to use the following methods:\nturtle.penup() turtle.goto(x,y) turtle.pendown() turtle.penup() tells the turtle to pick up its pen so it doesn’t draw while it is moving. Then, with turtle.goto(x,y), we are telling the turtle the position where the turtle moves to. After that we tell the turtle to put its pen back down using turtle.pendown() so it can start drawing again.\nTip The x and y in the turtle.goto() method are the x and y coordinates of the turtle. We want to change the x and y coordinates of the turtle from (0, 0) which is center of the image, to somewhere a little further away so that the mandala flower doesn’t cover up part of the honeycomb.\n To complete this activity, move the turtle to position (300, 300) on the canvas. This will move it to the top-right corner.\n "},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/activity-8/","title":"Conclusion","tags":[],"description":"","content":"Congratulations!\nYou have done an amazing job. You have saved the kingdom and while doing that you learned C++ programming as well! :)\nLet\u0026rsquo;s review what you learned:\n You have used the console to input and send encrypted or decrypted messages. You usedvariables to store the messages that were going to be sent out. You used loops to analyze each letter in the messages. You used conditionals to determine if encryption or decryption was needed. The ASCII code helped you know the value of each character so that we were able to encrypt or decrypt the message.  The King has sent you a special encrypted thank you message. With the help of your C++ program, you will be able to decrypt it and read it:\nsvox hrbguoecvg, zye wiquuee lgk iz a jgvpl rgfgqr. wvv fzggls ooxzu hvoj eazy pskirukk bqtzsvd lvk iuqeq ofs I sjz lhmnnh le qdbj hqls, iyt cwtx if nrl kpns. fgu mrh iyt kjvvr teudv ew inzs zawwgd. qdbj peojgrcesx kkuloh rhv osrzunj. o shzzrzazt ijlkjs goautv ngk, ovkje rou hmhv num wulo vrlv inv ocprglkfwzq tb hhzh crcf eoee ssgfds. fgue phgwejbgfcq wdh gklhzrnpiqu. lwv guqax fdbzbq otu axl rjj fvdvde mrh ujplslml rousntj lolh lox. qgdxggluxawwgdk. cuo ybu kont ld ivlqbuolt ssirufe eskxusy kaiiqu mi qdb yaie osrhfsj rn umsdjjrcz kkulo iypl lodl ne ysjo ysrhfhl lc qemg lmthrh, ngk yocv lqaucvs hguxrmmpwfv. I ydvv I cmn psvj qdb rgmiq wf jys lmthrh. Swfrvgody mng yzduzf, lhq klcx 2 programador  Important: To paste into the console, right click the console and click \u0026ldquo;Paste\u0026rdquo;. Otherwise, the paste operation may not work correctly. "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/boolean-operators/","title":"Boolean Operators","tags":[],"description":"","content":"Booleans Operators You can also connect boolean expressions together using the \u0026amp;\u0026amp; (AND) and the || (OR) operator. For example, suppose I ask: \u0026ldquo;Are you a human, and is Nuvi a robot?\u0026rdquo; The word \u0026ldquo;and\u0026rdquo; connects the two true-false questions together. In this case, since it is true that you are a human, and it is also true that Nuvi is a robot, then the overall result is true.\nHere\u0026rsquo;s a chart that describes what happens when we connect booleans together:\n   Expression Result Expression Result     true \u0026amp;\u0026amp; true true true || true true   true \u0026amp;\u0026amp; false false true || false true   false \u0026amp;\u0026amp; true false false || true true   false \u0026amp;\u0026amp; false false false || false false    To summarize, \u0026amp;\u0026amp; requires both Boolean expressions to be true, while || only requires one of the two Boolean expressions to be true. Here are some more examples:\n (5 \u0026lt; 8) \u0026amp;\u0026amp; (9 != 10) produces true since both 5 is less than 8 and 9 is not equal to 10. (8 \u0026lt;= 2) || (\u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; == \u0026quot;he\u0026quot;) produces true since \u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; results in \u0026quot;he\u0026quot;, even though 8 is not less than or equal to 2. (6 != 2 * 3) || (8 \u0026lt; 2 * 4) produces false since both 6 not equal to 2 * 3, and 8 not being less than 2 * 4, produce false.  Working Together Try guessing the answers to the following expressions. Use Console.WriteLine to print out the answers.\n (9 \u0026lt; 10) \u0026amp;\u0026amp; (12 =\u0026gt; 11) (15 - 2 == 11) || (4 % 3 != 2)  \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-5-use-effects-to-fade-in/","title":"Activity 5 - Use effects to fade in","tags":[],"description":"Setting up headphones","content":" Now that you have one effect in your song, let\u0026rsquo;s try to fade in the introduction of our song.\nIn activity 4, we used setEffect function to apply an effect to a specific track for the entire duration of the song, but what if you only want a specific section of your song to have an effect? Use the setEffect function with more parameters!  effectStartValue: The starting value applied to the parameter effectStartLocation: The measure at which the starting value is set effectEndValue: The ending value of the parameter effectEndLocation: The measure at which the ending value is set  This version of the setEffect allows for us to perform automation on a specific piece of our song. Automation is a way to change the value of an effect over time. One use of automation is to make a song fade in or fade out. To do so, we must adjust the GAIN effectParameter's volume in the VOLUME effectType over time. For example, if we define our effectStartValue at -60 db and our effectEndValue at 0 db, it will sound like our song is fading in over time. To adjust the starting point and length of the effect, specify the effectStartLocation and effectEndLocation.\nAdd another setEffect function to your song  Add another setEffect function call into your code, but ensure all 7 parameters are present in the call. Set the effectType to VOLUME. Use the \u0026ldquo;Every Effect Explained in Detail\u0026rdquo; reference guide to see which parameters VOLUME has. To adjust the loudness of an audio clip, use the GAIN effectParameter. If we want to make something sound like it is fading in, we must have the sound\u0026rsquo;s volume start at nothing and increase it until around 0 decibels. To do so, set effectStartValue at a very low value, and effectEndValue to be a higher value.  Hint: Volume is measured in decibels. In decibels, the more positive a number is, the louder it gets. Also, try not to exceed 0 decibels.\n Set values for effectStartLocation and effectEndLocation to specify when to start and stop the fade in effect.  Your code should now look something like this:\nfrom earsketch import * init() setTempo(120) fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9) # Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) # Section B def sectionB(startMeasure, endMeasure): fitMedia(Y37_ORGAN_1, 2, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(RD_UK_HOUSE__ARPLEAD_1, 6, startMeasure, endMeasure) sectionA(1, 9) sectionB(9, 17) sectionA(17, 25) setEffect(2, DELAY, DELAY_FEEDBACK, -6.0) setEffect(2, DELAY, DELAY_TIME, 1200.0) setEffect(0, VOLUME, GAIN, -60, 1, 0, 3) finish() "},{"uri":"https://nuevofoundation.github.io/workshops/debugging/e1-binary-tree/","title":"Exercise 1 - Binary Tree Implementation","tags":[],"description":"","content":"The binary tree is one of the simplest data structures in computer science and the ideas it uses are very useful. It stores sortable data and boasts an optimal runtime of O(log n) for searching, adding, and removing elements. However, this performance depends heavily on the order in which elements are added or removed, which limits its use to academic discussion.\nThe Theory A binary tree consists of many nodes that are linked together. Each node has a parent nodes, or its predecessor, and up to two children nodes. A node that has no children is called a leaf.\nIn a rooted binary tree, one node is specified as a root, meaning it has no parent. In the diagram below, node A is the parent of nodes B and C. Likewise, B is the parent of D and E. A is the root, and D, E, F and G are leaves.\nThe binary tree is a recursive data structure. Each node can contain 0-2 children, and 1 parent. We can limit ourselves to looking at a specific subtree of the original binary tree without worrying too much about the entire tree as a whole, and that subtree is a valid binary tree on its own.\nUsing the Binary Tree We can use a binary tree to store information about a list\u0026rsquo;s ordering. Each node can store one value, and its children must be ordered as follows:\n The left child must have smaller value than its parent. The right child must have a larger value than its parent. Duplicate values can be stored on the left or the right; however, it is important to ensure that duplicates are stored in a consistent fashion. So if dupes are stored on the left, they are only stored on the left, and likewise for the right.  The following diagram shows an example binary tree. Notice that the left children are all smaller than its parent, while the right children are larger. Besides this tree ordering property, can see that there is no strict requirement on the shape of the tree.\nAdding to a Binary Tree To add an element, we need to find where it fits in the tree. To do this, we will perform a tree traversal. The idea is to move from node to node until we find a \u0026ldquo;spot\u0026rdquo; for the element we want to add. First, we start at the root. We then compare the value at the root with the element to add. If the element is larger, move to the right child. Otherwise, move to the left.\nWe can repeat this process again, until we find a node that can be the new element\u0026rsquo;s parent. The diagram below illustrates adding 7 to a binary tree.\n In step 1 (blue), we compare 10 and 7. Since 7 \u0026lt; 10, we proceed down the left child. In step 2 (green), we compare 5 and 7. 7 \u0026gt; 5, so we proceed down its right child, only to find that 5 has no right child! Thus, we can insert 7 into that spot.  Removing from a Binary Tree To remove an element, it’s a bit more tricky. We first need to find the element that we are removing. However, once we remove it we’ll need to fill in the “hole” that we’ve made in the tree. We can’t just fill in the hole with any plain element; we need to maintain the binary tree ordering property. A convenient element to take is the deepest, leftmost element from the hole’s right subtree.\nThe diagram below shows how to remove elements in several cases. Dotted lines indicate that the connection may or maynot exist. So in case 2 for instance, the blue parent might not exist if the node to remove is the root of the tree.\n In the first case, the node has no children - we can safely remove it with no issues. In the second case, the node has 1 child on the left or the right. We can slide the child up to this node\u0026rsquo;s former spot. This works for both the left and right side. The the third case, the node has 2 children. There are a few ways to go about this, but the way we\u0026rsquo;ll use is to take the smallest element of the right subtree and insert it into the \u0026ldquo;hole\u0026rdquo; that we\u0026rsquo;ll make. If that element has a right child (the green node), we need to slide that node up, so its former parent (orange) becomes that child\u0026rsquo;s parent.  The third case is tricky to get correct because of the number of edge cases that exist. For instance, the smallest value of the right subtree could be the right child itself. Or, the min child could contain no right child.\nThe Implementation At the Nuevo team, we\u0026rsquo;ve created an implementation for the binary tree. However, the programmer was sloppy and didn\u0026rsquo;t check their work, so there are errors and bugs! For this exercise, you will fix those bugs and errors. Your goal is to have all tests pass.\n To debug the code, you can use the command make debug. This will regenerate the debug files needed in the debug/ directory and run gdb for you. To use valgrind, you can run the command make valgrind. This will recompile your code and run valgrind with the appropriate arguments. To test the code, you can click on the green \u0026ldquo;run\u0026rdquo; button, or use the command make test.  Let\u0026rsquo;s take a look at what the existing code is doing. First, the binary tree data structure is defined in the binary_tree.h file. It can be referenced as a type called BinaryTree. The data is stored within a type called a BTNode, which represents a binary tree node.\nThe tree itself contains a sentinel node, which makes other tree operations easier to handle. To get the actual root of the tree, we need to reference the left child of the sentinel. Thus, the root\u0026rsquo;s parent is the sentinel node, rather than NULL.\nUsing a sentinel lets us not worry about operations that involve updating the parent. For instance, if we remove a node, we would need to update both the parent pointer\u0026rsquo;s child node and the child node\u0026rsquo;s parent pointer. With a sentinel, we wouldn\u0026rsquo;t worry about the parent pointer being NULL. This leads to a point of confusion - the name of the sentinel is __root in BinaryTree! Seems like the programmer wasn\u0026rsquo;t paying attention when they wrote it\u0026hellip;\n\rEach node is allocated on the heap using malloc, so you\u0026rsquo;ll need to make sure that there are no memory leaks!\nTree operations are defined in binary_tree.h too. If you are unsure of what a tree operation does, make sure to read its description there. We\u0026rsquo;ll also include some reference pictures below.\nThere are multiple correct ways to implement treeRemove. Our tests will not discriminate between different (correct) ways of implementing the behavior. As long as the binary tree property is satisfied, it should work. The implementation we have uses a findMin operation, which essentially looks for the smallest element in the binary tree. In other words, the bottom leftmost node on the tree.\n\rOnce again, the implementation does not need to handle duplicates within the tree. Addition, it does not need to implement any of the tree print functions.\nGood luck!\n\r"},{"uri":"https://nuevofoundation.github.io/workshops/unity/triggers-and-tags/","title":"Triggers and Tags","tags":[],"description":"","content":"Triggers Now, let\u0026rsquo;s stop and think about how we want our projectile to work. A projectile is going to be fired, and then when it hits an enemy it will disappear. \u0026hellip;That\u0026rsquo;s not really physics, is it? Physics can\u0026rsquo;t make an object disappear into thin air, so this disappearing will have to be a custom behavior that we add to the projectile using a script. The disappearing behavior will happen when the projectile touches an enemy.\nWe do that by making this projectile a trigger. Go into the BoxCollider2D component within the projectile inspector you added, and check the \u0026ldquo;IsTrigger\u0026rdquo; box. A trigger will let you know that it touched something, so in your script you can check to see if that interaction happened, then make that custom disappearing behavior occur.\nNote that because this projectile is a trigger, it\u0026rsquo;s not going to work by physics anymore. Unless you add a script to make it disappear, it\u0026rsquo;s going to pass through objects, including the invisible walls you added earlier.\nTurning a Collider into a Trigger turns off physics reactions, but that object can still let you know when a collision happens.\n Tags Before we get into creating the next script, we must talk about one more thing — tags. Tags are used to easily identify GameObjects within Unity. We will be using them when creating the next two scripts! First, we must set up tags within our game.\nRight at the top of the Nuvi inspector window, locate the \u0026ldquo;Tag\u0026rdquo; dropdown. At this moment, it should say \u0026ldquo;Untagged\u0026rdquo;. Pull down the drop down menu and select \u0026ldquo;Player\u0026rdquo;. Now, Nuvi has a \u0026ldquo;Player\u0026rdquo; tag that we can easily locate. Let\u0026rsquo;s repeat this for both the projectile and enemy. If you want to make a new tag, select \u0026ldquo;Add Tag…\u0026rdquo; in the dropdown menu and select the \u0026ldquo;+\u0026rdquo; sign. Then name your new tags as \u0026ldquo;Projectile\u0026rdquo; and \u0026ldquo;Enemy\u0026rdquo; and save.\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/conditionals/","title":"Conditionals","tags":[],"description":"","content":"We can use if statements to run a code statement only if certain conditions are met.\nFor example:\nif (isRainingOutside == true) { takeUmbrella = true; } else { takeUmbrella = false; } For our game, we should use if statements to determine if a player has 3 vertical, horizontal, or diagonal matches.\nInside the () beside if, you should specify a Boolean expression. Booleans are true or false statements. We can utilize this in our if statement. If the expression is true, the code inside { } is executed. If the expression is false, the code inside { } after the else statement is executed.\nYou can also connect Boolean expressions together using the \u0026amp;\u0026amp; (AND) and the || (OR) operator.\nTake a look at the CheckWinner() function in MainActivity.kt and think about what all the connected \u0026amp;\u0026amp; statements are doing.\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/variables/","title":"Variables","tags":[],"description":"","content":"Variables are simply names that we can give to values such as strings, numbers, and booleans. We use variables to store information so the computer can keep track of it. Variables are created by using the type of the variable and the name of the variable. Then you can assign that variable to the information that you want to store by using = and the content.\nLook at the variables at the top of of MainActivity.kt.\nvar Player1 = ArrayList\u0026lt;Int\u0026gt;() var Player2 = ArrayList\u0026lt;Int\u0026gt;() var ActivePlayer = 1 var setPlayer = 1 var colorBlue = Color.rgb(0, 161, 241) // PUZZLE 3  var colorGreen = Color.BLACK  Player1 holds the values of Player 1\u0026rsquo;s moves in the game. Player2 holds the values of Player 2\u0026rsquo;s moves in the game. ActivePlayer keeps track of whose turn it is. setPlayer holds the value for whether the game is Player vs Player or Player vs Computer. colorBlue and colorGreen hold the values for the player colors.  "},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-7/","title":"Activity 7 - What&#39;s wrong with the file?","tags":[],"description":"Use Linux commands to read the file without opening it","content":" Malware can be dangerous! Don\u0026rsquo;t open it right away! Instead let\u0026rsquo;s use the command line to take a peek.\nFor files that we aren\u0026rsquo;t sure about, we need to peek at them so we don\u0026rsquo;t accidentally open a virus.\n How can we look at the first lines of the file? Sometimes you just need to look at the beginning of a file. The command head shows the first line of a file.\nThe format is: head [filename]\nIf you add the -n flag you can put how many lines you want to look at.\nThe format is: head -n [# of lines] [filename]\n Try to look at the first 5 lines of malware.sh!\nHow can we look at the last lines of the file? Sometimes you just need to look at the end of the file. The command tail shows the last line of a file.\nThe format is: tail [filename]\nIf you add the -n flag you can put how many lines you want to look at.\nThe format is: tail -n [# of lines] [filename]\n Try to look at the last 5 lines of malware.sh!\nHow can we look at the whole file? Sometimes looking at the first and last lines of the file allow us to realize we need to view the whole file to understand what it is doing and what we should do about it. Let\u0026rsquo;s look at the entire contents of malware.sh!\ncat shows the contents of a file.\nThe format is: cat [filename]\nless and more are commands similar to cat.\nThe more command more is a command meant for larger files. It shows as many lines as possible and then you press enter to see the next section of the file until you reach the end of the file.\nThe format is: more [filename]\nThe less command less is a command helpful for going back and forth through sections of a file. It works similarly to more, but you use the up and down arrow keys to move from one section of the file to the next. The way to exit is by pressing \u0026lsquo;q\u0026rsquo;.\nThe format is: less [filename]\n What do you think malware.sh does? Add it to your report!\n"},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-3/","title":"Activity 3 - Add Keyboard Input to Move the Player","tags":[],"description":"","content":"Now, let\u0026rsquo;s allow our ship to move when the player uses the keyboard. The first step is to create a cursor attribute in the create() method in Scene2.js:\nThe most efficient way to create movement is to create a helper function that uses the cursor attribute to check whether the keyboard has been pressed. We have already made this function for you, and it is called movePlayer():\nWe then move the player with this function. We can call this function in the update() method so that we check for movement during every update cycle (this has also already been done for you).\nNow, go to the movePlayer() method, and write code that will check for movement and move the player accordingly.\n We would recommend a movement speed of 200 Use an if statement After you\u0026rsquo;ve made the if statements, you may find that your player is continuing to move even after you\u0026rsquo;ve stopped pressing on the keyboard. To fix this, think: when the player is not pressing the keyboard, what should the ship be doing? \n Now test it out! You may notice one thing however; the player is able to move outside of the screen like this:\nThis happens because Phaser uses on an unlimited canvas that exists even outside of the screen’s window. We can fix this by restricting the player to the screen with one line of code:\nthis.player.body.setCollideWorldBounds(true); // player cannot go out of screen Find the create() method of Scene 2:\nNow, that your player is bound within the screen, you should be able to move your ship like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/add-jump-sound/","title":"Add sound while the bird is jumping","tags":[],"description":"","content":"Let\u0026rsquo;s add sounds to the bird while it is jumping\nAdd the below command in the file [File: create-game.js] jumpSound.play();\nWorking Together In the repl.it window below, we started the code with the line jumpSound.play();.\nIn your console you should see a Jsappy bird jumping with sound after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/progress_update_2/","title":"Progress Update 2","tags":[],"description":"","content":"Great job! You are now able to successfully identify which category an image most likely falls under.\nTo verify that your code is correct up to this checkpoint, please compare your code against the example code provided below.\nThe outputs of the code may vary. You only need to copy the code blocks, and not the output blocks, as they will be generated automatically in your notebook.\n These lighter shaded blocks contain python code These darker shaded blocks contain the output \n If you would like to test the following code, visit this link\nTo edit this code, click on the \u0026lsquo;Copy to Drive\u0026rsquo; button to make a personal copy of this notebook. Make sure you are logged in to your Google account.\nIf you are using a Nuevo Google account temporarily Once you make a copy, please make sure to replace the \u0026ldquo;Copy of\u0026rdquo; with your name, along with the file name. This will be on the top left corner of your notebook.\n  plt.figure(figsize=(10,10)) #sets the image size to 10x10 pixels for i in range(25): #displays first 25 images with their class name plt.subplot(5,5,i+1) plt.xticks([]) plt.yticks([]) plt.grid(False) plt.imshow(train_images[i], cmap=plt.cm.binary) plt.xlabel(class_names[train_labels[i]]) plt.show() #shows images with their labels #Building the Neural Network model = keras.Sequential([ keras.layers.Flatten(input_shape=(28, 28)), keras.layers.Dense(128, activation=\u0026#39;relu\u0026#39;), keras.layers.Dense(10) ]) model.compile(optimizer=\u0026#39;adam\u0026#39;, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=[\u0026#39;accuracy\u0026#39;]) model.fit(train_images, train_labels, epochs=10) Epoch 1/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.4990 - accuracy: 0.8247 Epoch 2/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3754 - accuracy: 0.8658 Epoch 3/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3374 - accuracy: 0.8771 Epoch 4/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3110 - accuracy: 0.8859 Epoch 5/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2935 - accuracy: 0.8903 Epoch 6/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2823 - accuracy: 0.8942 Epoch 7/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2682 - accuracy: 0.9002 Epoch 8/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2575 - accuracy: 0.9041 Epoch 9/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2479 - accuracy: 0.9074 Epoch 10/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2417 - accuracy: 0.9088 \u0026lt;tensorflow.python.keras.callbacks.History at 0x7f2b4a7cb7b8\u0026gt; test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2) print(\u0026#39;\\nTest accuracy:\u0026#39;, test_acc) 313/313 - 0s - loss: 0.3358 - accuracy: 0.8825 Test accuracy: 0.8824999928474426 probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()]) predictions = probability_model.predict(test_images) predictions[7] #Returns the index with highest probability, depends on the index value. array([3.5166186e-06, 5.8611111e-12, 7.3947496e-04, 3.9665038e-06, 2.8206115e-03, 9.7542063e-08, 9.9643230e-01, 8.2940481e-11, 1.2411938e-07, 2.7266096e-09], dtype=float32) np.argmax(predictions[7]) # This returns the index value with the highest predictions 6 test_labels[7] # This is the index value returned by the test dataset # (That we are comparing against) 6 class_names[6] # This is the category name of the image that has the highest probability 'Shirt' Now that we are able to classify the category of an individual piece of clothing using your model, we will now visualize these predictions by creating a bar plot for a specified image.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-10/","title":"Activity 10: Making a meme!","tags":[],"description":"","content":"One other thing we can do to enhance our image is to add text. We can do that by utilizing the Pillow ImageDraw module. Let’s import that at the top of our file along with our other import statements.\nfrom PIL import Image from PIL import ImageFilter from PIL import ImageDraw To allow us to add text, we must redraw the same image we used earlier. Let’s do that using the draw() function, which takes in an image object. Once the image is drawn, we can then add text to it by using the text() method to set the text of the image. The text is drawn based on coordinates provided. The function takes in two mandatory parameters: the xy coordinates and the text needed.\nFor example:\ndrawnImage = ImageDraw.Draw(img) drawnImage.text((200,20), \u0026#34;When you realize you learned python in an hour.\u0026#34;) drawnImage.save(\u0026#34;myCatWithText.jpg\u0026#34;) My image now looks like this: Challenge - Change the font You can see that the text in the image created above is in a small, default font. There are other parameters within the text() method you can use. Take a look at the documentation and see if you can change the font and the font size, as well as the color of the text!\nThis will require downloading a .ttf (aka a font file) from online! Ask for help if you have any questions.\n "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-5/","title":"Activity 5 - The final excercise","tags":[],"description":"","content":"Using what you\u0026rsquo;ve learned, let\u0026rsquo;s try to create a site that describes you! Try and use some or all of the following:\n A heading \u0026amp; paragraph tag Different fonts Different colors Add an image to your site A list Embed a gif or video  Show your style!\n"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/wrapup/","title":"Wrap up","tags":[],"description":"","content":"Congratulations! You made it! We are excited to see you make it here! Hope you had fun working on your game and learning concepts that will help you make even better games\nNow, it\u0026rsquo;s your turn! Use the knowledge you gained from this tutorial to make various interesting changes to the game.\n Add sets to the game, where a player wins a set when they reach 21 points. The player who wins the best of 3 sets will be declared the winner. Try adding difficulty levels for the player to choose. At each difficulty level, the default speed of ball is increased. Can you guess which attribute of the Ball object you should change? Assign player names to each side and let the user enter their preferred name before starting the game.  "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-7/","title":"Activity 7 - Drawing a figure 8","tags":[],"description":"","content":"Great! Now let’s make a figure 8 as the first step to making a mandala flower! A figure 8 is just two circles that are opposite to each other. To do this we can make use of the turtle.circle(x) method, which takes an integer x as the radius of the circle. (You may recall that 2 * radius is how wide the circle is.) Having the radius as an argument means we can decide how big or small the circle should be.\n import turtle turtle.circle(50) In the above example, the circle is 100 pixels wide and the circle is drawn in a counterclockwise direction. If the argument to turtle.circle() is negative, then the circle is drawn in a clockwise direction and it is opposite to the original version.\nUsing this information, create a new function called figure_8() which draws a figure 8.\n "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/variables/","title":"Variables","tags":[],"description":"","content":"Variables Variables are simply names that we can give to values such as strings, numbers and booleans. We use variables to store information that the computer can keep track of.\nHere\u0026rsquo;s how to declare a variable named str. We say str has the value \u0026quot;Hello World\u0026quot;. Can you describe what the other variables below mean?\nvar str = \u0026#34;Hello World\u0026#34;; var x = 88; var happy = true; Press run. Note that variables are not printed out to the console. Instead, the variable simply stores the string or number or boolean into the computer\u0026rsquo;s memory.\nWe can use these variables in other statements. For example, the following code would print Hello Nuevo Foundation to the console:\nvar str1 = \u0026#34;Hello\u0026#34;; var str2 = \u0026#34;Nuevo Foundation\u0026#34;; Console.WriteLine(str1 + \u0026#34; \u0026#34; + str2); You can change the value of a variable at any time by using the = operator again. If you\u0026rsquo;re changing a value of a variable, you don\u0026rsquo;t need to use var again. In the following example, Hola will be printed instead of Hello.\nvar str = \u0026#34;Hello\u0026#34;; str = \u0026#34;Hola\u0026#34;; Console.WriteLine(str); Here\u0026rsquo;s another example: 10 will be printed instead of 9.\nvar num = 9; num = num + 1; Console.WriteLine(num); Note that you CANNOT replace a string variable with a number or a boolean, and similarly for other combinations. The following example code will NOT work:\nvar happy = \u0026#34;Hello\u0026#34;; happy = 9; Another way to declare variables is to replace var with the type (string, int, bool) of variable you are creating. By declaring the type explicitly, you avoid the problem that we see above. For example:\nstring str = \u0026#34;Hello World\u0026#34;; int x = 88; bool happy = true; Note that var, string, int, or bool are special keywords in C#, so you cannot create variables with those names.\nWorking Together Let\u0026rsquo;s create two new variables:\n A variable named comp that stores the string \u0026quot;Computer\u0026quot;. A variable named five that stores the number 5.  Next, let\u0026rsquo;s use the variables to print out (Console.WriteLine) the following to the console. Let\u0026rsquo;s try to do this while using the variables!\nHint: we will use the + operator to combine strings together, and to also add numbers together.\nComputer 5 ComputerComputer 10 ComputerComputerComputer 15   "},{"uri":"https://nuevofoundation.github.io/workshops/unity/projectile-enemy-behavior/","title":"Projectile/Enemy Behavior","tags":[],"description":"","content":"Projectile behavior Now that we know how triggers and tags work, let\u0026rsquo;s set up the projectile behavior! Create a new script within the Scripts folder called \u0026ldquo;ProjectileBehavior\u0026rdquo;. Then drag and drop it in the projectile inspector from the projectile in the Prefabs folder, and open the script up. Remove the Start() and Update() function and replace it with this:\nvoid OnTriggerEnter2D(Collider2D collision) { if(collision.gameObject.tag != \u0026#34;\u0026#34;) //destroy projectile if it collides with anything but the player  { // make the projectile disappear  } } In this function, we want to destroy the projectile if it collides with anything but the player. Inside the quotation mark, what do you think we should add? Within the body of the function, what should we put to make the projectile disappear?\nWe can call upon Nuvi\u0026rsquo;s tag in the if-statement!\n  Destroy(???) will destroy the gameObject specified by ??? gameObject is a variable that refers to the object that this script is attached to \n  Click here to see the answer!  void OnTriggerEnter2D(Collider2D collision) { if(collision.gameObject.tag != \u0026#34;Player\u0026#34;) //destroy projectile if it collides with anything but the player  { // make the projectile disappear  Destroy(gameObject); } } \n   Enemy behavior Now let\u0026rsquo;s test by running the game! If we did it correctly, the projectile should disappear upon contact when it touches anything but Nuvi! However, when we fire at the enemy, notice how the projectile disappears, but the enemy does not. To fix this issue, we must create a similar script that revolves around the enemy\u0026rsquo;s behavior. To do this, create a new script in the Scripts folder called \u0026ldquo;EnemyBehavior\u0026rdquo; and attach it to the Alien_pink\u0026rsquo;s inspector. Similar to how we made the \u0026ldquo;ProjectileBehavior\u0026rdquo; script, remove the Start() and Update() function and add this:\nvoid OnTriggerEnter2D(Collider2D collision) { if(collision.gameObject.tag == \u0026#34;\u0026#34;) //destroy enemy if it collides with a projectile  { // make the enemy disappear  } } In this function, we want to destroy the enemy if it collides with a projectile. What do you think we should add? What should we put in the body of the function to make the projectile disappear?\nWe can call upon the projectile\u0026rsquo;s tag in the if-statement!\n It\u0026rsquo;s the same as the \u0026ldquo;ProjectileBehavior\u0026rdquo; script!\n  Click here to see the answer!  void OnTriggerEnter2D(Collider2D collision) { if(collision.gameObject.tag == \u0026#34;Projectile\u0026#34;) //destroy enemy if it collides with a projectile  { Destroy(gameObject); } } \n   Now that we have added these two scripts, let\u0026rsquo;s try running our game! Check to see the following:\n projectiles disappear when they hit the alien projectiles disappear when they hit the invisible walls the alien disappears when it is hit by a projectile  While we are at it, let\u0026rsquo;s make the alien_pink into a prefab as well! However, instead of deleting the alien after we make it into a prefab, let\u0026rsquo;s add two more aliens into the scene. Simply drag and drop the alien into the hierarchy and reposition them however you like using the Move tool!\n Let\u0026rsquo;s take a step back and look at what you accomplished. You were able to make Nuvi move in 8 directions, provide Nuvi with the ability to fire projectiles, and the enemies along with the projectiles are able to disappear when they collide! Pat yourself on the back; you\u0026rsquo;ve accomplished a lot! Let\u0026rsquo;s keep going! We are almost done!\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/puzzle3/","title":"Puzzle 3","tags":[],"description":"","content":"Puzzle 3a This puzzle will test your knowledge about variables. There is something strange with one of the player\u0026rsquo;s color on the board.\nFind // PUZZLE 3a in the MainActivity.kt file and update the colorGreen variable to show green colored pieces on the board.\nPuzzle 3b Why does Player 2 always win on the first move?! This doesn\u0026rsquo;t make any sense, solve puzzle 3b to fix the game.\nFind // PUZZLE 3b in the MainActivity.kt file and update the winner variable to ensure a player truly wins.\n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-8/","title":"Activity 8 - What&#39;s different?","tags":[],"description":"Use Linux commands to compare files","content":" Let\u0026rsquo;s look at the secret message to make sure this weird malware.sh file hasn\u0026rsquo;t done anything to it!\nDifferences Do we know a command that can help us find the location of the secret-message.txt file?\nLet\u0026rsquo;s move into that directory and let\u0026rsquo;s check for the quote \u0026ldquo;Do. Or do not. There is no try.\u0026rdquo; from earlier. Do you remember what command can help us check?\nThis file usually has good and fun quotes, but there seems to be lots of changes. Should we compare it to a known good version?\nLet\u0026rsquo;s see if there might be any backups of the secret message within its directory. Go to the Document directory and try:\nls -la The -a flag gives all entries including hidden files.\n Did you find any new files? Take notes of the changes!\nCompare the secret-message.txt file to the backup file diff is a command used to compare two files to get what has been added, changed, and deleted to the file.\nThe format is: diff [filename] [Filename of Comparison File]\nFun Fact: Running diff --help will output information on how to use the diff tool, including what options can be used with the tool.\n Check the difference between the two files. How many differences did you find? Put it in the file you made!\nA better way to see the differences vimdiff is a command that opens a window with the files in separate tabs highlighting the differences.\nTry vimdiff to better visualize the differences between the files.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/plotting_model/","title":"Plotting the Model and its Predictions","tags":[],"description":"","content":"Now that we are able to classify the category of an individual piece of clothing using your model, we will now visualize these predictions by creating a bar plot for a specified image.\n Copy the following code into Colab: The plot_image function displays an image along with its predicted classification, the confidence level of the model for that category, and the actual classification (which is for reference).\nThe plot_value_array function plots the confidence values generated by the model as a bar graph.\n def plot_image(i, predictions_array, true_label, img): true_label, img = true_label[i], img[i] plt.grid(False) plt.xticks([]) plt.yticks([]) plt.imshow(img, cmap=plt.cm.binary) predicted_label = np.argmax(predictions_array) if predicted_label == true_label: color = \u0026#39;blue\u0026#39; else: color = \u0026#39;red\u0026#39; plt.xlabel(\u0026#34;{} {:2.0f}%({})\u0026#34;.format(class_names[predicted_label], 100*np.max(predictions_array), class_names[true_label]), color=color) def plot_value_array(i, predictions_array, true_label): true_label = true_label[i] plt.grid(False) plt.xticks(range(10)) plt.yticks([]) thisplot = plt.bar(range(10), predictions_array, color=\u0026#34;#777777\u0026#34;) plt.ylim([0, 1]) predicted_label = np.argmax(predictions_array) thisplot[predicted_label].set_color(\u0026#39;red\u0026#39;) thisplot[true_label].set_color(\u0026#39;blue\u0026#39;) We can see that this image detects the right class name for the image\ni = 0 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() Not all models are perfect, and this can be seen with this image classification model.\ni = 12 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() Plot the first 25 test images, their predicted labels, and the true labels. Color correct predictions in blue and incorrect predictions in red.\nnum_rows = 5 num_cols = 5 num_images = num_rows*num_cols plt.figure(figsize=(2*2*num_cols, 2*num_rows)) for i in range(num_images): plt.subplot(num_rows, 2*num_cols, 2*i+1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(num_rows, 2*num_cols, 2*i+2) plot_value_array(i, predictions[i], test_labels) plt.tight_layout() plt.show() "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/activities/activity-11/","title":"Activity 11: Challenge: Make your own image","tags":[],"description":"","content":" In this section, we will take what you have learned so far to create and change your own picture! In this section, you are free to make any combination of basic colorboards, drawing elements, filters, cropping, flipping, changing colors or text.\nChallenge - Make your own image In the following repl.it, we provide you some images you can play around with. You are also welcome to add your own images.\nIn order to see your image, please click on top left corner (which says \u0026lsquo;Files\u0026rsquo;), and then click on the image file to see the result.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-4/","title":"Activity 4 - Adding Enemies","tags":[],"description":"","content":"Now, let’s make some enemies for our player to fight! Let’s first load a sprite sheet for our enemies in Scene 1 just like we did for the player. Use the same syntax you used to load in the player, but use a different name, 'assets/enemies.png as the source of the sprite sheet, and a frameWidth and frameHeight of 16:\nIn addition, create another animation in Scene 1 in the same way you created the player\u0026rsquo;s animation (you can use the same arguments for frameRate and repeat, but remember to use enemies for frames:\nThis game will use many enemies that look identical and behave very similarly. To make this coding easier, we will use a concept in Phaser called a group to control all of our enemies at once A group is exactly what it sounds - a group of things. We can reference this group when we want a change to be made to every member of it.\nWe declare our enemy group like this:\nthis.enemies = this.physics.add.group(); This will create a group called enemies.\nNow, let’s place our enemies onto the screen. To make this easier, we will use another helper method called createEnemies() (which again, has already been made for you with nothing inside of it):\nNow, call this method in the create() method instead of the update() method like we did for the player movement because we only want to spawn the enemy once at the beginning of the game:\nThe syntax for creating an enemy variable \u0026ldquo;enemy\u0026rdquo; at coordinate (X, Y), with the enemies sprite sheet, and within the enemies group that you declared earlier looks like this:\nvar enemies = this.enemies.create(X, Y, \u0026#39;enemies\u0026#39;); Activity 1: Placing an Enemy Try it out by choosing an (X, Y) coordinate and placing this line of code in the createEnemies() method. You will also need to play the animation right after you create the enemy (so it will be in the createEnemies() method). It should look something like this (with potentially a different location - this enemy was placed on (300, 100))\nActivity 2: Placing more Enemies Now let\u0026rsquo;s add some more enemies. Add a couple new enemies in the same method, but be careful because every enemy variable you make within the same scope must have a different variable name. Activity 3: Placing a Block of Enemies Now that you\u0026rsquo;ve gotten the hang of it, let\u0026rsquo;s try something a bit challenging and create the enemies in this block pattern shown below. However, there is one catch: do so WITHOUT declaring each enemy with an individual line.\nHINT: use a nested for-loop "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/bonus-activites/","title":"Bonus activities","tags":[],"description":"","content":" What happens if we make gravity stronger? What happens if we make gravity have a negative value? What other wacky ways can the bird jump? How can we make him rotate quicker? What happens if we remove the 'if' around the rotation? \n "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/hosting/","title":"Hosting your website","tags":[],"description":"","content":"Host your site on the internet! Now that you\u0026rsquo;ve created your own personal website, let\u0026rsquo;s host it on the internet so everyone can access it! You will need a GitHub account to do so. If you don\u0026rsquo;t have one, create one here .\nOnce you have created your account and verified your email address, you will land on this page.\nNow, you will need to create a new repository to store the contents of your site! Think of a repository as a giant folder that can store lots of other files and folders for a given project. You can create one by selecting Start a Project or Create a new repository. Two very important things to keep in mind:\n Name your repo without any spaces. But you can use dashes or capitalization to replicate spaces! Check the box Initialize this repository with a README  Congratulations! You have created your first repo! Upload all your files and folders that belong to your site here. Now, when you go to your profile page, your new Repository will now show up under Repositories.\nAfter you\u0026rsquo;ve uploaded everything you created for your site, navigate back to the repo and select Settings.\nScroll all the way down to the GitHub Pages section.\nChange the Source from \u0026lsquo;None\u0026rsquo; to \u0026lsquo;main branch\u0026rsquo;. Save these changes and click the link at the top of the GitHub Pages section (in the example below, it would be https://exampleaccount1234.github.io/myFirstSite/). Now anyone can access your site with this link!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-8/","title":"Activity 8 - Creating a mandala flower","tags":[],"description":"","content":"We’re done creating our first figure 8! We can now use the figure_8() function to create a mandala flower! A mandala flower is many figure 8s placed on top of each other at different angles. So, to do this we need to use a\u0026hellip; you guessed it, a loop!\nCreate a new function called mandala_flower(). In the loop we will call the figure_8() function we wrote earlier to create a figure 8. Then, rotate the turtle either left or right a certain number of degrees (for example, 10 degrees). Repeat these steps many times to make a mandala flower; it’s a good idea to create a loop that repeats at least 35 times.\n "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-3/","title":"Activity 3 - Declare your variables","tags":[],"description":"","content":"Activity 3 This activity is split into 2 parts and will test your knowledge about variables. Before starting, look out for HINT (ACTIVITY 3) in the code, where we declare a variable called lives which stores the number of lives the player has, and use the variable to print out how many lives the player has at the start of the game. This should give you an idea for how to complete the following two parts.\nActivity 3.1 At the start of the game, we should tell the player how many letters the word to guess has. For example, if the word to guess is \u0026quot;Hello\u0026quot;, we should tell the player: The word has 5 letters. If the word to guess is \u0026quot;Foundation\u0026quot;, we should tell the player: The word has 10 letters. We have already stored the number of letters in the numberOfLetters variable, so use it to complete this activity.\nTo check if you have completed this activity correctly, press run, and make sure you see The word has 5 letters (or some number other than 5) in the console.\nActivity 3.2 There are two more pieces of information that we need the computer to store:\n The number of letters that the player has guess correctly so far. Whether or not the player won the game.  We will declare two variables to represent these pieces of information. Press run to make sure no errors appear in the console. Remember that variables do not produce console output, so for this part, we are only checking for the absence of errors.\n"},{"uri":"https://nuevofoundation.github.io/workshops/unity/ui-part-1/","title":"Making the UI: Part 1","tags":[],"description":"","content":"Menu Screen We\u0026rsquo;re almost done! To complete this game, we need to do two more things: add a UI and an Outline script to piece everything together. Let\u0026rsquo;s start with the UI.\nRight click in the hierarchy window and, instead of selecting \u0026ldquo;Create Empty\u0026rdquo;, we want to create a canvas. Look for \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Canvas\u0026rdquo;. This is where all of our UI elements will be under.\nUnder \u0026ldquo;Canvas\u0026rdquo;, we want to create \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Image\u0026rdquo;. Rename \u0026ldquo;Image\u0026rdquo; to \u0026ldquo;Menu\u0026rdquo;. This will be our menu screen. In the Menu inspector, resize the width and height to 400 and 300 respectively. We then want to anchor the Menu screen to the middle. This way, even if the size of the window changes, the menu screen will stay in the middle. To do this, click on the squares in the top left corner under Rect Transform in the Menu inspector.\nHold both shift and alt (on Mac\u0026rsquo;s, hold option instead of alt) and select the middle/center in the Anchor presets. This will set the Menu\u0026rsquo;s pivot to 0 while setting the position to the middle/center.\nNow under Menu, create a \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Text\u0026rdquo; and rename it to \u0026ldquo;Title\u0026rdquo;. Change the text to whatever you would like to name your game under Text in the \u0026ldquo;Title\u0026rdquo; inspector! Let your creativity flow! We can also change the font size to whatever you like.\nIf the text disappears, use the rect tool to increase the size of the text box in the Scene window!\n Change the anchor preset to the top/center. Tinker with the Pos Y input until you like the placement of your text!\nMake another \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Text\u0026rdquo; under Menu in the hierarchy and rename that to \u0026ldquo;NumEnemyT\u0026rdquo;. Change the text to \u0026ldquo;# of Enemies\u0026rdquo; and change the font to a few sizes smaller than the Title. Make sure to set the anchor position to top/center as well and tinker with the Pos Y input!\nNow, let\u0026rsquo;s create a way for the player to choose how many enemies they want! There are many ways to do this, but in this tutorial, we will be using a slider. To create a slider, right click under Menu and select \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Slider\u0026rdquo; and rename it to \u0026ldquo;EnemySlider\u0026rdquo;. Set the anchor position to the top/center as well and tinker with the Pos Y input so that it is right under the \u0026ldquo;# of Enemies\u0026rdquo; text. In the slider inspector under Slider, change the \u0026ldquo;Min Value\u0026rdquo; to \u0026ldquo;1\u0026rdquo; and \u0026ldquo;Max Value\u0026rdquo; to \u0026ldquo;3\u0026rdquo;. Also check the \u0026ldquo;Whole Number\u0026rdquo; box as we cannot have 1.5 enemies on the field!\nNow that we have a slider, we need a visual key for the players to know how many enemies they can make! Make 2 more text boxes under Menu and name them \u0026ldquo;1T\u0026rdquo; and \u0026ldquo;3T\u0026rdquo; respectively. Change the \u0026ldquo;1T\u0026rdquo; text to \u0026ldquo;1\u0026rdquo; and set the anchor position to the middle/left. Tinker with the Pos X and Pos Y inputs under Rect Transform so that it lines up with the left side of the slider. Repeat the process with \u0026ldquo;3T\u0026rdquo; but change the text to \u0026ldquo;3\u0026rdquo;, anchor it to the middle/right, and line it up with the right side of the slider.\nNow, let\u0026rsquo;s create a start button. Under Menu in the hierarchy window, create \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Button\u0026rdquo; and rename it to \u0026ldquo;StartButton\u0026rdquo;. Set the anchor position to the bottom/center and tinker with the Pos Y inputs to place it wherever you like! If we look in the hierarchy, there is an arrow attached to the StartButton. Click on it to reveal a Text object. Change the text for that Text object to \u0026ldquo;Start\u0026rdquo;.\nWe now have the menu screen all set up! Your menu screen should look a little something like this!\nBut wait! We\u0026rsquo;re not done yet! If we were to run the game and press the Start button, nothing happens! We want the menu screen to disappear. To do this, let\u0026rsquo;s make another script in our Scripts folder in the Projects window under Assets and name it \u0026ldquo;StartButton\u0026rdquo;. Open it up and copy and paste the code below!\nusing System.Collections; using System.Collections.Generic; using UnityEngine; public class StartButton : MonoBehaviour { public GameObject pop_up_box; public void popDown() { pop_up_box.SetActive(false); } } This code makes whatever GameObject that is assigned to pop_up_box disappear when the function popDown() is called. Save, then drag and drop this script from the Scripts folder into the StartButton inspector. Then drag the Menu from the hierarchy into the empty \u0026ldquo;Pop_up_box\u0026rdquo; under the \u0026ldquo;Start Button (Script)\u0026quot;. Finally, under \u0026ldquo;Button\u0026rdquo; in the StartButton inspector, click on the \u0026ldquo;+\u0026rdquo; sign in the \u0026ldquo;On Click()\u0026rdquo; box. Drag the \u0026ldquo;StartButton\u0026rdquo; from the hierarchy to the box that says \u0026ldquo;None (Object)\u0026quot;. Then, pull down the \u0026ldquo;No Function\u0026rdquo; bar and hover over \u0026ldquo;StartButton\u0026rdquo;. Locate the popDown() function and select it.\nNow, if we were to run the game and press the Start button, the menu screen disappears!\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/finalpuzzle/","title":"Final Puzzle","tags":[],"description":"","content":"Now that Player 2 is no longer automatically winning the game and all the game pieces look good, there is still one last thing that is weird. Tic-Tac-Toe rules state that a player can win when the player has 3 pieces connected horizontally, vertically, or diagonally. The game works well for detection the horizontal and vertical wins, but something is wrong with the diagonal check.\nLook for // FINAL PUZZLE in the MainActivity.kt file. Solve this puzzle to complete the game!\n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-9/","title":"Activity 9 - Remove the Bad File","tags":[],"description":"Use Linux commands to remove the bad file and directory","content":" So malware.sh is definitely a bad file left by the hackers. We need to remove it and the directory holding it!\nRemove the bad file! rm is a command that removes files.\nThe format is: rm [filename].\nrm permanently removes the file.\n Remove the file we have decided is causing our problems. How can we check that the file was fully removed?\n What if we need to remove a directory? rmdir is a command that can remove an empty directory.\nThe format is: rmdir [directoryName].\nrmdir permanently removes the directory.\n How can you remove the directory that the bad file was in?\nRemoving files can be a dangerous operation, especially on Linux. Make sure that you are 100% certain the file you want to delete is safe to remove. By removing the wrong file, you could accidentally ruin your computer.\n Do you remember the command to remake the directory that we deleted?\nNow let\u0026rsquo;s go check if we know a command to restore the secret-message.txt file\u0026hellip;\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/activity-7/","title":"Activity 7 - Plotting an Image&#39;s predicted Category","tags":[],"description":"","content":" Copy and Paste the following code into Google Colab: # Grab an image from the test dataset. This shows the resolution of the image.  #NOTE: This index will be changed and its corresponding plot would be displayed in the next few steps img = test_images[0] print(img.shape) # Add the image to a batch where it\u0026#39;s the only member. img = (np.expand_dims(img,0)) print(img.shape) predictions_single = probability_model.predict(img) print(predictions_single) plot_value_array(0, predictions_single[0], test_labels) #plot the graph containing all the class names _ = plt.xticks(range(10), class_names, rotation=45) To verify the index value with the highest probability, we use\nnp.argmax(predictions_single[0]) #Verifying the index value with highest probability \n Question 1 In the first code segment of this activity, change the index value for the test_images array to any number of your choice.\n Question 2 In the plot_value_array, change the first parameter to the same index number used previously. What class name has the highest probability?\n Question 3 Verify your answer by running the code below to display the specified image and the plot of the category that the model predicted.\nIs this consistent with the answer from your previous question?\ni = your_desired_value #We can see that this image detects the right class name for the image plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() \n "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-5/","title":"Activity 5 - Making the Enemies Move","tags":[],"description":"","content":"At the moment, the enemies are a bit boring because they’re just sitting still. Let’s make them move a little bit! Our goal will be to make them move from left to right like this: Let’s start by making the enemies move to the left once they’re created. We can do this by simply adding one line of code:\nenemy.body.velocity.x = -90; Place in our createEnemies() method:\nBut if you test out the code now, we can see that the enemies just keep going to the left infinitely because of Phaser’s infinite canvas. Let’s make them change direction before they go out of the screen. We can do this with a timer, a tool that lets us call a function after a certain period of time. The function that the timer calls will change the enemy\u0026rsquo;s direction. We can also make the timer run infinitely so that it continues to run the function after each time interval (which we are going to do here). Put the below timer at the end of the createEnemy() method.\nthis.enemyTimer = this.time.addEvent({ delay: 1500, callback: this.changeEnemyDirection, callbackScope: this, loop: true }); This is a timer that continuously calls the changeEnemyDirection() method after a certain time interval. However, we haven’t put any content in it yet. Let\u0026rsquo;s do that now: put code in the changeEnemyDirection() method that will change the direction of every enemy in the enemies group (this is one of the reasons we made a group!):\nNotice how, however, that (if you used the same timer values we did), that your ship is moving in and out of the screen. Instead of binding it to the screen like we did for the player\u0026rsquo;s ship, we will simply move the enemy\u0026rsquo;s starting position a bit to the right (because the timer has the correct amount of time to go back and forth the screen).\n "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/conclusion/","title":"In case you were wondering","tags":[],"description":"","content":"You might be concerned about Benji, but we are happy to tell you that he found his home through a website just like the one you are building. Benji is now a full time good boy working hard on his tricks to earn treats.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-9/","title":"Activity 9 - Coloring your mandala flower","tags":[],"description":"","content":"Now that we have the shape of a mandala flower, it’s time to color it! We’re still going to use the turtle.color() method; however this time we’re going to use an RGB value instead of a string color value, so that we can produce a larger variety of colors.\nRGB (Red-Green-Blue) colors In primary school, you might recall that by mixing colors together, you can produce new colors. For example, combining red and blue together make purple. We can also change the amount of red and blue mixed together to create different shades of purple. The computer does something similar to produce colors. By combining various intensities of red, green, and blue, we can create different colors, such as powder blue, golden yellow, and salmon pink. Click here to see the colors and their corresponding hexadecimal form.\nIn the turtle.color() method, we can specify three integer arguments corresponding to the amount of red, green, and blue to mix. Each integer must be between 0 and 255 inclusive. One example can be turtle.color(30, 100, 238), which produces a dark shade of blue.\n Update your mandala flower to use a color of your liking. Feel free to experiment with different colors!\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/help/","title":"Help, I am stuck!","tags":[],"description":"Setting up headphones","content":"No worries! See if any of the following helps you, if not, feel free to reach out to one of us, and we will help you.  Indentation is very important when you are working in Python. Be careful of spaces \u0026amp; tabs in your code, because indentation errors can sometimes be pretty difficult to spot. However on the positive side, strict formatting makes Python code very clean and organized. Are all your variables, functions indented properly as instructed? SyntaxError: invalid syntax IndentationError: unexpected indent NameError: global name '---' is not defined Cannot recognize error: spelling mistake? TypeError: Can\u0026rsquo;t convert \u0026lsquo;int\u0026rsquo; object to str implicitly  "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/reading-from-console/","title":"Reading from Console","tags":[],"description":"","content":"Reading from Console Now that we know the basics about variables, we can now accept input from the user. Use the following line to tell the console to wait until the user types something into the console. Then, the computer takes whatever is typed into the console, and stores it into the variable called input.\nvar input = Console.ReadLine(); Here\u0026rsquo;s an example of how to use Console.ReadLine to accept user input:\nConsole.WriteLine(\u0026#34;Type in something:\u0026#34;); var input = Console.ReadLine(); Console.WriteLine(\u0026#34;You typed in: \u0026#34; + input); When the user presses run, the user is greeted with the following program:\nIn this case, after the user types in Hello World! into the console, the program finishes outputting to the console:\nWorking Together Write a program that first prints the following two lines to console:\nWelcome! How can I help you today? Afterwards, the console waits for user input. After the user types in something and presses Enter, the computer prints out:\nYou asked: [input]? I don't know the answer to that! Goodbye! [input] should be replaced with whatever the user had typed into the console.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/unity/ui-part-2/","title":"Making the UI: Part 2","tags":[],"description":"","content":"End Screen Next, we want to make an end screen that will be displayed once Nuvi defeats all the aliens. Most of this process will be very similar to how you made the Menu Screen!\nUnder \u0026ldquo;Canvas\u0026rdquo;, create \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Image\u0026rdquo; like you did for the starting Menu, and this time rename it to \u0026ldquo;EndScreen\u0026rdquo;. Resize to the same size as Menu.\nCreate \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Text\u0026rdquo; under EndScreen, rename it \u0026ldquo;EndMessage\u0026rdquo;, and type in whatever you like — this message is going to be displayed when Nuvi defeats all the aliens and the game ends! In our example, we said: \u0026ldquo;You defeated all the Aliens and helped Nuvi save the Universe!\u0026rdquo;\nNow we want our player to be able to replay the game once they finish. Create \u0026ldquo;UI\u0026rdquo; → \u0026ldquo;Button\u0026rdquo; under EndScreen. Like you did for the StartButton, expand Button to find the Text object, and rename it to \u0026ldquo;ReplayButton\u0026rdquo;. Edit the text so it shows \u0026ldquo;Replay\u0026rdquo;.\nBut like the Start button, clicking on this Replay button doesn\u0026rsquo;t do anything yet. Make another script in your Scripts folder and name this \u0026ldquo;RestartScene\u0026rdquo;.\nThis time, instead of just making the EndScreen disappear, we want to reload everything: the starting Menu, Nuvi, and the aliens that Nuvi defeated. Copy and paste the below code into your script:\nusing System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.SceneManagement; public class RestartScene : MonoBehaviour { public void restart() { Scene scene = SceneManager.GetActiveScene(); SceneManager.LoadScene(scene.name); } } To reload everything, we use Scenes; but to do so, you need to have using UnityEngine.SceneManagement; declared under the usual 3 lines.\n Drag and drop this script from the Scripts folder into the ReplayButton inspector. In the OnClick() box, click on the \u0026ldquo;+\u0026rdquo; and like you did for the StartButton, drag the ReplayButton object into the box saying \u0026ldquo;None (Object)\u0026quot;. Then, find and select the restart() function from the RestartScene script.\n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-10/","title":"Activity 10 - Let&#39;s move and replace","tags":[],"description":"Use Linux commands to move and copy files","content":" Great, now that the hackers\u0026rsquo; malicious file won\u0026rsquo;t cause us any more headaches, let\u0026rsquo;s restore the old file so things will run smoothly again.\nHow to fix the secret-message The command mv can also be used to replace the destination file with the source file.\nThe format is: mv [source filename] [destination name].\nReplace the messed up secret message with the backup that we found earlier.\nLet\u0026rsquo;s move the file into the new directory that we made.\n Backup your files That backup file earlier came in handy to fix the tampered file. Let\u0026rsquo;s backup the files in our directory.\ncp is a command that copies a file from one location to another.\nThe format is: cp [source filename] [destination filename].\nMake a copy of the file you made and the secret-message.txt.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/progress_update_3/","title":"Progress Update 3","tags":[],"description":"","content":"To verify that your code is correct up to this checkpoint, please compare your code against the example code provided below.\nIf you would like to test the following code, visit this link\nTo edit this code, click on the \u0026lsquo;Copy to Drive\u0026rsquo; button to make a personal copy of this notebook. Make sure you are logged in to your Google account.\nIf you are using a Nuevo Google account temporarily Once you make a copy, please make sure to replace the \u0026ldquo;Copy of\u0026rdquo; with your name, along with the file name. This will be on the top left corner of your notebook.\n  def plot_image(i, predictions_array, true_label, img): true_label, img = true_label[i], img[i] plt.grid(False) plt.xticks([]) plt.yticks([]) plt.imshow(img, cmap=plt.cm.binary) predicted_label = np.argmax(predictions_array) if predicted_label == true_label: color = \u0026#39;blue\u0026#39; else: color = \u0026#39;red\u0026#39; plt.xlabel(\u0026#34;{} {:2.0f}%({})\u0026#34;.format(class_names[predicted_label], 100*np.max(predictions_array), class_names[true_label]), color=color) def plot_value_array(i, predictions_array, true_label): true_label = true_label[i] plt.grid(False) plt.xticks(range(10)) plt.yticks([]) thisplot = plt.bar(range(10), predictions_array, color=\u0026#34;#777777\u0026#34;) plt.ylim([0, 1]) predicted_label = np.argmax(predictions_array) thisplot[predicted_label].set_color(\u0026#39;red\u0026#39;) thisplot[true_label].set_color(\u0026#39;blue\u0026#39;) i = 0 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() i = 12 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() #Plotting 6 images num_rows = 3 num_cols = 2 num_images = num_rows*num_cols plt.figure(figsize=(2*2*num_cols, 2*num_rows)) for i in range(num_images): plt.subplot(num_rows, 2*num_cols, 2*i+1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(num_rows, 2*num_cols, 2*i+2) plot_value_array(i, predictions[i], test_labels) plt.tight_layout() plt.show() #Plotting 25 images num_rows = 5 num_cols = 5 num_images = num_rows*num_cols plt.figure(figsize=(2*2*num_cols, 2*num_rows)) for i in range(num_images): plt.subplot(num_rows, 2*num_cols, 2*i+1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(num_rows, 2*num_cols, 2*i+2) plot_value_array(i, predictions[i], test_labels) plt.tight_layout() plt.show() # Grab an image from the test dataset. This shows the resolution of the image.  #NOTE: This index will be changed and its corresponding plot would be displayed in the next few steps img = test_images[7] print(img.shape) (28, 28) # Add the image to a batch where it\u0026#39;s the only member. img = (np.expand_dims(img,0)) print(img.shape) (1, 28, 28) predictions_single = probability_model.predict(img) print(predictions_single) [[3.5166083e-06 5.8611553e-12 7.3947426e-04 3.9665074e-06 2.8206140e-03 9.7541879e-08 9.9643230e-01 8.2940162e-11 1.2411914e-07 2.7266043e-09]] plot_value_array(7, predictions_single[0], test_labels) #plot the graph containing all the class names _ = plt.xticks(range(10), class_names, rotation=45) np.argmax(predictions_single[0]) #Verifying the index value with highest probability 6 i = 7 #We can see that this image detects the right class name for the image plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() Congratulations! You and your colleagues are now able to sort 4 times as many returned clothes! Your supervisor is impressed by this and chose you as the Employee of the Month!\n Thank you for doing this workshop! We hope you enjoyed it and learned the basics of Machine Learning!\n Are you stuck anywhere in this workshop or want to check your work? Feel free to refer to this Answer Key\n If you would like to test the finished code, visit this link\nTo edit this code, click on the \u0026lsquo;Copy to Drive\u0026rsquo; button to make a personal copy of this notebook. Make sure you are logged in to your Google account.  "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-6/","title":"Activity 6 - Restarting the Player after Being Destroyed","tags":[],"description":"","content":"We have made some pretty solid enemies, but now there\u0026rsquo;s something wrong - they don\u0026rsquo;t actually do anything to you! Specifically, they can\u0026rsquo;t actually hurt you in any way. Let\u0026rsquo;s change that. In the final game, there will be two ways you can get damaged: getting shot by an enemy laser, or directly touching the enemy. Let\u0026rsquo;s start with the latter since it is a bit easier.\nCollision is relatively easy in Phaser.\nLet’s first start by importing an explosion sprite sheet and implementing its animation in Scene 1:\nThis will be an explosion that plays when the player is destroyed!\nPhaser has very convenient ways to handle collision between objects. We can simply add the below line to the create() method in Scene 2:\nthis.physics.add.overlap(this.player, this.enemies, this.hurtPlayer, null, this); What this line does is call the hurtPlayer() method when this.player and a member of the group this.enemies overlap. It will call hurtPLayer with this.player and this.enemies as arguments.\nThis line will make it so that the hurtPlayer() method is called when the player and an object in the enemy group touches each other with the player and enemy variable passed to the method as arguments. Now let’s create the hurtPlayer() method:\nFirst we will destroy the enemy and disable the player for step 4 and 5 with these lines:\nenemy.destroy(); player.disableBody(true, true); This makes both the enemy and player disappear (the enemy has been deleted, but the player is just invisible and not interactive). Now let\u0026rsquo;s make the player revive after a short pause (the pause allows the player some time to react to the damage). For this pause, we will another timer (like we did for changing the enemy direction) by step 7. The syntax will be the same, but we will call the resetPlayer() function, have a shorter delay, and also not loop the timer.\nOnce you have the timer created, let\u0026rsquo;s work on the resetPlayer() method:\nFirst, choose a respawn coordiate and change the player\u0026rsquo;s (X, Y) value to this location (we can still change the ship\u0026rsquo;s location like this because it still exists, it\u0026rsquo;s just disabled). Then, enable the player with this line:\nthis.player.enableBody(true, x, y, true, true); Once you have implemented this, the collision should look like this: Next, let\u0026rsquo;s create a new explosion object by editing explosion.js:\nNotice that it extends Phaser.GameObjects.Sprite.This will allow us to use this Class’s constructor through inheritance. Our Projectile object’s parameter is simply just the scene and two numbers (x and y) - later you will see that we pass Scene 2 itself. We can use this scene to access everything within it. All this file will do is create an object that will play the explosion animation at the specified location. All the code this class needs is contained within the constructor, and there are only 2 lines of code that you need to fill in.\nNow, go to the hurtPlayer() method in scene2.js：\nYou will create two explosion objects:\n One with the scene and player coordinates as parameters, The other with the scene and enemy coordinates as parameters. \n Next, notice how the player\u0026rsquo;s revival is a bit sudden. We will make this transition smoother with a tween after we spawn the player:\nA tween is essentially a tool that lets you animate a feature or characteristic of an object. For example, in this case, we are animating the player’s alpha (aka visibility). We will begin by setting the player’s alpha to 0.5 and then using the tween to animate it to full, normal visibility.\nvar tween = this.tweens.add({ targets: this.player, y: config.height - 64, ease: \u0026#39;Power1\u0026#39;, duration: 1500, repeat: 0, onComplete: function(){ this.player.alpha = 1; }, callbackScope: this }); Now we’re finally done! Now our player revival animation looks much cleaner!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-10/","title":"Activity 10 - Randomizing the color of your mandala flower petals","tags":[],"description":"","content":"We’ve successfully set the color of the mandala flower to an RGB value. Now, let\u0026rsquo;s explore changing the color of the individual mandala flower petals?\nWe will make use of python’s random library. The random.randint() method allows us to choose a random value for each of the red, green, or blue value. To choose a value that is between 0 inclusive and 256 exclusive (in other words, between 0 and 255 inclusive), we need to use random.randint(0, 256).\nUse random.randint(0, 256) three times to produce three random values, and plug them into the turtle.color() method. You should now be able to see a multi-colored mandala flower! This is definitely a flower from which Alex would be interested in collecting nectar!\n Congratulations! You helped Alex make a honeycomb and a flower! He can now happily live in his beehive, and make lots of honey! Your final image should look something like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-4/","title":"Activity 4 - Putting it all together","tags":[],"description":"","content":"Activity 4 This activity has four parts. This is a great time to use your knowledge of comments, numbers, variables, and reading from console to complete the 4 activities. Some background information for each activity is provided below, and hints are provided in the code. After each part, press run and make sure there are no errors present in the console.\nActivity 4.1 First, let\u0026rsquo;s introduce some more code into our game. Find the two lines of code which start with TODO (ACTIVITY 4.1) (one is at approximately line 60, and the other at approximately line 130). Delete both lines of code entirely. This unlocks the main behavior of the game, such as checking if the letter guessed by the player is found in the word to guess.\nUnfortunately, after pressing run, it seems like the game does not wait for user input, and continuously guesses 'C' instead! This is no good, so let\u0026rsquo;s fix this in the next part.\nActivity 4.2 When the player makes a guess, we need to take the guessed letter and store it in a variable. The variable will be used to check if the letter appears in the word to guess. Use Console.ReadLine to wait for user input and store the user input in the input variable. Note: we have already declared the variable input already, so you do not need to use the var keyword.\nTo check if you have done this correctly, press run, and you should now be able to type in a letter into the console.\nActivity 4.3 Every time a letter is guessed correctly, we need to increment (add one to) the number of correctly guessed letters. Use the lettersRevealed variable to change the number of correctly guessed letters. Press run to make sure no errors occur. We have also provided some code to print out the value of the lettersRevealed variable for testing purposes. Make sure to delete this when you are done testing, since this is something we do not want to reveal to the player!\nActivity 4.4 Every time a letter is guessed incorrectly, the player loses a life. Decrement (subtract one from) the number of lives, using the lives variable. We will also tell the player how many lives they have remaining, when they make an incorrect guess, by printing the number of lives to the console. Check if you have done this correctly by pressing run, guessing an incorrect letter, and seeing if the correct number of lives are displayed on the console.\nFun Fact - Bugs Recall in Activity 4.1 that after uncommenting some code, we experienced some unexpected behavior. Any problems or unexpected behaviors in the program are called \u0026ldquo;bugs\u0026rdquo;. We fixed the bug introduced in Activity 4.1 by introducing user input in Activity 4.2.\nEven if you implemented everything correctly in the previous parts, if you keep playing for a while, another issue still occurs. What is it? We will fix this bug in Activity 6.\n "},{"uri":"https://nuevofoundation.github.io/workshops/unity/outline/","title":"Piecing it All Together","tags":[],"description":"","content":"Now that we have all the UI set, we want the game to function as we intend it to. Right now when we simulate the playable game, we can move Nuvi, but the end screen is already showing. To fix this, we will have a script that will dictate how the game should go. Under the Scripts folder in the Projects window, create a new script called \u0026ldquo;Outline\u0026rdquo;. Drag this script into the \u0026ldquo;Main Camera\u0026rdquo; inspector which we can locate under the hierarchy.\nBefore we add anything into the \u0026ldquo;Outline\u0026rdquo; script, let\u0026rsquo;s first set a few things up. If we were to run the game now, we can still move Nuvi and fire at the pink enemies despite the UI popping up. Let\u0026rsquo;s fix that by setting up spawn points. \u0026ldquo;Create Empty\u0026rdquo; in the hierarchy window and rename it to \u0026ldquo;SpawnPoints\u0026rdquo;. Then, Create four more Transforms under \u0026ldquo;SpawnPoints\u0026rdquo; and rename them \u0026ldquo;EnemyLoc1\u0026rdquo;, \u0026ldquo;EnemyLoc2\u0026rdquo;, \u0026ldquo;EnemyLoc3\u0026rdquo;, and \u0026ldquo;PlayerLoc\u0026rdquo;. Reposition them using the Move tool so that they are right on the enemies and players like so:\nMake sure that the Transforms are on the same Z axis as Nuvi. Otherwise, they might not appear!\n Now that we have everything all set up, let\u0026rsquo;s open up the outline script and copy and paste this code:\nusing System.Collections; using System.Collections.Generic; using UnityEngine; public class Outline : MonoBehaviour { public Slider num_of_enemies; private Transform location; public GameObject opening_screen; public GameObject winner_screen; public GameObject enemy1; public GameObject player1; private bool is_generated; // Start is called before the first frame update  void Start() { is_generated = false; } // Update is called once per frame  void Update() { if(is_generated == false) { if (opening_screen.activeSelf == false) { generate(); is_generated = true; enemies_left = (int) num_of_enemies.value; } } if(enemies_left == 0) { showEndScreen(); } } private void generate() { for(int x = 1; x \u0026lt;= ; x++) //for each number of enemies wanted from the slider  { location = positions[x]; //since it\u0026#39;s an array, take transform from index x  GameObject enemy = Instantiate(enemy1, location); //instantiate enemy at chosen location  } location = positions[0]; GameObject player = Instantiate(player1, location); } private void showEndScreen() { winner_screen.SetActive(true); } } This code is missing a few lines in order for it to run correctly. Let\u0026rsquo;s fill them in shall we?\nIf we were to try running the game now, it won\u0026rsquo;t let us. One reason is that we use a UI object in the script. In order to access it, we need to import the UI namespace. To do this, add using UnityEngine.UI; at the top of the script under using UnityEngine;.\nNext, we want to store the spawn positions we made. What do you think is the best data structure to store these spawn points? If you thought arrays, you are correct! Add the line public Transform[] positions; right above private Transform location;. This will allow us to store all the spawn points without having to create four individual variables.\nOne problem we ran into was the end screen appearing despite it being the start of the game. If you took notice of the past two scripts for the Menu and End screen, you may have an idea on how to fix this. Similar to how we set the Menu screen to false, we need to set the End screen to false. To do this, add winner_screen.SetActive(false); inside the Start() method.\nThe final addition we need to make in order for the script to work is in the generate() function. Inside the for loop, we need to find a way to grab the number that the player chose from the slider within the Menu screen. Since we will be referring to the slider as num_of_enemies, we simply need to add num_of_enemies.value right after the \u0026lt; and before the ; in the for loop.\nNow, head to the Main Camera inspector and locate the Outline script. Notice that there are a lot of empty variables that we need to fill in. First, drag the num_enemies slider from the hierarchy into the \u0026ldquo;Num_of_enemies\u0026rdquo; variable. For \u0026ldquo;Positions\u0026rdquo;, choose \u0026ldquo;4\u0026rdquo;. Drag the spawn locations in this order starting from Element 0: PlayerLoc → EnemyLoc2 → EnemyLoc1 → EnemyLoc3. Then, drag the Menu GameObject from the hierarchy into the \u0026ldquo;Opening_screen\u0026rdquo; variable and the EndScreen GameObject into the \u0026ldquo;Winner_screen\u0026rdquo; variable. Next, from the Prefabs folder in the Project window, drag the \u0026ldquo;enemy1\u0026rdquo; prefab into the \u0026ldquo;Enemy 1\u0026rdquo; variable and the \u0026ldquo;Nuvi\u0026rdquo; prefab into the \u0026ldquo;Player 1\u0026rdquo; variable.\nNext, we need a way to know when the enemies are defeated, so that we can have the End screen pop up when there are no enemies left. To do this, we keep a count of how many enemies there are, and this count should go down when an enemy is defeated. In the \u0026ldquo;Outline\u0026rdquo; script add public int enemies_left;. For now add enemies_left = -1; in the Start() method. Now, let\u0026rsquo;s think of when the enemy gets defeated. In what script did we destroy the enemy? If you thought of the \u0026ldquo;EnemyBehavior\u0026rdquo; script, then you\u0026rsquo;re right! Open up the \u0026ldquo;EnemyBehavior\u0026rdquo; script and add this code above the OnCollisionEnter2D() method:\nGameObject cam; private Outline outline; void Start() { cam = GameObject.Find(\u0026#34;Main Camera\u0026#34;); outline = cam.GetComponent\u0026lt;Outline\u0026gt;(); } The first line in the Start() method sets the variable \u0026ldquo;cam\u0026rdquo; as the \u0026ldquo;Main Camera\u0026rdquo; GameObject. The second line grabs the Outline script from \u0026ldquo;cam\u0026rdquo; and sets that to the variable \u0026ldquo;outline\u0026rdquo;. Next, add outline.enemies_left--; under Destroy(gameObject);. This will subtract 1 from the \u0026ldquo;enemies_left\u0026rdquo; variable in the \u0026ldquo;Outline\u0026rdquo; script.\nFinally, all we need to do is remove all the enemies and Nuvi from the Scene window. This is because we want them to spawn only when we press the start button. Right click on them in the hierarchy and select delete.\nPhew\u0026hellip; that was a lot, wasn\u0026rsquo;t it? Now try running your game! If all\u0026rsquo;s good, then Congratulations! You made your first ever game! But you\u0026rsquo;re not done yet. Let\u0026rsquo;s try exporting your game so that you can share your game with others!\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/answer-key/","title":"Answer Key - Android Tic-Tac-Toe","tags":[],"description":"","content":"Puzzle 1 \u0026lt;resources\u0026gt; \u0026lt;string name=\u0026#34;app_name\u0026#34;\u0026gt;Tic-Tac-Toe\u0026lt;/string\u0026gt; \u0026lt;/resources\u0026gt; Puzzle 2 Toast.makeText(this, \u0026#34;Welcome to Tic-Tac-Toe\u0026#34;, Toast.LENGTH_LONG).show() Puzzle 3 Puzzle 3a var colorGreen = Color.GREEN Puzzle 3b var winner = -1 Final Puzzle //cross1 if (Player1.contains(1) \u0026amp;\u0026amp; Player1.contains(5) \u0026amp;\u0026amp; Player1.contains(9)) { winner = 1 } if (Player2.contains(1) \u0026amp;\u0026amp; Player2.contains(5) \u0026amp;\u0026amp; Player2.contains(9)) { winner = 2 } //cross2 if (Player1.contains(3) \u0026amp;\u0026amp; Player1.contains(5) \u0026amp;\u0026amp; Player1.contains(7)) { winner = 1 } if (Player2.contains(3) \u0026amp;\u0026amp; Player2.contains(5) \u0026amp;\u0026amp; Player2.contains(7)) { winner = 2 } "},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/activity-11/","title":"Activity 11 - Store and protect files","tags":[],"description":"Use Linux commands to compress and archive files.","content":"Thanks so much for helping us fix my machine! Now let\u0026rsquo;s get everything up into one nice package.\nSecure your files, so they don\u0026rsquo;t get tampered with again tar is a command that creates and extracts archived files.\nAn archive is a collection of archive files. An archive file holds the compressed data of one or more files.\nzip is a command that compresses a set of files. The format is: zip [name of zip file] [filenames to be zipped]\n The format is: tar [filenames].\n   flags Uses     -c creates archive   -x extracts archive   -f creates archive with given filename    Use tar to secure your directory of files! You are going to want to create an archive with the name files.tar.gz.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/answer_key/","title":"Answer Key","tags":[],"description":"","content":"Activity 1 class_names = [\u0026#39;T-shirt/top\u0026#39;, \u0026#39;Trouser\u0026#39;, \u0026#39;Pullover\u0026#39;, \u0026#39;Dress\u0026#39;, \u0026#39;Coat\u0026#39;,\u0026#39;Sandal\u0026#39;, \u0026#39;Shirt\u0026#39;, \u0026#39;Sneaker\u0026#39;, \u0026#39;Bag\u0026#39;, \u0026#39;Ankle boot\u0026#39;] \n Activity 2 The max pixel value is 255 for any index used.\n Activity 3 To answer Q1 you would change your code to the following:\nplt.figure(figsize=(10,10)) #sets the image size to 10x10 pixels for i in range(42): #displays first 42 images with their class name plt.subplot(6,7,i+1) plt.xticks([]) plt.yticks([]) plt.grid(False) plt.imshow(train_images[i], cmap=plt.cm.binary) plt.xlabel(class_names[train_labels[i]]) plt.show() #shows images with their labels   Activity 4 Answers may vary, sample answers provided below:\nQuestion 1 model.fit(train_images, train_labels, epochs=2) #epochs determine how many times a model is trained Epoch 1/2 1875/1875 [==============================] - 4s 2ms/step - loss: 0.5024 - accuracy: 0.8231 Epoch 2/2 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3761 - accuracy: 0.8647 \u0026lt;tensorflow.python.keras.callbacks.History at 0x7f909cbb2208\u0026gt; test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2) print('\\nTest accuracy:', test_acc) 313/313 - 0s - loss: 0.3899 - accuracy: 0.8604\nTest accuracy: 0.8604000210762024 Accuracy of Epoch 2 is .8647 and the test accuracy when the trained model is compared to the test dataset is .8604.\n Question 2 model.fit(train_images, train_labels, epochs=10) #epochs determine how many times a model is trained Epoch 1/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.4990 - accuracy: 0.8247 Epoch 2/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3754 - accuracy: 0.8658 Epoch 3/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3374 - accuracy: 0.8771 Epoch 4/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3110 - accuracy: 0.8859 Epoch 5/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2935 - accuracy: 0.8903 Epoch 6/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2823 - accuracy: 0.8942 Epoch 7/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2682 - accuracy: 0.9002 Epoch 8/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2575 - accuracy: 0.9041 Epoch 9/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2479 - accuracy: 0.9074 Epoch 10/10 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2417 - accuracy: 0.9088 \u0026lt;tensorflow.python.keras.callbacks.History at 0x7f2b4a7cb7b8\u0026gt; test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2) print('\\nTest accuracy:', test_acc) 313/313 - 0s - loss: 0.3461 - accuracy: 0.8812\nTest accuracy: 0.8812000155448914 Accuracy of Epoch 10 is .9088 and the test accuracy when the trained model is compared to the test dataset is .8812.\n Question 3 model.fit(train_images, train_labels, epochs=20) #epochs determine how many times a model is trained Epoch 1/20 1875/1875 [==============================] - 5s 3ms/step - loss: 0.4935 - accuracy: 0.8268 Epoch 2/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3769 - accuracy: 0.8639 Epoch 3/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3387 - accuracy: 0.8776 Epoch 4/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3113 - accuracy: 0.8858 Epoch 5/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2966 - accuracy: 0.8903 Epoch 6/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2803 - accuracy: 0.8957 Epoch 7/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2679 - accuracy: 0.9008 Epoch 8/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2565 - accuracy: 0.9049 Epoch 9/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2475 - accuracy: 0.9083 Epoch 10/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2399 - accuracy: 0.9103 Epoch 11/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2298 - accuracy: 0.9141 Epoch 12/20 1875/1875 [==============================] - 3s 2ms/step - loss: 0.2235 - accuracy: 0.9163 Epoch 13/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2165 - accuracy: 0.9190 Epoch 14/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2105 - accuracy: 0.9206 Epoch 15/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2035 - accuracy: 0.9240 Epoch 16/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.1978 - accuracy: 0.9253 Epoch 17/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.1918 - accuracy: 0.9285 Epoch 18/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.1877 - accuracy: 0.9286 Epoch 19/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.1820 - accuracy: 0.9313 Epoch 20/20 1875/1875 [==============================] - 4s 2ms/step - loss: 0.1762 - accuracy: 0.9335 \u0026lt;tensorflow.python.keras.callbacks.History at 0x7f90ac950550\u0026gt; test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2) print('\\nTest accuracy:', test_acc) 313/313 - 0s - loss: 0.3648 - accuracy: 0.8892\nTest accuracy: 0.88919997215271 Accuracy of the last epoch, Epoch 20, is .9335 and the test accuracy when the trained model is compared to the test dataset is .8892.\n Question 4 We see a positive correlation. As we increase the number of epochs, there is more data to train the model with, so the accuracy increases.\n  Activity 5 For this actvity, we will be using this image.\nplt.figure() plt.imshow(train_images[0]) #Shows the first image in the data set as a plot or different colored pixels plt.colorbar() #displays the color bar on the right plt.grid(False) plt.show() #displays the entire plot Question 1 probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()]) predictions = probability_model.predict(test_images) predictions[0] #Returns the index with highest probability, depends on the index value. array([1.1623413e-08, 2.3745208e-08, 3.5589391e-08, 1.2773025e-09, 5.3400743e-08, 2.0998505e-04, 7.4230536e-07, 6.9385571e-03, 2.8271037e-07, 9.9285042e-01], dtype=float32) Index 9 has the highest confidence value, and index 1 has the lowest confidence value.\n Question 2 np.argmax(predictions[0]) # This returns the index value with the highest predictions 9 test_labels[0] # This is the index value returned by the test dataset # (That we are comparing against) 9 class_names[9] # This is the category name of the image that has the highest probability 'Ankle boot' This corresponds to the \u0026lsquo;Ankle Boot\u0026rsquo; category.\n  Activity 6 For this answer, we will be using this image. Feel free to use any picture you want from the dataset, but make sure you are consistent with the values.\nplt.figure() plt.imshow(train_images[7]) #Shows the first image in the data set as a plot or different colored pixels plt.colorbar() #displays the color bar on the right plt.grid(False) plt.show() #displays the entire plot Question 1 probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()]) predictions = probability_model.predict(test_images) predictions[7] #Returns the index with highest probability, depends on the index value. array([3.5166186e-06, 5.8611111e-12, 7.3947496e-04, 3.9665038e-06, 2.8206115e-03, 9.7542063e-08, 9.9643230e-01, 8.2940481e-11, 1.2411938e-07, 2.7266096e-09], dtype=float32) Index 6 has the confidence value, and index 7 has the lowest confidence value.\n Question 2 np.argmax(predictions[7]) # This returns the index value with the highest predictions 6 test_labels[7] # This is the index value returned by the test dataset # (That we are comparing against) 6 class_names[6] # This is the category name of the image that has the highest probability 'Shirt' This corresponds to the \u0026lsquo;Shirt\u0026rsquo; category.\n  Activity 7 Question 1 # Grab an image from the test dataset. This shows the resolution of the image.  #NOTE: This index will be changed and its corresponding plot would be displayed in the next few steps img = test_images[7]\nprint(img.shape) \n Question 2 plot_value_array(7, predictions_single[0], test_labels) #plot the graph containing all the class names _ = plt.xticks(range(10), class_names, rotation=45)  Question 3 i = 7 #We can see that this image detects the right class name for the image plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() Yes, this is consistent with the previous question.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-7/","title":"Activity 7 - Allowing the Player to Shoot","tags":[],"description":"","content":"Now, we we want to add one of the most important parts of the game - shooting the enemies! Although we can defeat enemies by crashing into them, this won\u0026rsquo;t be a good idea once we add lives later. We will create a shooting effect by creating an object for the beam using a separate JavaScript file (like we did for the explosion).\nWe will start with some basic stuff - loading a spritesheet and animation in Scene 1 for the player\u0026rsquo;s beams:\nThe location of the spritesheet is assets/beam.png and the frame width and height is 32:\nNow in Scene 2, we will do something similar to what we did with the enemies and create a group for the beams so that we can easily manipulate them. Create a group and name it \u0026ldquo;projectiles\u0026rdquo;:\nNow go to playerBeam.js：\nNotice that, like Explosion.js, it extends Phaser.GameObjects.Sprite and uses the super() keyword in its constructor. Complete the code in the constructor. This will require that you play the beam\u0026rsquo;s animation, enable the body, and set the beam\u0026rsquo;s y-velocity to whatever speed you want your beam to travel.\nNow that we have the basics of the beam down, let’s allow the player to shoot it when they click the spacebar. Similar to how we created a variable to process pointer keys for player movement, we will create another variable to process when the player presses the space bar:\nWe will now create a playerShoot() method:\nand call it in the update() method like we did for the movePlayer():\nThe playerShoot method will check if the spacebar has been pressed and fire a beam if it has. \u0026ldquo;Firing a beam\u0026rdquo;, in this case, means creating a playerBeam object and adding it to the projectiles group if the player is active (still alive).\nTest it out now! There are two big issues here however - the beam doesn’t harm the enemy at all and the beam also keeps going forever because of phaser’s infinite canvas. Let’s fix that second issue first. Although this issue doesn\u0026rsquo;t directly affect the gameplay, it could potentially be an issue because if the beam still exists off screen, then that means the computer has to waste time tending to it. If there are too many beams for the computer to take care of, it could potentially cause lag! What we will do is utilize an update function in playerBeam.js that will destroy the beam if it goes off screen.\nThe only way to make these update functions work, however, is to call them in the update function in our Scene 2 like this:\nfor(var i = 0; i \u0026lt; this.projectiles.getChildren().length; i++) { var beam = this.projectiles.getChildren()[i]; beam.update(); } you can fill it into this location:\nNow, to test this, we can simply change the height value that the beam self-destructs to one that is on the screen:\nThe code is working correctly if the beam disappears at the specific height. After we test that the code works, we can simply change this value to one that is above the screen.\nYou can see in this gif that the beam is disappearing once it hits a specified height (we used 50). Again, after confirming that it works, we can simply change the number 50 to one that is a bit off screen (like 10) and we know that the code is probably still working the same.\nNow, lets make the enemy be destroyed if they’re hit with a beam! We can actually just do this with a similar overlap detection that we did to check if the player is touching the enemy:\nCreate a line of code that uses the same syntax as the line we used for detecting whether the player and enemy have collided, but this time check if the enemy and beam have collided.\nHowever, we can’t use the hurtPlayer() method because the player isn’t being hurt and we don’t want the player to respawn when the enemy is hit. We will create a new function called hitEnemy():\nAdd code to the hitEnemy() so that it creates an explosion at the enemy’s location and removes the beam and the enemy.\nAt the end, the shooting should look like this! "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-11/","title":"Activity 11 - Now, it&#39;s your turn!","tags":[],"description":"","content":"If there is any time left, try drawing your own shapes and designs! Make your picture interesting using various shapes and colors.\nClick here to open a new blank repl.it window to start on your creation.\nHelp, I am stuck! Stuck? Check the Answer key for the activity that you are stuck on!\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/if-else-statements/","title":"If-else statements","tags":[],"description":"","content":"If-else statements You can use if statements to run code statement only if certain conditions are met. Here is an example:\nvar myNum = (93 + 41) / 12; if (myNum == 11) { Console.WriteLine(\u0026#34;They are equal!\u0026#34;); } Inside the () beside if, you should specify a boolean expression. If the expression is true, the code inside { } is executed. In this case, since myNum is equal to 11, They are equal! is printed.\nIf the condition is false, nothing happens! For example, since 10 is not greater than 11, Print me! will not show up to the console.\nvar happy = 10; if (happy \u0026gt; 11) { Console.WriteLine(\u0026#34;Print me!\u0026#34;); } Use else to tell the computer what to do if the condition is false. In this example, now I got printed instead! will be printed to the console.\nvar happy = 10; if (happy \u0026gt; 11) { Console.WriteLine(\u0026#34;Print me!\u0026#34;); } else { Console.WriteLine(\u0026#34;I got printed instead!\u0026#34;); } You can chain many cases together using else if. Note that when using else if, only the first case will be evaluated. For example, in the following code snippet, Statement 1 will be printed. We will skip the check that sad == 4 and Statement 2 will not be printed, even though sad == 4 is true.\nvar sad = 4; if (sad \u0026lt; 9) { Console.WriteLine(\u0026#34;Statement 1\u0026#34;); } else if (sad == 4) { Console.WriteLine(\u0026#34;Statement 2\u0026#34;); } else { Console.WriteLine(\u0026#34;Statement 3\u0026#34;); } You can also place if statements inside other if statements for some interesting behavior:\nvar num1 = 10; var num2 = 20; if (num1 \u0026lt; num2) { if (num2 \u0026lt; 30) { Console.WriteLine(\u0026#34;Hello!\u0026#34;); } else { Console.WriteLine(\u0026#34;Hola!\u0026#34;); } } Working Together Let\u0026rsquo;s write a program that first prints the following line to console:\nIs coding fun? Afterwards, the console waits for user input.\n If the user enters yes, the computer prints out Yes, I'm glad you're enjoying it!. If the user enters no, the computer prints out Oh no, that's too bad!. Otherwise, the computer prints out: I don't understand you! Goodbye!.    Fun Fact: Switch statements Using multiple if, else statements could get very long and confusing. You can use switch statements instead if you want to compare a single variable against multiple values. For example, the Working Together activity can be completed using the following piece of code:\nvar input = Console.ReadLine(); switch (input) { case \u0026#34;yes\u0026#34;: Console.WriteLine(\u0026#34;Yes, I\u0026#39;m glad you\u0026#39;re enjoying it!\u0026#34;); break; case \u0026#34;no\u0026#34;: Console.WriteLine(\u0026#34;Oh no, that\u0026#39;s too bad!\u0026#34;); break; default: Console.WriteLine(\u0026#34;I don\u0026#39;t understand you! Goodbye!\u0026#34;); break; } Each case represents a possible value that the variable input might take. Make sure you use the break statement to tell the computer that you have completed all the actions associated with this case.\n "},{"uri":"https://nuevofoundation.github.io/workshops/unity/build-and-run/","title":"Building and Running your Game","tags":[],"description":"","content":"In order to export your game, locate \u0026ldquo;File\u0026rdquo; at the top, left corner of the Unity window and select \u0026ldquo;Build Settings\u0026rdquo;. You will be greeted by this pop-up window:\nThe two most common builds are either the Mac build or PC build. To choose between the two, select the drop-down menu next to \u0026ldquo;Target Platform\u0026rdquo; and choose your platform choice. Finally, simply select \u0026ldquo;Build\u0026rdquo; at the bottom right. You will then be asked to choose where you want to save your game. You can create a new folder and save your game in there! Select your folder and the build process will begin. Once the build process is complete, head to where your newly created folder is located and open it.\nIf you are building on Windows, you can run your game by entering the folder where you built the game and selecting the application that has the icon below, with the name of your game next to it!\nIf you are building on a Mac, running your game is the exact same process. But instead of the Unity mark, you might find an icon like below. Don\u0026rsquo;t worry, it\u0026rsquo;s still your game.\nCongratulations! WOO HOO! Pat yourself on the back, you completed your first game! You learned about Rigidbodies, Colliders, prefabs, Triggers, tags, scripts, Unity\u0026rsquo;s UI system, and how to navigate Unity\u0026rsquo;s UI itself! Feel free to share your game with others!\nIf you liked this tutorial and want to learn more about Unity to one day make your own game, there are tons of other tutorials out there on the internet that you can view for free! You can also play around with Unity and figure out how things work on your own.\nGame development can seem like a daunting journey, but the products you create along the way will be all the more worthwhile. We wish you the best of luck on your journey, and remember: Never forget to have fun!\n"},{"uri":"https://nuevofoundation.github.io/workshops/linux-basics/closing/","title":"Closing","tags":[],"description":"The last screen after activities have been completed","content":"Congratulations! You have helped us thwart the hackers evil shenanigans by learning several Linux commands and how to use them. Thanks so much for helping SHH!\nBut don\u0026rsquo;t forget this is all Top Secret!\nClick the \u0026ldquo;Download\u0026rdquo; button below to receive your honorary certificate!\nDownload link "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-8/","title":"Activity 8 - Allowing the Enemies to Shoot","tags":[],"description":"","content":"Now, we will make the enemies shoot back at the player. Each enemy will shoot randomly, and the difficulty (which will later be escaleted with each level) is defined by how often they randomly shoot.\nThe enemy beam is rather similar to the player’s beam. We will again make a very similar enemyBeam.js file with nearly the same code as the playerBeam.js but with different variable names and numbers:\nWe will share sprite and animation for the player\u0026rsquo;s beams and enemy\u0026rsquo;s beams. However, during implementation, you will create a separate group for enemy projectiles:\nWe also need to create a difficulty for this game (we will explain more about difficulty later, but for now, difficulty will make sure enemy will shoot):\n We recommend setting difficulty to 1000. If you set difficulty to 1000, the random number will pick from 1 to 1000. Only if the random number is 1, the enemy will shoot. The enemy will shoot continously if you try difficulty to 1. \n To make the enemies shoot randomly, we will first create an enemyShoot() method:\nand call it in the update() method:\nthat creates a new enemy projectile at a specified random rate.\nThen, we need to update enemy projectiles. We need to make sure each beam is deleted.\nYou will have to update enemy beams in enemyBeam.js like you did in playerBeam.js:\nYou also need to update each enemy projectile in Scene 2, which is similar to how we update the projectiles:\nIn the end, it gameplay should look something like this: "},{"uri":"https://nuevofoundation.github.io/workshops/java-tictactoe/answer-key/","title":"Java: TicTacToe - Answer Key","tags":[],"description":"","content":"activity-1: Game SetUp public class TicTacToe_Nuevo { public static void main(String args[]){ // the board that stores moves  String[] board = {\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;}; // starting board that labeled position(only printed once)  String[] startBoard = {\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;}; System.out.println(\u0026#34;\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt;\\n* Choose number 1 - 9 to place your move\\n* Player: \u0026#39;X\u0026#39; Computer: \u0026#39;O\u0026#39;\\n\u0026#34; ); printBoard(startBoard); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); } // method that prints the board with the board input  public static void printBoard(String[] curBoard){ System.out.println(\u0026#34; \u0026#34; + curBoard[0] + \u0026#34; | \u0026#34; + curBoard[1] + \u0026#34; | \u0026#34; + curBoard[2] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[3] + \u0026#34; | \u0026#34; + curBoard[4] + \u0026#34; | \u0026#34; + curBoard[5] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[6] + \u0026#34; | \u0026#34; + curBoard[7] + \u0026#34; | \u0026#34; + curBoard[8] + \u0026#34; \u0026#34;); } } activity-2: Read + Process Input import java.util.Scanner; public class TicTacToe_Nuevo { public static void main(String args[]){ Scanner sc = new Scanner(System.in); /*String[] board = {\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;}; String[] startBoard = {\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;}; System.out.println(\u0026#34;\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt;\\n* Choose number 1 - 9 to place your move\\n* Player: \u0026#39;X\u0026#39; Computer: \u0026#39;O\u0026#39;\\n\u0026#34;); printBoard(startBoard); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); */ while(true){ int move; if(sc.hasNextInt()) { // get integer input \tmove = sc.nextInt(); // check if the integer is between 1, 9. check if the position is empty \tif (!(move \u0026gt; 0 \u0026amp;\u0026amp; move \u0026lt;= 9) || ! board[move -1].equals(\u0026#34; \u0026#34;)) { System.out.print(\u0026#34;Invalid Position; re-enter your move (1-9): \u0026#34;); continue; } } else { // clear the Scanner  sc.next(); System.out.print(\u0026#34;Invalid Input; re-enter your move (1-9): \u0026#34;); continue; } // reprompt the board  printBoard(board); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); } } /*public static void printBoard(String[] curBoard){ System.out.println(\u0026#34; \u0026#34; + curBoard[0] + \u0026#34; | \u0026#34; + curBoard[1] + \u0026#34; | \u0026#34; + curBoard[2] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[3] + \u0026#34; | \u0026#34; + curBoard[4] + \u0026#34; | \u0026#34; + curBoard[5] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[6] + \u0026#34; | \u0026#34; + curBoard[7] + \u0026#34; | \u0026#34; + curBoard[8] + \u0026#34; \u0026#34;); }*/ } activity-3: Update Board // import java.util.Scanner; import java.util.Random; public class TicTacToe_Nuevo { public static void main(String args[]){ /*Scanner sc = new Scanner(System.in); String[] board = {\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;}; String[] startBoard = {\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;}; System.out.println(\u0026#34;\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt;\\n* Choose number 1 - 9 to place your move\\n* Player: \u0026#39;X\u0026#39; Computer: \u0026#39;O\u0026#39;\\n\u0026#34;); printBoard(startBoard); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); */ while(true){ /*int move; if (sc.hasNextInt()) { move = sc.nextInt(); if (!(move \u0026gt; 0 \u0026amp;\u0026amp; move \u0026lt;= 9) || ! board[move -1].equals(\u0026#34; \u0026#34;)) { System.out.print(\u0026#34;Invalid Position; re-enter your move (1-9): \u0026#34;); continue; } } else { sc.next(); System.out.print(\u0026#34;Invalid Input; re-enter your move (1-9): \u0026#34;); continue; } */ // update the board with user\u0026#39;s move  board[move - 1] = \u0026#34;X\u0026#34;; // update the board with a random move for computer  board[getComputerMove(board) - 1] = \u0026#34;O\u0026#34;; /*printBoard(board); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); */s } } /*public static void printBoard(String[] curBoard){ System.out.println(\u0026#34; \u0026#34; + curBoard[0] + \u0026#34; | \u0026#34; + curBoard[1] + \u0026#34; | \u0026#34; + curBoard[2] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[3] + \u0026#34; | \u0026#34; + curBoard[4] + \u0026#34; | \u0026#34; + curBoard[5] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[6] + \u0026#34; | \u0026#34; + curBoard[7] + \u0026#34; | \u0026#34; + curBoard[8] + \u0026#34; \u0026#34;); }*/ // method that generate a valid random move  public static int getComputerMove(String[] curBoard){ Random rand = new Random(); int pos = rand.nextInt(9) + 1; while(! curBoard[pos - 1].equals(\u0026#34; \u0026#34;)){ pos = rand.nextInt(9) + 1; } return pos; } } activity-4: Check Winner // import java.util.Scanner; // import java.util.Random; public class TicTacToe_Nuevo { public static void main(String args[]){ /*Scanner sc = new Scanner(System.in); String[] board = {\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;}; String[] startBoard = {\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;}; System.out.println(\u0026#34;\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt;\\n* Choose number 1 - 9 to place your move\\n* Player: \u0026#39;X\u0026#39; Computer: \u0026#39;O\u0026#39;\\n\u0026#34;); printBoard(startBoard); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); */ while(true){ /*int move; if (sc.hasNextInt()) { move = sc.nextInt(); if (!(move \u0026gt; 0 \u0026amp;\u0026amp; move \u0026lt;= 9) || ! board[move -1].equals(\u0026#34; \u0026#34;)) { System.out.print(\u0026#34;Invalid Position; re-enter your move (1-9): \u0026#34;); continue; } } else { sc.next(); System.out.print(\u0026#34;Invalid Input; re-enter your move (1-9): \u0026#34;); continue; }*/ // board[move - 1] = \u0026#34;X\u0026#34;;  String winner = getWinner(board); if(winner.length() \u0026gt; 0){ // if there is a winner or a tie  printBoard(board); System.out.println(\u0026#34;\\n\u0026#34; + winner + \u0026#34;\\n\u0026#34;); break; } // board[getComputerMove(board) - 1] = \u0026#34;O\u0026#34;;  winner = getWinner(board); if(winner.length() \u0026gt; 0){ printBoard(board); System.out.println(\u0026#34;\\n\u0026#34; + winner + \u0026#34;\\n\u0026#34;); break; } /*printBoard(board); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); */s } sc.close(); } /*public static void printBoard(String[] curBoard){ System.out.println(\u0026#34; \u0026#34; + curBoard[0] + \u0026#34; | \u0026#34; + curBoard[1] + \u0026#34; | \u0026#34; + curBoard[2] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[3] + \u0026#34; | \u0026#34; + curBoard[4] + \u0026#34; | \u0026#34; + curBoard[5] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[6] + \u0026#34; | \u0026#34; + curBoard[7] + \u0026#34; | \u0026#34; + curBoard[8] + \u0026#34; \u0026#34;); } public static int getComputerMove(String[] curBoard){ Random rand = new Random(); int pos = rand.nextInt(9) + 1; while(! curBoard[pos - 1].equals(\u0026#34; \u0026#34;)){ pos = rand.nextInt(9) + 1; } return pos; }*/ // NOTE: this is one possible way to write this method.  public static String getWinner(String[] curBoard){ for(int i = 0; i \u0026lt; 8; i++){ String checkWin = \u0026#34;\u0026#34;; switch(i){ // conactenate all possible winning positions  case 0: checkWin = curBoard[0] + curBoard[1] + curBoard[2]; break; case 1: checkWin = curBoard[3] + curBoard[4] + curBoard[5]; break; case 2: checkWin = curBoard[6] + curBoard[7] + curBoard[8]; break; case 3: checkWin = curBoard[0] + curBoard[3] + curBoard[6]; break; case 4: checkWin = curBoard[1] + curBoard[4] + curBoard[7]; break; case 5: checkWin = curBoard[2] + curBoard[5] + curBoard[8]; break; case 6: checkWin = curBoard[0] + curBoard[4] + curBoard[8]; break; case 7: checkWin = curBoard[2] + curBoard[4] + curBoard[6]; break; } // check if any player wins  if(checkWin.equals(\u0026#34;XXX\u0026#34;)){ return \u0026#34;Congratulations! \\nYou won the Game :)\u0026#34;; }else if(checkWin.equals(\u0026#34;OOO\u0026#34;)){ return \u0026#34;Game Over! \\nYou lost the Game :(\u0026#34;; } } for(String move: curBoard){ if(move.equals(\u0026#34; \u0026#34;)){ return \u0026#34;\u0026#34;; } } return \u0026#34;It\u0026#39;s a TIE! Try again\u0026#34;; } } activity-5: AI Computer Move public static int getComputerMoveAI(String[] curBoard){ int pos = 0; int bestScore = Integer.MIN_VALUE; for(int i = 0; i \u0026lt; 9; i++){ if(curBoard[i].equals(\u0026#34; \u0026#34;)){ // go through all empty slots  // put computer\u0026#39;s move there  curBoard[i] = \u0026#34;O\u0026#34;; // get the score  int score = minimax(curBoard, false); // change it back  curBoard[i] = \u0026#34; \u0026#34;; // keep track of the position that gives the best score  if(score \u0026gt; bestScore){ bestScore = score; pos = i; } } } return pos; } public static int minimax(String[] curBoard, boolean isMaximizing){ // check if the board has a winner or a tie yet  String result = getWinner(curBoard); // factor = number of empty slots + 1  int factor = getFactor(curBoard); // terminating state return score  if(result.contains(\u0026#34;TIE\u0026#34;)) return 0; if(result.contains(\u0026#34;won\u0026#34;)) return -1 * factor; if(result.contains(\u0026#34;lost\u0026#34;)) return 1 * factor; // the follow code is similiar as getComputerMoveAI() but it swaps based on `isMaximizing` input  int bestScore = (isMaximizing)? Integer.MIN_VALUE : Integer.MAX_VALUE; String symbol = (isMaximizing)? \u0026#34;O\u0026#34; : \u0026#34;X\u0026#34;; for(int i = 0; i \u0026lt;9; i++){ if(curBoard[i].equals(\u0026#34; \u0026#34;)){ curBoard[i] = symbol; int score = minimax(curBoard, !isMaximizing); curBoard[i] = \u0026#34; \u0026#34;; if(isMaximizing) { bestScore = Math.max(score, bestScore); }else{ bestScore = Math.min(score, bestScore); } } } return bestScore; } // return number of spots available + 1  public static int getFactor(String[] curBoard){ int counter = 1; for(int i = 0; i \u0026lt; 9; i++){ if(curBoard[i].equals(\u0026#34; \u0026#34;)){ counter++; } } return counter; } Full Code import java.util.Random; import java.util.Scanner; public class TicTacToe_Nuevo { public static void main(String args[]){ String[] board = {\u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;, \u0026#34; \u0026#34;}; String[] startBoard = {\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;}; Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;\u0026lt;\u0026lt;\u0026lt;~ Tic Tac Toe ~\u0026gt;\u0026gt;\u0026gt;\\n* Choose number 1 - 9 to place your move\\n* Player: \u0026#39;X\u0026#39; Computer: \u0026#39;O\u0026#39;\\n\u0026#34;); printBoard(startBoard); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); while(true){ int move; if (sc.hasNextInt()) { move = sc.nextInt(); if (!(move \u0026gt; 0 \u0026amp;\u0026amp; move \u0026lt;= 9) || ! board[move -1].equals(\u0026#34; \u0026#34;)) { System.out.print(\u0026#34;Invalid Position; re-enter your move (1-9): \u0026#34;); continue; } } else { sc.next(); System.out.print(\u0026#34;Invalid Input; re-enter your move (1-9): \u0026#34;); continue; } board[move - 1] = \u0026#34;X\u0026#34;; String winner = getWinner(board); if(winner.length() \u0026gt; 0){ printBoard(board); System.out.println(\u0026#34;\\n\u0026#34; + winner + \u0026#34;\\n\u0026#34;); break; } double ran = Math.random(); /*if(ran \u0026lt; 0.2){ board[getComputerMove(board) - 1] = \u0026#34;O\u0026#34;; }else{*/ board[getComputerMoveAI(board) - 1] = \u0026#34;O\u0026#34;; //}  winner = getWinner(board); if(winner.length() \u0026gt; 0){ printBoard(board); System.out.println(\u0026#34;\\n\u0026#34; + winner + \u0026#34;\\n\u0026#34;); break; } printBoard(board); System.out.print(\u0026#34;Enter your move (1-9): \u0026#34;); } sc.close(); } public static void printBoard(String[] curBoard){ System.out.println(\u0026#34; \u0026#34; + curBoard[0] + \u0026#34; | \u0026#34; + curBoard[1] + \u0026#34; | \u0026#34; + curBoard[2] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[3] + \u0026#34; | \u0026#34; + curBoard[4] + \u0026#34; | \u0026#34; + curBoard[5] + \u0026#34; \u0026#34;); System.out.println(\u0026#34;---+---+---\u0026#34;); System.out.println(\u0026#34; \u0026#34; + curBoard[6] + \u0026#34; | \u0026#34; + curBoard[7] + \u0026#34; | \u0026#34; + curBoard[8] + \u0026#34; \u0026#34;); } public static String getWinner(String[] curBoard){ for(int i = 0; i \u0026lt; 8; i++){ String checkWin = \u0026#34;\u0026#34;; switch(i){ case 0: checkWin = curBoard[0] + curBoard[1] + curBoard[2]; break; case 1: checkWin = curBoard[3] + curBoard[4] + curBoard[5]; break; case 2: checkWin = curBoard[6] + curBoard[7] + curBoard[8]; break; case 3: checkWin = curBoard[0] + curBoard[3] + curBoard[6]; break; case 4: checkWin = curBoard[1] + curBoard[4] + curBoard[7]; break; case 5: checkWin = curBoard[2] + curBoard[5] + curBoard[8]; break; case 6: checkWin = curBoard[0] + curBoard[4] + curBoard[8]; break; case 7: checkWin = curBoard[2] + curBoard[4] + curBoard[6]; break; } if(checkWin.equals(\u0026#34;XXX\u0026#34;)){ return \u0026#34;Congratulations! \\nYou won the Game :)\u0026#34;; }else if(checkWin.equals(\u0026#34;OOO\u0026#34;)){ return \u0026#34;Game Over! \\nYou lost the Game :(\u0026#34;; } } for(String move: curBoard){ if(move.equals(\u0026#34; \u0026#34;)){ return \u0026#34;\u0026#34;; } } return \u0026#34;It\u0026#39;s a TIE! Try it again\u0026#34;; } public static int getComputerMove(String[] curBoard){ Random rand = new Random(); int pos = rand.nextInt(9) + 1; while(! curBoard[pos - 1].equals(\u0026#34; \u0026#34;)){ pos = rand.nextInt(9) + 1; } return pos; } // AI: computer move  public static int getComputerMoveAI(String[] curBoard){ int pos = 0; int bestScore = Integer.MIN_VALUE; for(int i = 0; i \u0026lt; 9; i++){ if(curBoard[i].equals(\u0026#34; \u0026#34;)){ curBoard[i] = \u0026#34;O\u0026#34;; int score = minimax(curBoard, false); curBoard[i] = \u0026#34; \u0026#34;; if(score \u0026gt; bestScore){ bestScore = score; pos = i; } } } return pos; } public static int minimax(String[] curBoard, boolean isMaximizing){ String result = getWinner(curBoard); int factor = getFactor(curBoard); // terminating state return score  if(result.contains(\u0026#34;TIE\u0026#34;)) return 0; if(result.contains(\u0026#34;won\u0026#34;)) return -1 * factor; if(result.contains(\u0026#34;lost\u0026#34;)) return 1 * factor; // recurrence case  int bestScore = (isMaximizing)? Integer.MIN_VALUE : Integer.MAX_VALUE; String symbol = (isMaximizing)? \u0026#34;O\u0026#34; : \u0026#34;X\u0026#34;; for(int i = 0; i \u0026lt;9; i++){ if(curBoard[i].equals(\u0026#34; \u0026#34;)){ curBoard[i] = symbol; int score = minimax(curBoard, !isMaximizing); curBoard[i] = \u0026#34; \u0026#34;; if(isMaximizing) { bestScore = Math.max(score, bestScore); }else{ bestScore = Math.min(score, bestScore); } } } return bestScore; } // return number of spots available + 1  public static int getFactor(String[] curBoard){ int counter = 1; for(int i = 0; i \u0026lt; 9; i++){ if(curBoard[i].equals(\u0026#34; \u0026#34;)){ counter++; } } return counter; } } "},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/answer-key/","title":"Java: Basics - Answer Key","tags":[],"description":"","content":"activity-1: Print Statements and Comments Hello World class Main { public static void main(String[] args) { System.out.print(\u0026#34;Hello World\u0026#34;); System.out.print(2020); System.out.print(\u0026#39;@\u0026#39;); } } Output:\nHello World2020@  Owl class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello world!\u0026#34;); System.out.println(\u0026#34; ​, ___ / ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ \\\\\u0026#34;); System.out.println(\u0026#34;​`\\\\/{o,o} \u0026lt; Hi, I am Minerva. Patrick\u0026#39;s friend! |\u0026#34;); System.out.println(\u0026#34;​ ​/ /) ) \\\\ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ /\u0026#34;); System.out.println(\u0026#34;​/,--\\\u0026#34;-\\\u0026#34;- \u0026#34;); } } Output:\n , ___ / ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ ‾ \\ `\\/{o,o} \u0026lt; Hi, I am Minerva. Patrick's friend! | / /) ) \\ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ / /,--\u0026quot;-\u0026quot;-  activity-2: Types and Variables DataType class Main { public static void main(String[] args) { String bestFriend = \u0026#34;Minerva\u0026#34;; int numOfFriends = 4; double GPA = 3.6; char meaningOfLife = \u0026#39;$\u0026#39;; boolean loveMusic = true; } } Variable Output:\nx: 2.3 y: 2.3 z: 0 activity-3: Operators int patrickGrade = 88; int tomGrade = 89; int maryGrade = 95; int chrisGrade = 84; int jenGrade = 92; average = (patrickGrade + tomGrade + maryGrade + chrisGrade + jenGrade)/5; boolean over60 = (average \u0026gt; 60); boolean over70 = (average \u0026gt; 70); boolean over80 = (average \u0026gt; 80); boolean over90 = (average \u0026gt; 90); Output:\n--------------------------- Music Grade Report --------------------------- Student Grades: - Patrick: 88 - Tom: 89 - Mary: 95 - Chris: 84 - Jen: 92 Class Average: 89.0 - Average Over 60: true - Average Over 70: true - Average Over 80: true - Average Over 90: false activity-4: Control Structures If statement int currentHour = ... ; // variable that stores current hour between 0 - 23 if(currentHour \u0026lt; 12){ System.out.println(\u0026#34;Good Morning\u0026#34;); }else if(currentHour \u0026lt; 20){ System.out.println(\u0026#34;Good Afternoon\u0026#34;); }else{ System.out.println(\u0026#34;Good Night\u0026#34;); } While Loop int myTotal = 0; for(int num2 = 1; num2 \u0026lt;= 100; num2++){ myTotal += num2; } Output:\nAnswer calculated in a while loop: 5050 Answer calculated in a for loop: 5050 activity-5: Methods Pyramid public static int pyramidCount(int level){ int total = 0; for(int i = 1; i \u0026lt;= level; i++){ total = total + i*i; } return total; } Output:\nCongratulations! Challenge Solved! activity-6: Object and Classes Bird Class public class Bird{ // instance variables  private String species; private String name; private String hobby; private int age; private boolean loveMusic; // constructor  public Bird(String species_input, String name_input, String hobby_input, int age_input, boolean loveMusic_input){ species = species_input; name = name_input; hobby = hobby_input; age = age_input; loveMusic = loveMusic_input; } public String getSpecies(){ return species; } public String getName(){ return name; } public String getHobby(){ return hobby; } public int getAge(){ return age; } public boolean getLoveMusic(){ return loveMusic; } public String toString(){ String info = \u0026#34;\u0026#34;; info = info + \u0026#34;Hi, my name is \u0026#34; + getName() + \u0026#34;. I am a \u0026#34; + getAge() + \u0026#34;year old \u0026#34; + getSpecies() + \u0026#34; who likes to \u0026#34; + getHobby() + \u0026#34;. \u0026#34;; if(getLoveMusic()){ info = info + \u0026#34;I also like music very much!\u0026#34;; }else{ info = info + \u0026#34;However, I do not like music!\u0026#34;; } return info; } } main() Implementation: No correct answer just an exercise public static void main(String[] args) { Bird patrick = new Bird(\u0026#34;duck\u0026#34;, \u0026#34;Patrick\u0026#34;, \u0026#34;hangout with friends\u0026#34;, 15, true); System.out.print(patrick); } Output:\nHi, my name is Patrick. I am a 15year old duck who likes to hangout with friends. I also like music very much! activity-7: Data Structure (Array \u0026amp; ArrayList) Array public static void printArr(String[] arr){ for(int i = 0; i \u0026lt; arr.length - 1; i++){ // iterate through each element(not the last one) in the array and add \u0026#34;, \u0026#34; after each element  System.out.print(arr[i] + \u0026#34;, \u0026#34;); } // print last element and newline character  System.out.println(arr[arr.length -1]); } Output:\nBirds Of Prey, The Birds, Angry Birds, Bird Box, The Secret Life of Pets ArrayList public static void printList(ArrayList\u0026lt;String\u0026gt; list){ // type here  for(int i = 0; i \u0026lt; list.size() - 1; i++){ // iterate through each element(not the last one) in the array and add \u0026#34;, \u0026#34; after each element  System.out.print(list.get(i) + \u0026#34;, \u0026#34;); } // print last element and newline character  System.out.println(list.get(list.size() -1)); } Output:\nBirds Of Prey, The Birds, Angry Birds, Bird Box, The Secret Life of Pets "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/answer-key/","title":"Pygame Pong game - Answer Key","tags":[],"description":"","content":"Activity 1 HEIGHT = 600 WIDTH = 800 Activity 2 COLOR = (70, 130, 180) Activity 3 self.paddles.append(Paddle( # The left paddle self.BALL_VELOCITY, pygame.K_w, pygame.K_s, 0, self.HEIGHT / 2 - self.PADDLE_HEIGHT / 2, self.PADDLE_WIDTH, self.PADDLE_HEIGHT )) Activity 4 self.paddles.append(Paddle( # The right paddle self.BALL_VELOCITY, pygame.K_UP, pygame.K_DOWN, self.WIDTH - self.PADDLE_WIDTH, self.HEIGHT / 2 - self.PADDLE_HEIGHT / 2, self.PADDLE_WIDTH, self.PADDLE_HEIGHT )) Activity 5 font_label = \u0026#39;arial\u0026#39; font_name = pygame.font.match_font(font_label) Activity 6 if ball.x \u0026lt; 0 self.RIGHTSCORE = self.RIGHTSCORE + 1 ball.x = self.BALLXSTARTPOSITION ball.y = self.BALLYSTARTPOSITION ball.velocity = self.BALL_VELOCITY ball.angle = self.BALL_ANGLE Activity 7 if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE: "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/answer-key/","title":"Answer Key - Web Basics","tags":[],"description":"","content":"Special note: This curriculum allows students to be creative. The below is just an example of what they can do, please use your best judgement and ask for guidance if needed. The answer key provided here is fairly long because we are including snippets of full HTML for context.\nWhen a student clicks on the \u0026lsquo;Try it yourself!\u0026rsquo; it\u0026rsquo;ll open a new tab with some of the HTML code (and CSS code) already scaffolded.\nChallenge 1 Solution should have:\n Header tags to add a title and the paragraph tags to write a paragraph about Benji. (optional) A list of Benji’s favorite treats: turkey, peanut butter, and string cheese  \u0026lt;head\u0026gt; \u0026lt;!--Challenge 1: Add title and header tags. --\u0026gt; \u0026lt;title\u0026gt;My exciting title!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--Content goes inside the body --\u0026gt; \u0026lt;!--Challenge 1: Add a header, a paragraph. --\u0026gt; \u0026lt;h1\u0026gt;About benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Benji is a cute pup. His favorite sport is fetch. He likes long walks in the woods. Once he found a big stick.\u0026lt;/p\u0026gt; \u0026lt;!--Challenge 1 (optional) Add a list. --\u0026gt; \u0026lt;h5\u0026gt; Benji\u0026#39;s favorite snacks \u0026lt;/h5\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Turkey\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Peanut Butter\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;String Cheese\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; Challenge 2 Solution should have:\n HTML: An id attribute to one of the header tag. For example, \u0026lt;header id=\u0026quot;page-title\u0026quot;\u0026gt; CSS: A different title color by adding color: yellow; inside the curly braces CSS: A different font by adding font-family: ‘Roboto Mono’, monospace; inside the curly braces and adding @import url(‘https://fonts.googleapis.com/css?family=Roboto+Mono\u0026rsquo;); at the top of the CSS tab  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!--Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--Challenge 2: page-title id attribute --\u0026gt; \u0026lt;header id=\u0026#34;page-title\u0026#34;\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;img id=\u0026#34;dog\u0026#34; src=\u0026#34;https://aka.ms/Benji-the-dog\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; @import url(\u0026#39;https://fonts.googleapis.com/css?family=Roboto+Mono\u0026#39;); #page-title { color: yellow; font-family: \u0026#39;Roboto Mono\u0026#39;, monospace; } Challenge 3 Nuevo Foundation GIFs: https://giphy.com/nuevofoundation\n Click on \u0026lsquo;embed\u0026rsquo; and copy the GIF embed code. Paste the GIF embed code anywhere in the \u0026lt;body\u0026gt; tag  Example iframe code:\n\u0026lt;iframe src=\u0026#34;https://giphy.com/embed/oywrR92C9YBlrSuUKP\u0026#34; width=\u0026#34;480\u0026#34; height=\u0026#34;480\u0026#34; frameBorder=\u0026#34;0\u0026#34; class=\u0026#34;giphy-embed\u0026#34; allowFullScreen\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://giphy.com/gifs/nuevofoundation-rockstar-nuvi-oywrR92C9YBlrSuUKP\u0026#34;\u0026gt;via GIPHY\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; Integrated into sample \u0026lsquo;Try it yourself code!':\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!--Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;!--Challenge 3: Paste your code here! --\u0026gt; \u0026lt;iframe src=\u0026#34;https://giphy.com/embed/oywrR92C9YBlrSuUKP\u0026#34; width=\u0026#34;480\u0026#34; height=\u0026#34;480\u0026#34; frameBorder=\u0026#34;0\u0026#34; class=\u0026#34;giphy-embed\u0026#34; allowFullScreen\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://giphy.com/gifs/nuevofoundation-rockstar-nuvi-oywrR92C9YBlrSuUKP\u0026#34;\u0026gt;via GIPHY\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Challenge 4 The contact form is already added for the students. They will simply need to modify their email in the email section and then alter any styling they want!\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--Challenge 4: Contact Form --\u0026gt; \u0026lt;div class=\u0026#34;contact-section\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Contact me\u0026lt;/h3\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;!--Change the following line --\u0026gt; \u0026lt;form action=\u0026#34;https://formspree.io/email@nuevofoundation.com\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Tell Benji who you are\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026#34;message\u0026#34;\u0026gt;Your message: \u0026lt;/label\u0026gt; \u0026lt;textarea name=\u0026#34;message\u0026#34; placeholder=\u0026#34;Tell me about you\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Hi!\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;img id=\u0026#34;dog\u0026#34; src=\u0026#34;https://aka.ms/Benji-the-dog\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; .contact-section { width: 250px; margin: 10px; padding: 10px; background-color: #FCFC69; /* Challenge 4: change the color here for styling */ } Challenge 5 No solution here - the students are creating their own sites based on what they learned. A few notes:\n Encourage students to use all of the different things they learned (ie. CSS, form, GIF) Encourage students to create something they would want to show other people.  Have fun!\n"},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/answer-key/","title":"C++ Secret Messages - Answer Key","tags":[],"description":"","content":"The following 5 lines are needed for all the activities.\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { return 0; } Activity 1 cout \u0026lt;\u0026lt; \u0026quot;Hello programmer!\u0026quot; \u0026lt;\u0026lt; endl; Activity 2  string name; cin \u0026gt;\u0026gt; name; cout \u0026lt;\u0026lt; \u0026quot;Hello \u0026quot; \u0026lt;\u0026lt; name \u0026lt;\u0026lt; endl; Activity 3 string name; cin \u0026gt;\u0026gt; name; for(int i=0; i\u0026lt;name.size(); i++){ cout \u0026lt;\u0026lt; name[i] \u0026lt;\u0026lt; endl; } Activity 4 int number; cin \u0026gt;\u0026gt; number; if(number == 1){ cout \u0026lt;\u0026lt; \u0026quot;Encrypt a message\u0026quot; \u0026lt;\u0026lt; endl; }else{ cout \u0026lt;\u0026lt; \u0026quot;Decrypt a message\u0026quot; \u0026lt;\u0026lt; endl; } Activity 5 #include \u0026lt;iostream\u0026gt; using namespace std; int main() { string code; string name; cin \u0026gt;\u0026gt; code; cin \u0026gt;\u0026gt; name; int counter = 0; for(int i=0; i\u0026lt;name.size(); i++){ int sum = name[i]+code[counter]-'a'; if(sum \u0026gt; 'z'){ sum-=25; } name[i]=sum; counter+=1; if(counter \u0026gt;= code.size()){ counter=0; } } cout \u0026lt;\u0026lt; \u0026quot;Encrypted message: \u0026quot; \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; endl; return 0; } Activity 6 #include \u0026lt;iostream\u0026gt; using namespace std; void encrypt (string \u0026amp;name, string code){ int counter = 0; for(int i=0; i\u0026lt;name.size(); i++){ int sum = name[i]+code[counter]-'a'; if(sum \u0026gt; 'z'){ sum-=25; } name[i]=sum; counter+=1; if(counter \u0026gt;= code.size()){ counter=0; } } } void decrypt (string \u0026amp;name, string code){ int counter = 0; for(int i=0; i\u0026lt;name.size(); i++){ int sum = name[i]-code[counter]+'a'; if(sum \u0026lt; 'a'){ sum+=25; } name[i]=sum; counter+=1; if(counter \u0026gt;= code.size()){ counter=0; } } } int main() { string code; string name; int number; cin \u0026gt;\u0026gt; number; cin \u0026gt;\u0026gt; code; cin \u0026gt;\u0026gt; name; if(number == 1){ cout \u0026lt;\u0026lt; \u0026quot;Encrypted message: \u0026quot; \u0026lt;\u0026lt; endl; encrypt(name, code); cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; endl; }else{ cout \u0026lt;\u0026lt; \u0026quot;Decrypted message: \u0026quot; \u0026lt;\u0026lt; endl; decrypt(name, code); cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; endl; } return 0; } Activity 7 #include \u0026lt;iostream\u0026gt; using namespace std; void encrypt (string \u0026amp;name, string code){ int counter = 0; for(int i=0; i\u0026lt;name.size(); i++){ if(name[i]!=' '){ int sum = name[i]+code[counter]-'a'; if(sum \u0026gt; 'z'){ sum-=25; } name[i]=sum; counter+=1; if(counter \u0026gt;= code.size()){ counter=0; } } } } void decrypt (string \u0026amp;name, string code){ int counter = 0; for(int i=0; i\u0026lt;name.size(); i++){ if(name[i]!=' '){ int sum = name[i]-code[counter]+'a'; if(sum \u0026lt; 'a'){ sum+=25; } name[i]=sum; counter+=1; if(counter \u0026gt;= code.size()){ counter=0; } } } } int main() { string code; string name; int number; cin \u0026gt;\u0026gt; number; cin \u0026gt;\u0026gt; code; getline(cin, name); if(number == 1){ cout \u0026lt;\u0026lt; \u0026quot;Encrypted message: \u0026quot; \u0026lt;\u0026lt; endl; encrypt(name, code); cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; endl; }else{ cout \u0026lt;\u0026lt; \u0026quot;Decrypted message: \u0026quot; \u0026lt;\u0026lt; endl; decrypt(name, code); cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; endl; } return 0; } "},{"uri":"https://nuevofoundation.github.io/workshops/python-guess-number/answer-key/","title":"Python Guess The Number - Answer Key","tags":[],"description":"","content":"Playing with randit import random number = random.randint(1,100) print(\u0026#34;your randomly generated number is\u0026#34;, number) Create the \u0026lsquo;Guess the number game\u0026rsquo; import random #Use the random.randint() function here to generate a number #Also define the number of guesses you want to allow here randomNumber = random.randint(1,10) guessesLeft = 3 #Create a loop here that repeatedly asks the player for a number and compares it to the random number #Remember to decrease the number of guesses left so the player doesn\u0026#39;t get unlimited tries! while guessesLeft \u0026gt; 0: print(\u0026#39;\\nGuess a number between 1 and 10:\u0026#39;) #Ask the user for input here print(\u0026#39;Please enter only numbers\u0026#39;) userinput = int(input()) #Compare the input you just received to randomNumber and give the player a hint whether they should guess lower or higher #If the guess is correct, remember to use break to exit the loop if userinput == randomNumber: print(\u0026#34;You guessed the right number! Congrats :)! Press \u0026#39;run\u0026#39;to play again\u0026#34;) break elif userinput \u0026gt; randomNumber: print(\u0026#34;Your number is too high. Try guessing lower.\u0026#34;) else: print(\u0026#34;Your number is too low. Try guessing higher.\u0026#34;) #decrease the number of tries the player has left guessesLeft = guessesLeft -1 #Check if the player ran out of guesses. If they ran out of guesses, tell them a message that they lost the game if guessesLeft == 0: print(\u0026#34;You ran out of guesses. :/ The correct number was \u0026#34; + str(randomNumber) + \u0026#34;!\u0026#34;) #OR (\u0026#34;You ran out of guesses. :/ The correct number was \u0026#34;, randomNumber) else: pass "},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/answer-key/","title":"Python Interactive - Answer Key","tags":[],"description":"","content":"Here is a full solution to the workshop. The solutions to each activity cannot stand alone so instead, there will be comments indicating where each activity\u0026rsquo;s solution is within the larger block of code.\n# Activity 2 dictMenu = {\u0026#39;Creamy Pesto Pasta\u0026#39;:[15.99, \u0026#39;Penne pasta tossed in a creamy pesto sauce, topped with black olives and sundried tomatoes\u0026#39;], \u0026#39;Spring Rolls\u0026#39;:[8.00, \u0026#39;Stir fried vegetables such as cabbage and carrot mixed with vermicelli and thin strips of fried tofu, wrapped in a crunchy outer layer. Provided with a creamy peanut sauce and sweet chili sauce on the side\u0026#39;]} # Activity 3 def printMenu(): print(\u0026#34;-----Menu-----\u0026#34;) for i in dictMenu: print(i+ \u0026#34;------ $\u0026#34;+str(dictMenu[i][0])) print(dictMenu[i][1]) print() # Activity 3 def orderFromRestaurantYN(): orderYN = input(\u0026#34;Would you like to order anything? (Enter Y/N): \u0026#34;) return orderYN # Activity 4 def orderItemChecking(item): if \u0026#39;-\u0026#39; not in item: return False itemNameAndQuantity = item.split(\u0026#39;-\u0026#39;) if itemNameAndQuantity[0] not in dictMenu: return False if int(itemNameAndQuantity[1]) \u0026lt;= 0: return False return True # Activity 4 def isOrderComplete(): answer = input(\u0026#34;Would you like to order another item? (Enter Y/N): \u0026#34;) while answer != \u0026#39;Y\u0026#39; and answer != \u0026#39;N\u0026#39;: answer = input(\u0026#34;Would you like to order another item? (Enter Y/N): \u0026#34;) if answer == \u0026#39;Y\u0026#39;: return True if answer == \u0026#39;N\u0026#39;: return False # Activity 5 def createDictOrderItems(orderItems): dictItems = {} for item in orderItems: itemName = item.split(\u0026#39;-\u0026#39;)[0] itemQuantity = int(item.split(\u0026#39;-\u0026#39;)[1]) if itemName not in dictItems: dictItems[itemName] = itemQuantity else: dictItems[itemName] += itemQuantity return dictItems # Activity 5 def computePrices(dictItems): dictItemAndPrice = {} for i in dictItems: totalItemPrice = dictItems[i] * dictMenu[i][0] dictItemAndPrice[i] = totalItemPrice return dictItemAndPrice # Activity 5 def computeTotalPrice(dictItemAndPrice): totalPrice = 0 for i in dictItemAndPrice: totalPrice += dictItemAndPrice[i] return round(totalPrice,2) # Activity 6 def printReceipt(dictItemAndPrice, totalPrice): print(\u0026#34;-----Receipt-----\u0026#34;) for i in dictItemAndPrice: print(i, \u0026#34;$\u0026#34;+str(dictItemAndPrice[i])) print(\u0026#34;Total Price: \u0026#34;, \u0026#34;$\u0026#34;+str(totalPrice)) def main(): # Activity 1 print(r\u0026#34;_ _ _ _ _ _ _ _ _ _ \u0026#34;) print(r\u0026#34;/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\\u0026#34;) print(r\u0026#34;( r | e | s | t | a | u | r | a | n | t )\u0026#34;) print(r\u0026#34;\\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \u0026#34;) # Activity 3 printMenu() orderYN = orderFromRestaurantYN() while orderYN != \u0026#39;Y\u0026#39; and orderYN != \u0026#39;N\u0026#39;: print(\u0026#34;Sorry! That\u0026#39;s not a valid answer, please try again.\u0026#34;) printMenu() orderYN = orderFromRestaurantYN() #Activity 4 listOrderItems = [] if orderYN == \u0026#39;N\u0026#39;: print(\u0026#34;Bye!\u0026#34;) else: customerOrder = input(\u0026#34;Please enter the name and quantity of the first item you would like to order. (Example order item: Spring Rolls-2):\u0026#34;) while orderItemChecking(customerOrder) == False: print(\u0026#34;That\u0026#39;s an invalid format. Try again.\u0026#34;) customerOrder = input(\u0026#34;Please enter the name and quantity of the first item you would like to order. (Example order item: Spring Rolls-2):\u0026#34;) listOrderItems.append(customerOrder) while isOrderComplete() == True: customerOrder = input(\u0026#34;Please enter the name and quantity of an item you would like to order. (Example order item: Spring Rolls-2):\u0026#34;) while orderItemChecking(customerOrder) == False: print(\u0026#34;That\u0026#39;s an invalid format. Try again.\u0026#34;) customerOrder = input(\u0026#34;Please enter the name and quantity of an item you would like to order. (Example order item: Spring Rolls-2):\u0026#34;) listOrderItems.append(customerOrder) # Activity 5 dictItems = createDictOrderItems(listOrderItems) dictItemAndPrice = computePrices(dictItems) totalPrice = computeTotalPrice(dictItemAndPrice) # Activity 6 printReceipt(dictItemAndPrice, totalPrice) # Activity 7 print(\u0026#34;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \u0026#34;) print(\u0026#34;/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\/ \\\u0026#34;) print(\u0026#34;( T | h | a | n | k | s ) ( f | o | r ) ( c | o | m | i | n | g | ! )\u0026#34;) print(\u0026#34;\\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \u0026#34;) main() "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/answer-key/","title":"Python Turtle - Answer Key","tags":[],"description":"","content":"The below 3 lines are needed for the introduction activity and all the other activities as well.\nimport turtle turtle.color(\u0026#34;orange\u0026#34;) turtle.shape(\u0026#34;turtle\u0026#34;) Introduction Activity turtle.color(\u0026#34;orange\u0026#34;) turtle.forward(50) Activity 1 turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) Activity 2 for i in range(4): turtle.forward(50) turtle.left(90) Activity 3 for i in range(6): turtle.forward(50) turtle.left(60) Activity 4 def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) draw_hexagon() Activity 5 def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.forward(50) turtle.right(60) draw_honeycomb() Activity 6 turtle.penup() turtle.goto(300, 300) turtle.pendown() Activity 7 def figure_8(): turtle.circle(50) turtle.circle(-50) figure_8() Activity 8 def mandala_flower(): for i in range(35): figure_8() turtle.right(10) mandala_flower() Activity 9 def mandala_flower(): turtle.color(30, 100, 160) for i in range(35): figure_8() turtle.right(10) mandala_flower() Activity 10 def mandala_flower(): for i in range(35): turtle.color(random.randint(0, 256),random.randint(0, 256), random.randint(0, 256)) figure_8() turtle.right(10) mandala_flower() "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-5/","title":"Activity 5 - Use conditional statements","tags":[],"description":"","content":"Activity 5 This activity is split into two parts. Use your knowledge of if-else statements to complete the activities. As always, press run after completing each part to check for errors.\nActivity 5.1 After the player guesses a letter, and we have checked whether the letter appears in the word, we need to check if the entire word has been guessed. If the entire word has been correctly identified, we should let the computer know that the player has won the game. Use an if-statement to change the value of the won variable only if the number of letters correctly guessed equals the number of letters in the word to guess.\nActivity 5.2 At the end of the game, we should let the player know if they won or lost the game.\n If the player has won the game, print out to console You won!. Else, tell the player that they lost, and print out the correct answer. For example, if the player could not guess the correct answer \u0026quot;Hello\u0026quot;, print out You lost! The answer was 'Hello'.  To test both parts of the activity, set the word bank to only contain one two-letter word (see Activity 2 if you forget how to do this). Press run, and correctly guess the word when playing the game. Make sure You won! is printed out. Run again, and check that You lost!is printed out when you lose the game.\n"},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-9/","title":"Activity 9 - Adding Score, Levels, and Lives","tags":[],"description":"","content":"Now, we will add some numbers to quantify our game! The easiest one to implement is the score. Create a text variable on the top left of the screen that displays Score:  and the value of a num variable that stores the player\u0026rsquo;s score.\nthis.scoreText = this.add.text(20, 10, \u0026#34;Score: \u0026#34; + this.score, { font: \u0026#34;25px Arial\u0026#34;, fill: \u0026#34;white\u0026#34; }); this line print score variable at the top left of the screen.\n 20 and 10 is the x and y value \u0026quot;score\u0026quot; + this.score is the text value \n you can fill this line to this location after you create score value:\nJust add a score variable and some text to the screen that displays \u0026ldquo;Score: \u0026lsquo;score variable\u0026rsquo;\u0026quot;. We will update the hitEnemy() function so that the player will earn points to their score if they defeat an enemy:\nNow we will add levels. We will initialize it the same way we did for the score, but this time we will print it to the middle of the screen instead of the top left:\nWe will make levels pretty simple: whenever the player destroys all of the enemies, the next level will be reached, respawning all of the enemies. In order to make each level more difficult than the last, we will make the enemies shoot more often. To make the enemies shoot more often, let’s create a difficulty variable and use that when we make the enemies randomly shoot.\nWith this setup, by changing the difficulty variable, we change how often the enemies shoot. A lower difficulty will make the game harder because it will make the probability that an enemy shoots harder.\nNow to make the level update when the player destroys all of the enemies, we will create a levelClear() method that will update the difficulty variable, reset the enemy timer, create new enemies (by calling createEnemies()), and update the level text on screen :\nNote how we have to create a new timer every time we create new enemies or else the enemies and timer might not be in sync. Also, we recommend decrementing the difficulty variable less when we reach 200 because the difficulty ramps up much quicker at that point.\nDon\u0026rsquo;t forgot to update levelClear() in update():\nNow, we will add lives. We will again use a similar method to initialize it and put it on the top right of the screen:\nNow, in order to lose a life whenever you get hit, now let’s add this code to hurtPlayer():\nHowever, in order for the lives to mean anything, let’s make it a Game Over when the player. We will start by making some text that’s invisible on the screen in the create() method:\nWe will make this text visible when it is a game over. We will do this in the hurtPlayer() method:\nThis makes the character not spawn, show the game over text, and restart the game if the player clicks on the screen.\nOnly thing now is that we need to create the restart() method that this code refers to:\nThis resets everything to start the game over\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/while-loops/","title":"While loops","tags":[],"description":"","content":"While loops while loops are an easy way to repeat the execution of lines without having to reuse a line many times. For example, to print Hello World five times in a row, you can do:\nvar counter = 1; while (counter \u0026lt;= 5) { Console.WriteLine(\u0026#34;Hello World\u0026#34;); counter = counter + 1; } Like an if statement, inside the () beside while, you should specify a boolean expression. If the expression is true, the code inside the curly braces { } is executed. However, after everything inside the curly braces is executed, we go back to the top of the while loop and check the boolean expression again. If the boolean expression continues to be true, the loop will be repeated.\nYou can also place if statements in while loops to do some interesting behavior:\nvar counter = 1; while (counter \u0026lt;= 10) { if (counter \u0026lt; 5) { Console.WriteLine(\u0026#34;Smaller than 5!\u0026#34;); } else { Console.WriteLine(\u0026#34;Greater than or equal to 5!\u0026#34;); } counter = counter + 1; } Here is an example of an infinite loop - do you see what\u0026rsquo;s wrong? What can you do so that the following piece of code prints Spam! only 100 times?\nvar counter = 100; while (counter \u0026gt; 0) { Console.WriteLine(\u0026#34;Spam!\u0026#34;); } Working Together Take your code from the previous activity. Let\u0026rsquo;s expand the code so that instead of the program finishing after the user inputs once, allow the user to answer the question 10 times before exiting. Be careful about infinite loops!\n "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/activity-10/","title":"Activity 10 - Adding a Title Screen","tags":[],"description":"","content":"Now, we will put our separation of scene 1 and scene 2 to good use by adding a title screen to finish off our game!\nThis is very simple! we will first comment out startGame() line from the bottom of create() in Scene 1. We are going to use startGame() function to start game instead of start automatically as before:\nThe console will go back to a black canvas. To make a title screen, we need to import the background screen and some text in start page section from scene 1:\nYou can only create background as an image in create(), because images can only be moved in update() functions!\nFor the texts, We would recommend different font and fills for title text and start text.\nNow, we will call the startGame() method only if the player clicks to start the game:\nYour screen should look similar like this: Congratulations! You have now compeleted all the lessons and created your own space invader game! Have fun with it!\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-6/","title":"Activity 6 - Complete the game!","tags":[],"description":"","content":"Instructions Now, let\u0026rsquo;s finally address the bug that was introduced in Activity 4.2. The game should continue to ask the player to guess letters if they have some lives remaining, and they have not yet won the game. Look at the for loop. As you might have noticed, even though you might have lives remaining, the game abruptly stops after only 3 guesses. We will replace this for-loop with a while-loop, with the correct looping condition. Use the given hint to complete the activity.\n"},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/answer-key/","title":"Answer Key - Python Image Manipulation","tags":[],"description":"","content":"Python Basic Answers: Activity 1: # The sentences can be anything! Encourage having fun with it. print(\u0026#34;My name is Nuvi!\u0026#34;) print(\u0026#34;I love making memes.\u0026#34;) Activity 2: # There can be a variety of answers, here are a few:  print(\u0026#34;Nuevo\u0026#34; + \u0026#34;\u0026#34; + \u0026#34;Foundation\u0026#34;) print(\u0026#34;Nu\u0026#34; + \u0026#34;evo\u0026#34; + \u0026#34;Found\u0026#34; + \u0026#34;ation\u0026#34;) print(\u0026#34;N\u0026#34; + \u0026#34;uevo F\u0026#34; + \u0026#34;oundation\u0026#34;) Activity 3: print(2-19) # -17 print((3 + 5) * 6) # 48 print((13 + 5 * 8) / (6 - (3 + 7))) # -13.25 Challenge:\nprint(\u0026#34;527 times 199 is: \u0026#34; + str(527*199)) # Answer: 104873 Activity 4 print(54 \u0026lt; (10 + 32)) # False print((37 / 5) != 7) # True print(\u0026#34;Hello\u0026#34; + \u0026#34;World\u0026#34; == \u0026#34;Hello World\u0026#34;) # False print(False == False) # True Activity 5 comp = \u0026#34;Computer\u0026#34; five = 5 print(comp) print(five) print(comp + comp) print(five + five) print(comp + comp + comp) print(five + five + five) # If advanced student, try with multiplication. Ex: print(five * 5) # 25 print(comp * 5) # ComputerComputerComputerComputerComputer Activity 6 print(\u0026#34;Welcome!\u0026#34;) print(\u0026#34;How can I help you today?\u0026#34;) value = input() # ex. \u0026#34;How old am I?\u0026#34; print(\u0026#34;You asked: \u0026#34; + value + \u0026#34;?\u0026#34;) print(\u0026#34;I don\u0026#39;t know the answer to \u0026#34; + value + \u0026#34;. Goodbye!\u0026#34;) Activity 7 def add(number1, number2): return number1 + number2 value2 = add(2, 3) print(\u0026#34;This should print 5: \u0026#34; + str(value2)) Challenge: def subtraction(number1, number2): return number1 - number2 def multiply(number1, number2): return number1 * number2 def divide(number1, number2): return number1 / number2 value3 = subtraction(8,5) print(\u0026#34;This should print 3: \u0026#34; + str(value3)) value4 = multiply(3,5) print(\u0026#34;This should print 15: \u0026#34; + str(value4)) value5 = divide(12,3) print(\u0026#34;This should print 4: \u0026#34; + str(value5)) Image Manipulation Debugging If using Python3, you may need to manually install the image package. To do this, go on the left side of repl.it, find the cube (\u0026lsquo;packages\u0026rsquo;) and search for Pillow 7.1.2 and click the + icon. This should automatically kick off installation. When done, try running the import statements below.\nThe activities below are already described in the curriculum with the example answers. Repeated here for ease of access.\nActivity 1: Open an Image The student can pick any image they want as long as it is appropriate. They can also use the default cat image provided.\n Find a picture student likes. Download it Save as JPG/PNG with easy name Upload this as another file in the repl.it window  from PIL import Image from PIL import ImageFilter image = Image.open(\u0026#34;cat.jpg\u0026#34;) image.save(\u0026#34;myCat.jpg\u0026#34;) The image.save() function allows the student to see the image that they uploaded. They will see a new file on the left pop up with the image (ie. in this example, \u0026lsquo;myCat.png\u0026rsquo;).\nActivity 2: Rotate the Image Rotate the image upside down example:\nfrom PIL import Image from PIL import ImageFilter image = Image.open(\u0026#34;cat.jpg\u0026#34;) image = image.rotate(180) image.save(\u0026#34;myCat.jpg\u0026#34;) Activity 3: Image Filters Add to existing code.\nfrom PIL import Image from PIL import ImageFilter # Activity 2 image = Image.open(\u0026#34;cat.jpg\u0026#34;) image = image.rotate(180) image.save(\u0026#34;myCat.jpg\u0026#34;) # Activity 3 blurredImage = image.filter(ImageFilter.BLUR) # alt: blurredImage = image.filter(ImageFilter.BoxBlur(15)) blurredImage.save(\u0026#34;myCatBlurred.jpg\u0026#34;) greyscaleImage = blurredImage.convert(\u0026#34;L\u0026#34;) greyscaleImage.save(\u0026#34;myCatBW.jpg\u0026#34;) Activity 4: from PIL import Image from PIL import ImageFilter from PIL import ImageDraw # add this line # Activity 2 image = Image.open(\u0026#34;cat.jpg\u0026#34;) image = image.rotate(180) image.save(\u0026#34;myCat.jpg\u0026#34;) # Activity 3 blurredImage = image.filter(ImageFilter.BLUR) blurredImage.save(\u0026#34;myCatBlurred.jpg\u0026#34;) greyscaleImage = blurredImage.convert(\u0026#34;L\u0026#34;) greyscaleImage.save(\u0026#34;myCatBW.jpg\u0026#34;) # Activity 4 drawnImage = ImageDraw.Draw(greyscaleImage) drawnImage.text((200,20), \u0026#34;When you realize you learned python in an hour.\u0026#34;) greyscaleImage.save(\u0026#34;myCatWithText.jpg\u0026#34;) Full code: from PIL import Image from PIL import ImageFilter from PIL import ImageDraw from PIL import ImageFont from PIL import ImageChops # extra image = Image.open(\u0026#34;cat.jpg\u0026#34;) # rotation image image = image.rotate(180) image.save(\u0026#34;myCat.jpg\u0026#34;) # filter image blurredImage = image.filter(ImageFilter.BoxBlur(15)) # alt: blurredImage = image.filter(ImageFilter.BLUR) blurredImage.save(\u0026#34;myCatBlurred.jpg\u0026#34;) # black and white cat greyscaleImage = blurredImage.convert(\u0026#34;L\u0026#34;) greyscaleImage.save(\u0026#34;bwBlurredCat.jpg\u0026#34;) # add text (no specific font) # drawImage = ImageDraw.Draw(greyscaleImage) # drawImage.text((400,1200), \u0026#34;Whatchu doing? Coding?\u0026#34;) # greyscaleImage.save(\u0026#34;myCatWithText.jpg\u0026#34;) # add text (with font) drawImage = ImageDraw.Draw(greyscaleImage) font = ImageFont.truetype(font = \u0026#39;Roboto-Bold.ttf\u0026#39;, size=75) drawImage.text((400,1200), \u0026#34;Whatchu doing? Coding?\u0026#34;, font=font) greyscaleImage.save(\u0026#34;myCatWithText.jpg\u0026#34;) # extra: invert image! Another thing they can do if time. inv_img = ImageChops.invert(greyscaleImage) inv_img.save(\u0026#34;invertedImage.jpg\u0026#34;) "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/answer-key/","title":"Answer Key - C# Guess the Word","tags":[],"description":"","content":"Activity 1: using System; class MainClass { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello there\u0026#34;); Console.WriteLine(\u0026#34;I am awesome\u0026#34;); } } Activity 2: using System; class MainClass { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Nuevo\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Foundation\u0026#34;); Console.WriteLine(\u0026#34;Nue\u0026#34; + \u0026#34;vo \u0026#34; + \u0026#34;Foundation\u0026#34;); Console.WriteLine(\u0026#34;Nuevo \u0026#34; + \u0026#34;Foun\u0026#34; + \u0026#34;dation\u0026#34;); } } Activity 3: class MainClass { public static void Main(string[] args) { Console.WriteLine(2-19); Console.WriteLine((3+5)*6); Console.WriteLine((13+5*8)/(6-(3+7))); } } Activity 4: class MainClass { public static void Main(string[] args) { Console.WriteLine(54 \u0026lt; (10 + 32)); Console.WriteLine((37 / 5) == 7 ); Console.WriteLine(\u0026#34;Hello\u0026#34; + \u0026#34;World\u0026#34; == \u0026#34;Hello World\u0026#34;); Console.WriteLine(false == false); Console.WriteLine((11 - 2 \u0026lt; 10) \u0026amp;\u0026amp; (7 + 3 \u0026gt; 10)); Console.WriteLine((true || 3 \u0026lt; 1) \u0026amp;\u0026amp; (false || 3 \u0026gt; 1)); } } Activity 5: using System; class MainClass { public static void Main(string[] args) { var comp = \u0026#34;Computer\u0026#34;; var five = 5;\tConsole.WriteLine(comp); Console.WriteLine(five); Console.WriteLine(comp + comp); Console.WriteLine(five + five); Console.WriteLine(comp + comp + comp); Console.WriteLine(five + five + five); } } Activity 6: using System; class MainClass { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Welcome!\u0026#34;); Console.WriteLine(\u0026#34;How can I help you today?\u0026#34;); var input = Console.ReadLine(); Console.WriteLine(\u0026#34;You asked: \u0026#34; + input); Console.WriteLine(\u0026#34;I don’t know the answer to that! Goodbye!\u0026#34;); } } "},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/answer-key/","title":"Answer Key - Phaser Space Invaders Game","tags":[],"description":"","content":"Activity 1 Scene1.js\npreload(){ this.load.image(\u0026#34;background\u0026#34;, \u0026#34;assets/space.png\u0026#34;); this.load.spritesheet(\u0026#39;player\u0026#39;, \u0026#39;assets/player.png\u0026#39;, { frameWidth: 32, frameHeight: 48 }); } Scene2.js\ncreate(){ this.background = this.add.image(config.width/2, config.height/2, \u0026#34;background\u0026#34;); this.player = this.physics.add.sprite(config.width / 2, config.height - 75, \u0026#34;player\u0026#34;); } Activity 2 Scene1.js\ncreate(){ this.anims.create({ key: \u0026#34;player_anim\u0026#34;, frames: this.anims.generateFrameNumbers(\u0026#34;player\u0026#34;), frameRate: 20, repeat: -1 }); } Scene2.js\ncreate(){ // delete your previous background code and create it again as a tile sprite  this.background = this.add.tileSprite(0, 0, config.width, config.height, \u0026#34;background\u0026#34;); this.background.setOrigin(0, 0); this.player.anims.play(\u0026#34;player_anim\u0026#34;); } update(){ this.background.tilePositionY -= 0.5; } Activity 3 Scene2.js\ncreate(){ this.player.body.setCollideWorldBounds(true); // player cannot go out of screen  this.cursors = this.input.keyboard.createCursorKeys(); } update(){ this.movePlyaer(); } movePlayer(){ //move left and right  if(this.cursors.left.isDown){ this.player.body.setVelocityX(-gameSettings.playerSpeed); } else if(this.cursors.right.isDown){ this.player.body.setVelocityX(gameSettings.playerSpeed); } else { this.player.body.setVelocityX(0) } //move up and down  if(this.cursors.up.isDown){ this.player.body.setVelocityY(-gameSettings.playerSpeed); } else if(this.cursors.down.isDown){ this.player.body.setVelocityY(gameSettings.playerSpeed); } else { this.player.body.setVelocityY(0) } } Activity 4 Scene1.js\npreload(){ this.load.spritesheet(\u0026#39;enemies\u0026#39;, \u0026#39;assets/enemies.png\u0026#39;, { frameWidth: 32, frameHeight: 32 }); } Scene2.js\ncreate(){ this.enemies = this.physics.add.group(); this.createEnemies(); } createEnemies(){ for(var y = 0; y \u0026lt; 3; y++) { for(var x = 0; x \u0026lt; 6; x++) { var enemy = this.enemies.create((x + 1) * (config.width / 7), (y + 1) * 50, \u0026#39;enemies\u0026#39;); } } } Activity 5 Scene1.js\ncreate(){ this.anims.create({ key: \u0026#34;enemies_anim\u0026#34;, frames: this.anims.generateFrameNumbers(\u0026#34;enemies\u0026#34;), frameRate: 20, repeat: -1 }); } Scene2.js\ncreateEnemies(){ for(var y = 0; y \u0026lt; 3; y++) { for(var x = 0; x \u0026lt; 6; x++) { var enemy = this.enemies.create((x + 2) * (config.width / 7) - 10, (y + 1) * 50, \u0026#39;enemies\u0026#39;); enemy.body.velocity.x = -90; enemy.anims.play(\u0026#34;enemies_anim\u0026#34;); } } this.enemyTimer = this.time.addEvent({ delay: 1500, callback: this.changeEnemyDirection, callbackScope: this, loop: true }); } changeEnemyDirection() { for(var i = 0; i \u0026lt; this.enemies.getChildren().length; i++) { var enemy = this.enemies.getChildren()[i]; enemy.body.velocity.x *= -1; } } Activity 6 Scene1.js\ncreate(){ this.load.spritesheet(\u0026#39;explosion\u0026#39;, \u0026#39;assets/explosion.png\u0026#39;, { frameWidth: 32, frameHeight: 32 }); this.anims.create({ key: \u0026#34;explode\u0026#34;, frames: this.anims.generateFrameNumbers(\u0026#34;explosion\u0026#34;), frameRate: 20, repeat: 0, hideOnComplete: true }); } Scene2.js\ncreate(){ this.physics.add.overlap(this.player, this.enemies, this.hurtPlayer, null, this); } hurtPlayer(){ var explosionPlayer = new Explosion(this, player.x, player.y); var explosionEnemy = new Explosion(this, enemy.x, enemy.y); enemy.destroy(); player.disableBody(true, true); this.time.addEvent({ delay: 1000, callback: this.resetPlayer, callbackScope: this, loop: false }) } Explosion.js\nconstructor(scene,x,y){ super(scene, x, y, \u0026#34;explosion\u0026#34;); scene.add.existing(this); this.play(\u0026#34;explode\u0026#34;); } Activity 7 Scene1.js\ncreate(){ this.load.spritesheet(\u0026#39;laser\u0026#39;, \u0026#39;assets/laser.png\u0026#39;, { frameWidth: 16, frameHeight: 16 }); this.anims.create({ key: \u0026#34;laser_anim\u0026#34;, frames: this.anims.generateFrameNumbers(\u0026#34;laser\u0026#34;), frameRate: 20, repeat: -1 }); } Scene2.js\ncreate(){ this.projectiles = this.add.group(); this.physics.add.overlap(this.projectiles, this.enemies, this.hitEnemy, null, this); this.spacebar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE); } update(){ this.playerShoot(); for(var i = 0; i \u0026lt; this.projectiles.getChildren().length; i++) { var laser = this.projectiles.getChildren()[i]; laser.update(); } } playerShoot(){ if (Phaser.Input.Keyboard.JustDown(this.spacebar)) { if(this.player.active) { var playerBullet = new PlayerBullet(this); this.projectiles.add(playerBullet); //add to group  } } } hitEnemy(projectile, enemy) { var explosion = new Explosion(this, enemy.x, enemy.y); projectile.destroy(); enemy.destroy(); this.score += 15; this.scoreText.text = \u0026#34;Score \u0026#34; + this.score; } PlayerLaser.js\nconstructor(scene) { var x = scene.player.x; var y = scene.player.y; super(scene, x, y, \u0026#34;playerLaser\u0026#34;); scene.add.existing(this); this.play(\u0026#34;laser_anim\u0026#34;); scene.physics.world.enableBody(this); this.body.velocity.y = -250; } update(){ if (this.y \u0026lt; 10) { this.destroy(); } } Activity 8 Scene2.js\ncreate(){ this.enemyProjectiles = this.add.group(); this.physics.add.overlap(this.player, this.enemyProjectiles, this.hurtPlayer, null, this); } update(){ this.enemyShoot(); for(var i = 0; i \u0026lt; this.enemyProjectiles.getChildren().length; i++) { var beam = this.enemyProjectiles.getChildren()[i]; beam.update(); } } enemyShoot() { for(var i = 0; i \u0026lt; this.enemies.getChildren().length; i++) { //goes through every single enemy \tvar randomEnemyShoot = Phaser.Math.Between(1, 1000); if (randomEnemyShoot == 1) { //10% chance to shoot \tvar laser = new EnemyLaser(this, this.enemies.getChildren()[i]); this.enemyProjectiles.add(laser); } } } EnemyLaser.js\nconstructor(scene, enemy) { var x = enemy.x; var y = enemy.y; super(scene, x, y, \u0026#34;laser\u0026#34;); scene.add.existing(this); this.play(\u0026#34;laser_anim\u0026#34;); scene.physics.world.enableBody(this); this.body.velocity.y = 250; } update(){ if (this.y \u0026gt; 600) { this.destroy(); } } Activity 9 Scene2.js\ncreate(){ ///// Score ///// \tthis.score = 0; this.scoreText = this.add.text(20, 10, \u0026#34;Score \u0026#34; + this.score, { font: \u0026#34;25px Arial\u0026#34;, fill: \u0026#34;white\u0026#34; }); ///// Lives ///// \tthis.lives = 3; this.livesText = this.add.text(410, 10, \u0026#34;Lives: \u0026#34; + this.lives, { font: \u0026#34;25px Arial\u0026#34;, fill: \u0026#34;white\u0026#34; }); ///// GameOver /////  this.gameOverText = this.add.text(120, 200, \u0026#34;\u0026#34;, { font: \u0026#34;40px Arial\u0026#34;, fill: \u0026#34;white\u0026#34;, }); this.gameOverText.text = \u0026#34;Game Over! \\nClick to restart!\u0026#34;; this.gameOverText.setVisible(false); this.gameOverText.setDepth(0); ///// Levels /////  this.level = 1; this.levelText = this.add.text(210, 10, \u0026#34;Level: \u0026#34; + this.level, { font: \u0026#34;25px Arial\u0026#34;, fill: \u0026#34;white\u0026#34; }); this.difficulty = 1000; } update(){ this.levelClear(); } hurtPlayer(player, enemy) { // delete the previous timer put it within this if-else statement \tif (this.lives \u0026gt;= 1) { this.time.addEvent({ delay: 1000, callback: this.resetPlayer, callbackScope: this, loop: false }) } else if (this.lives \u0026lt; 1) { this.gameOverText.setVisible(true); this.gameOverText.setDepth(1); this.input.once(\u0026#34;pointerdown\u0026#34;, this.restart, this); } } restart() { this.lives = 3; this.livesText.text = \u0026#34;Lives: \u0026#34; + this.lives; this.score = 0; this.scoreText.text = \u0026#34;Score: \u0026#34; + this.score; this.level = 1; this.difficulty = 1000; this.levelText.text = \u0026#34;Level: \u0026#34; + this.level; this.enemyProjectiles.clear(true, true); this.enemies.clear(true, true); this.enemyTimer.remove(); this.createEnemies(); this.resetPlayer(); this.gameOverText.setVisible(false); } levelClear() { if(this.enemies.getChildren().length == 0) { this.level += 1; this.levelText.text = \u0026#34;Level: \u0026#34; + this.level; this.enemyTimer.remove(); this.createEnemies(); if(this.difficulty \u0026gt; 200) { this.difficulty -= 100 } else if(this.difficulty \u0026lt;= 200) { this.difficulty -= 10 } } } Activity 10 Scene1.js\ncreate(){ this.back = this.add.image(config.width/2, config.height/2, \u0026#34;background\u0026#34;); this.titleText = this.add.text(130, 230, \u0026#34;Space Invader\u0026#34;, { font: \u0026#34;40px Arial\u0026#34;, fill: \u0026#34;white\u0026#34;, }); this.startText = this.add.text(190, 270, \u0026#34;Click to Start\u0026#34;, { font: \u0026#34;20px Arial\u0026#34;, fill: \u0026#34;yellow\u0026#34;, }); // replace the start game statement you had before with this one \tthis.input.on(\u0026#34;pointerdown\u0026#34;, this.startGame, this); } "},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/project-overview/","title":"Project Overview","tags":[],"description":"","content":"Applications like Instagram and Snapchat allow its users to modify their images. For example, you can rotate your image and make it black and white. Ever wondered how these apps do it? The answer is using code!\nToday, we’re going to learn how to do some image manipulations using Python!\nSetting up the project To get started let’s start with importing a module. What does that mean? To do fun stuff with images, we need to unlock some functions to use. To get these functions we need to import a module. In this case if we import the module Pillow, we can use some functions that will help us modify images.\nFirstly, let’s delete everything in the main.py file. Then, add the following statements:\nfrom PIL import Image from PIL import ImageFilter Once you hit run, you should see the module being installed in the console:\nIf you see the above, it means you have successfully imported a module! If you’re hitting issues, please ask for help before moving on.\nIf you’re curious to see what functions there are in the Pillow Image module, you find information about it here: https://pillow.readthedocs.io/en/latest/handbook/index.html.\n "},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/open-image/","title":"Open an image","tags":[],"description":"","content":"To change an image, we must open an image. We can use the Pillow Image module we just imported in the setup. Let’s first find some images to open. Find an image of your choice and download it. You can also use the one we use in this workshop: Click to download.\nOnce you have downloaded it, navigate back to your repl.it window and upload your image by clicking on the three dots and selecting ‘upload file’.\nFor example, to upload the cat.jpg file:\nYou should see the JPG file on the left side once you’ve uploaded it. Note, your image may have a different extension.\nNext step is to open that image within code. There are functions within the Pillow Image module we imported that allow us to do this.\nTo open and show the image you downloaded, do the following:\nimage = Image.open(\u0026#34;cat.jpg\u0026#34;) image.save(\u0026#34;myCat.jpg\u0026#34;) If you are using a different image, then make sure you put the name of the file within the quotes. The code above opens the JPG image and stores that image in the variable image. To check that the image variable has the image, we can then save it as a new image. This way the image will show in the window.\nHit run and see your image appear! My image looks like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/rotate-image/","title":"Rotate the image","tags":[],"description":"","content":"Now that we have the image in our code, let’s turn it in different directions. To do that, let’s look at the Pillow Image function rotate().\nThe rotate image works using angles. For example, rotate(45) will tilt your picture sideways by 45 degrees. Using rotate(90) will turn your picture sideways.\nLet’s give that a try! Let’s rotate the image before we save it:\nimage = Image.open(\u0026#34;cat.jpg\u0026#34;) image.rotate(90) image.save(\u0026#34;myCat.jpg\u0026#34;) Hmm, the picture didn’t seem to rotate. Why? Well, the image we opened is saved in the image variable. When we rotate the picture, we don’t save the rotated picture in any variable, so our code doesn’t save the rotated image.\nLet’s do this instead:\nimage = Image.open(\u0026#34;cat.jpg\u0026#34;) image = image.rotate(90) image.save(\u0026#34;myCat.jpg\u0026#34;) Challenge Can you turn this image all the way around? Can you turn the image 3/4ths of the way around without using an angle \u0026gt; 180? (Hint: try using negative angle numbers!)\nRotated all the way around, my image looks like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/image-filters/","title":"Image Filters","tags":[],"description":"","content":"I want to turn my cat black and white! Let\u0026rsquo;s do this by using the Pillow ImageFilter function filter() \u0026amp; convert().\nTo use the filter() function, you can specify the ImageFilter type within the parentheses. For example, image.filter(ImageFilter.BLUR)  will make the image blurry. Or, if you use ImageFilter.CONTOUR instead, it will add a ‘sketch’ type effect to your image.\nAdd something like this below your previously added code\nblurredImage = image.filter(ImageFilter.BLUR) blurredImage.save(\u0026#34;myCatBlurred.jpg\u0026#34;) You should see the saved cat image is blurred. Try this with a few other image filters until you find one you like!\nI want to make my image a little extra blurry, so I\u0026rsquo;m going to use ImageFilter.BoxBlur(15) as my filter instead of ImageFilter.BLUR. My blurred and rotated image now looks like this: Next, I want to make my image black and white. To do this, we can use the convert() function. To use this function, you can specify the mode you want to convert your image to. The most common ones are \u0026quot;L\u0026quot;, which converts an image to greyscale, and “RGB” which converts an image to its true color.\nLet’s try it out like this:\ngreyscaleImage = image.convert(\u0026#34;L\u0026#34;) greyscaleImage.save(\u0026#34;bwBlurredCat.jpg\u0026#34;) My cat now looks something like this – purrfect! "},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/making-meme/","title":"Making a meme!","tags":[],"description":"","content":"So now that my image looks how I want it to look, I want to add some text. We can do that by utilizing the Pillow ImageDraw module. Let’s import that at the top of our file along with our other import statements.\nfrom PIL import Image from PIL import ImageFilter from PIL import ImageDraw To allow us to add text, we must redraw the same image we used earlier for image manipulation. Let’s do that using the draw() function, which takes in an image object. Once the image is drawn, we can then add text to it by using the text() method to set the text of the image. The text is drawn based on coordinates provided. The function takes in two mandatory parameters: the xy coordinates and the text needed.\nFor example:\ndrawnImage = ImageDraw.Draw(greyscaleImage) drawImage.text((400,1200), \u0026#34;Whatchu doing? Coding?\u0026#34;) greyscaleImage.save(\u0026#34;myCatWithText.jpg\u0026#34;) My image now looks like this: Hmm, the text seems really small! You can see that the text in the image created above is in a small, default font. There are other parameters within the text() method you can use. Specifically, we can set the font! To do so, we need to use something called TTF file, which defines a font for us.\nTo start, you can use the font we use in this workshop: Click to download.\nTo use this font, you can do the following:\n Upload the TTF file to repl.it in the same place as your code. In your main.py file, we need to add a few more things to use the font within our meme. First, at the top of the file, add another import line to use the ImageFont library.  from PIL import Image from PIL import ImageFilter from PIL import ImageDraw from PIL import ImageFont  Further down in the code, where you are adding the text to the image, you want to add another line in between to set the font, then pass that font into the text() function.  For example:\ndrawnImage = ImageDraw.Draw(greyscaleImage) font = ImageFont.truetype(font = \u0026#39;Roboto-Bold.ttf\u0026#39;, size=75) drawImage.text((400,1200), \u0026#34;Whatchu doing? Coding?\u0026#34;, font=font) greyscaleImage.save(\u0026#34;myCatWithText.jpg\u0026#34;) Once I rerun my code, my image now looks like this: Want to pick your own font? Take a look at the documentation and see if you can change the font and the font size, as well as the color of the text!\nChanging the font requires downloading a .ttf (aka a font file) from online. A good place to find fonts is Google Fonts. What you need to do is:\n Find a font you like (i.e., Roboto). Click the font, and then click \u0026ldquo;Download Family\u0026rdquo; at the top right.  A ZIP file will be downloaded locally. Open or extract the folder, find a font you want to use (i.e., Roboto Bold) and upload that file (TTF) to repl.it.\n   text() method you can use. Take a look at the [documentation](https://pillow.readthedocs.io/en/stable/reference/ImageDraw.html#PIL.ImageDraw.PIL.ImageDraw.ImageDraw.text) and see if you can change the font and the font size, as well as the color of the text! This will require downloading a .ttf (aka a font file) from online! Ask for help if you have any questions.\n -- "},{"uri":"https://nuevofoundation.github.io/workshops/debugging/e2-binary-heap/","title":"Exercise 2 - Binary Heap Implementation","tags":[],"description":"","content":"A binary heap is an important data structure used most often to implement a data type called a priority queue. It is also used conceptually in sorting algorithm called heapsort. Its distinctive feature is its O(1) query for the largest or smallest value within its contents, depending on what kind of heap we are talking about.\nThe Theory The binary heap is conceptually a complete binary tree. This means that nodes are added to the tree in level order, and the depth of the tree increases only when there is no room the deepest tree level.\nIn addition to this structural constraint, it follows the heap ordering property: A node\u0026rsquo;s children must have a value larger or smaller than the node itself. In a min-heap, the children must be larger. In a max-heap, the children must be smaller. Effectively, this means that the root must contain the largest element in the heap.\nThe following is an example of a max binary heap, which is the type of heap we\u0026rsquo;ll focus on in this exercise.\nYou can see that every node has 2 or no children, except the node on the farthest right. The nodes are filled in from left to right before starting a new row. All children are smaller than their parent.\nDuplicates are easily handled in this scheme. We\u0026rsquo;d need to maintain that all children are actually less than or equal to their parent.\n\rWe can use an array to represent this data structure. A node i can be accessed by its index, i. To access its left child, multiply by 2. To access its right child, multiply by 2 and add 1. The following diagram illustrates this:\nAdding to a binary heap To add an element, we first add it to the next available spot. Next, we retroactively “fix” any problems caused by this by sliding it up and swapping nodes until it reaches a stable position, i.e. its parent is larger than or equal to itself.\nThe diagram below illustrates this process for adding 34 to the example binary heap.\n We insert 34 into the last slot tentatively (green circle, step 1). We then compare with its parent (blue arrow), and find that 34 \u0026gt; 19. Thus, we swap the two nodes. In step 2, we compare with 85, and find that 34 \u0026lt; 85, which indicates that we\u0026rsquo;re done.  Removing the Max from the Heap A max binary heap also needs to support removeMax, which removes the largest element in the heap. Luckily, the largest element is simply the root; however, we need to fix the problems caused by this new hole we\u0026rsquo;ve made.\nTo fill that hole, we take the last element and fill it in to the top spot. Like before we retroactively “fix” any problems this causes. We repeatedly perform swaps downwards with the smaller child until it reaches a stable position in the heap.\nThe diagram below shows how a max removal occurs.\n The root is removed and placed with the element farthest on the right on the bottom row. In step 1, we compare 19 and 42. Since 42 is the larger of the 2, we compare 12 and 42 (blue arrow), and find 12 \u0026lt; 42. Thus, we swap 12 with 42. We repeat the process for step 2. We find 28 is the larger of the 2 children, and since 12 \u0026lt; 28 we swap again. We finally reach a stable position for step 3.  The Implementation In our implementation, we start indexing from 1 to save a bit of computation. So the root of the binary heap is located in heap.__arr[1] instead of heap.__arr[0]. All the functions have comments about their function in binary_heap.h.\nThe implementation will be tested against duplicates, so make sure to handle those. Also, while the heap is fixed in size, the data is stored in the heap. Make sure that the data is free'd!\nThe createHeap and heapPrint functions have already been tested and have been verified to work.\n\rYour goal is to run make test and have no errors. Use any tools, like gdb, valgrind, etc. to your advantage. Good luck!\n"},{"uri":"https://nuevofoundation.github.io/workshops/debugging/e3-burrows-wheeler-transform/","title":"Exercise 3 - The Burrows-Wheeler Transform","tags":[],"description":"","content":"The Burrows-Wheeler transform is an algorithm used in data compression. It takes as an input a string, and outputs an encoded string, which usually has similar characters clustered together.\nThe Theory The algorithm is relatively straightforward and easy to understand.\n Take the input string and extract all of its rotational transformations. (See picture). Sort the rotations in lexicographical order, ascending. Take the last column of the sorted transform; this is the output.  In the diagram above, we use the string banana as an example. The \\0 is a symbol used to denote the end of the string (as in the null terminator character in C), but is lexicographically the LARGEST character when compared to the others.\nAn efficient way to implement the BWT is using a data structure called a suffix array. To create a suffix array, we first take all suffixes of an input string, and give it a numbered label. We then sort the suffixes lexicographically.\nUsing Nuevo\\0 as an example, we first take the suffixes of it and list them out. We then sort them in lexicographic order, with \\0 being the null terminating character as before and acting as the largest character. Finally, we take the index of the first letter of each suffix, and put them into an array. For instance, the index of the letter N in Nuevo\\0 is 0, while the index of e is 2. Since they are alphabetically the smallest, they go into slots 0 and 1 of the array, respectively.\nWe can think of suffixes as rotations for the Burrows-Wheeler transform! All we need to do is append the prefix that we \u0026ldquo;chopped off\u0026rdquo; to the end of the string. So, evo\\0 becomes evo\\0Nu when we want to think of the suffix as a rotation. Then, if we do this for all the suffixes, we get the sorted rotations we want in the Burrows-Wheeler transform.\nA key note is that we don\u0026rsquo;t actually need to store the rotations because the index in the suffix array gives us that information already. If suffix_array[i] == 0, then we know that the rotation we\u0026rsquo;re looking at is Nuevo\\0. If suffix_array[i] == 3, then the rotation we\u0026rsquo;re looking at is vo\\0Nue. You can think of it as us rotating N spaces to the right in the case suffix_array[i] == N. The illustration above demonstrates this.\nSo, with that said, we can get the last character of the rotation simply by taking suffix_array[i] and subtracting by 1, then taking the modulus of the total length of the suffix array to get the index of the original string we are looking for. This gives us the Burrows-Wheeler transform for any given string.\nThe Implementation The implementation strategy we use is the one we highlighted above: construct a suffix array, then take the indices, subtract by 1, then perform a modulo operation of the length of the string (including the null terminator).\nWe\u0026rsquo;ve implemented the suffix array and with it the Burrows-Wheeler transform. However, we were tired at the time and missed quite a few bugs. This exercise can be tricky because it involves a lot of indexing and figuring out how we can be sneaky with using them. As a hint to fixing the errors, most of the bugs are centered the suffix array and how we use it.\nThe null terminator character can mess up how you print your strings. In this exercise, you have to print out the transformed string character by character, because the null terminator character will cause the printf function to stop printing after it finds it. The following code will print out the result of calling bwt(dest, src), where STR_LEN is the static length of the string including the null terminator.\nfor(int i = 0; i \u0026lt; STR_LEN; ++i) {\rprintf(\u0026#34;%c\u0026#34;, dest[i]);\r}\rNote that strlen() returns the length of the string, without the null terminator.\nOne final tip: % in C is not the modulo operator! It is the remainder operator. Perhaps this is the reason why some indexing has gone wrong\u0026hellip;\n\rAll functions are documented in bwt.h. Use any tools like gdb and valgrind to your advantage. Good luck!\n\r"},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/","title":"SQL Workshop","tags":[],"description":"Learning Basic SQL Commands","content":"   Introduction: Learn SQL by Saving the Galaxy! Welcome to the Nuevo Space Station (NSS)! You are a space adventurer who travels the galaxy in your speedy rocket ship while solving coding puzzles to help save your alien friends on different planets.\nYou’ve been approved as an honorary space explorer by the Galactic Federation! You will be given missions to help make the galaxy a safe and fun place for everyone!\nPlease do not use the Firefox browser for this workshop.\n\rTable of Contents  Tutorial 1: Learn Cadet Basics \n   Activity 1: Learn the SELECT Command \n   Activity 2: Learn the WHERE Command \n   Tutorial 2: Explain Syntax \n   Activity 3: Learn the COUNT Command \n   Activity 4: Select Multiple Info \n   Activity 5: Learn the MAX/MIN Command \n   Activity 6: Use Comparators \n   Activity 7: Use the MIN Command \n   Activity 8: Learn the LIKE Command \n   Activity 9: Learn the AVG Command \n   Activity 10: Learn the SUM command \n   Activity 11: Learn the GROUP BY command \n   Activity 12: Find the Inventor! \n   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/answer-key/","title":"SQL Workshop Answer Key","tags":[],"description":"","content":"Note: Do not use Firefox Browser for this workshop!\nFor Drag and Drop Activities: Correctly chosen blocks will have a green highlight around them while incorrect blocks will highlight in red until the player moves the block.\nFor Type-In Activities: Correct words/commands will be highlighted in green in the Previous Command Box, incorrectly placed or misused words will be highlighted in red. If the command players write matches the answer key and it still highlights in red, make sure there are no extra spaces at the end or beginning of the command! Make sure players have a semicolon at the end of the command (The last word in the SQL command will highlight red if there is no semicolon)! Note that some of the kids copy a sample command from the workshop and paste it in the terminal to run - this will not work! Please ask them to refresh the page and manually type in the command.\nSQL keywords (reserved words) in the commands are case insensitive (SELECT, FROM, WHERE, COUNT, MAX, IN, etc.), but are often written in caps to differentiate from non-keywords. \u0026ldquo;select * from planet\u0026rdquo; is same as \u0026ldquo;SELECT * FROM planet\u0026rdquo;.\n Learn Cadet Basics No activity, only a read through of terminology.\nActivity 1: Learn the SELECT Command (Drag and Drop) Answer: SELECT * FROM galaxy;\nActivity 2: Learn the WHERE Command (Drag and Drop) Answer: SELECT * FROM galaxy WHERE name = ‘Planet of Fun’;\nExplain Syntax No activity, only an explanation of the SQL Command format.\nActivity 3: Two Valid Answers: SELECT COUNT(*) FROM planet; OR SELECT COUNT(city_number) FROM planet;\nActivity 4: Select Multiple Info (Type-in) Two Valid Answers: SELECT planet_name, leader_name FROM galaxy; OR SELECT leader_name, planet_name FROM galaxy;\nThe only difference between the two answers is the order of columns displayed, therefore both answers are valid.\nActivity 5: Learn the MAX/MIN Command (Both Type-In + Drag and Drop) Valid Answers:\n SELECT MAX(height) FROM items WHERE object IN (‘ladder’); SELECT MAX(height) FROM items WHERE object = 'ladder'; SELECT * FROM items WHERE object IN (‘ladder’); SELECT * FROM items WHERE object = 'ladder'; Although the third and fourth answers do not use the MAX command, it displays all the ladders and their colors, making this a valid answer for the activity.  Answers for Bonus:\n SELECT MAX(height) FROM items WHERE object NOT IN('totem', 'key'); SELECT MAX(height) FROM items WHERE object NOT IN('totem'); SELECT MAX(height) FROM items WHERE object NOT IN('key'); If players use NOT IN correctly, this will still output the correct answer.  Drag and Drop: The correct ladder to drag and drop is the RED ladder (rightmost ladder). The correct ladder will highlight in green.\nActivity 6: Use Comparators (Type-In) Answer: SELECT * FROM items WHERE date_created = ‘1738-09-12’;\nBonus Answer: SELECT * FROM items WHERE date_created \u0026gt;= ‘1738-09-12’;\nActivity 7: Use the MIN Command (Type-In + Drag and Drop) Valid Answers:\n SELECT MIN(height) FROM items WHERE object IN (‘key’); SELECT * FROM items WHERE object IN('key'); SELECT MIN(height) FROM items WHERE object = 'key'; SELECT * FROM items WHERE object = 'key'; SELECT MIN(height) FROM items WHERE object NOT IN('totem', 'ladder'); SELECT MIN(height) FROM items WHERE object NOT IN('totem'); SELECT MIN(height) FROM items WHERE object NOT IN('ladder');  Drag and Drop: The height corresponds to the number of loops on the base of the key. The smallest key (height of 1) is the correct key to drag and drop (rightmost key).\nActivity 8: Learn the LIKE Command (Type-In) Two Valid Answers: SELECT * FROM items WHERE date_created LIKE ‘%-10-%’; OR select * from items where date_created like '1738-10-%';\nActivity 9: Learn the AVG Command (Type-In) Answer: SELECT AVG(population) FROM planet;\nThe combination to the safe is \u0026ldquo;40\u0026rdquo;.\nActivity 10: Learn the SUM Command (Type-In) Answer: SELECT SUM(population) FROM planet;\nActivity 11: Learn the GROUP BY Command (Type-In) Answer: SELECT * FROM planet GROUP BY favorite_food;\nBonus Answer: SELECT COUNT(*), favorite_food FROM planet GROUP BY favorite_food;\nThe correct buttons to select (in any order) are: pizza, hotdog, hamburger, and taco.\nActivity 12: Find the Inventor! (Type-In) Answer: SELECT * FROM people;\nThe inventor: \u0026ldquo;Dr. Phi\u0026rdquo;\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-tictactoe/","title":"Java: TicTacToe","tags":[],"description":"Learn how to make a console based TicTacToe game in Java","content":"Prerequisites (from Java: Basics)  activity-1: Print Statements and Comments activity-2: Variables and Types activity-3: Operators activity-5: Methods activity-6: Object and Classes activity-7: Data Structures (Array \u0026amp; ArrayList)  These are the concepts from the Java: Basics workshop that we will use in this activity. Please refer to these activity to review or learn the concepts before continuing!\n Overview In this workshop, you will learn how to create a Tic-Tac-Toe program in Java from start to finish!\nYou will need basic Java knowledge from the workshop Java: Basics as we will assume you to know about variables, operators, classes, and arrays during the exercises.\nThere will also be links to the relevant Java topics on each page if you want to review a specific concept!\n(image created by ParkerPup: giphy.com/parkerpup)\nTable of Contents  Introduction \n   1. Set Up the Board! \n   2. Read and Process Input \n   3. Update the Game Board \n   4. Check the winner \n   5. (Optional) AI Move \n   Demo The following is the program you will create by the end of the workshop! Give it a try by clicking Run!\n "},{"uri":"https://nuevofoundation.github.io/workshops/java-basics/","title":"Java: Basics","tags":[],"description":"An introduction to the basics of Java programming language.","content":"\nOverview Welcome to the course Java: Basics, where you will learn a widely-used high-level programming language that gives computer instructions to create exciting programs!\nJava is a high-level programming language developed by James Gosling and Sun Microsystems in California in 1995.\nA high-level programming language is called high-level because it is quite a few steps away from the original code run on a computer\u0026rsquo;s Central Processing Unit (CPU). High-level code is meant to be used by humans and is much easier to understand than low-level code. The high-level code is later translated into a low-level language, which can only be perceived and run by a specific CPU. For the code to work, every single line of code written in a high-level language must be translated into machine language before being implemented by the computer.\n Today, Java is used by developers all over the world. Specifically, Java is used for Android mobile apps, desktop applications, web applications, game development\nAnd, in this course, we will cover all the basic features of the language.\n(image created by Molang: giphy.com/molangofficialpage)\nIn this course, we will follow the lead of a music-loving yellow duck named Patrick 🐥 to learn all about Java and make friends along the way!\nTable of Contents  Using Repl.It \n   Print Statements and Comments \n   Variables and Types \n   Operators \n   Control Structures \n   Methods \n   Object and Classes \n   Data Structures (Array \u0026amp; ArrayList) \n   "},{"uri":"https://nuevofoundation.github.io/workshops/debugging/","title":"The Debugging Process","tags":[],"description":"An introduction to debugging programs","content":"Introduction So, you’ve learned the basics of a programming language. You’ve probably mastered the art of “Hello World” and have either started a personal project, or followed enough tutorials to be able to turn an idea into code.\nHowever, what happens when your code fails to compile? At first, beginners to programming usually turn to others by posting their errors online, or look online to see if others have encountered the same problem. This is a bit tedious, as you\u0026rsquo;d need to turn to the internet every single time you ran into a compilation error!\nOr, what happens when your program compiles, but doesn\u0026rsquo;t work the way you expect it to - a bug? Going back to fix your code is annoying, tiring, and perhaps more difficult than writing code. Learning how to navigate these bugs and errors takes skill, patience, and experience. In this workshop, we\u0026rsquo;ll unravel the basic process for debugging your code.\nWhile debugging is part of all programming languages, exercises in this workshop will focus on C. Most of the examples require you to use simple commands on the command line.\nAbout this workshop This workshop assumes that you understand C code, and can write programs in C. The examples we will use are data structures and algorithms that are usually taught in an introductory computer science course. We\u0026rsquo;ll have a brief explanation for them, but it is intended to be a refresher so you have an idea of what the example code is doing.\nRepl.it and the Command Line Let\u0026rsquo;s try using Repl.it to run some code and get more familiar with the command line. In the Repl.it frame below, open the Shell tab.\n\rType\nmake HelloWorld\rNow hit the enter key to run the command. Running the make command compiles your program.\nTo actually run your program, you need to use a different command:\n./examples/HelloWorld\rYou should see Hello, World! printed!\nWhy use the command line? The command line may seem unintuitive and not user-friendly to beginners. However, knowing how to use it is another extremely important skill in your programming career. We\u0026rsquo;ll be using it to run gdb and valgrind later in the workshop, so the more experience you have with it, the better!\nThe examples were written on a single Replit. We\u0026rsquo;ll be providing all the commands you need to know to compile and run them, so don\u0026rsquo;t worry if you haven\u0026rsquo;t used the command line so far.\n  Workshop Contents  An Overview of Debugging \n   Step 1 - Finding the problem (Part 1) \n   Step 1 - Finding the problem (Part 2) \n   Step 1 - Finding the problem (Part 3) \n   Step 2 - Fixing the problem \n   Step 3 - Testing \n   Exercise 1 - Binary Tree Implementation \n   Exercise 2 - Binary Heap Implementation \n   Exercise 3 - The Burrows-Wheeler Transform \n   "},{"uri":"https://nuevofoundation.github.io/workshops/unity/","title":"Unity: Top-Down Nuvi Space Game","tags":[],"description":"Learn the basics of Unity by creating a top-down space game","content":"Introduction Oh no! Aliens have descended onto Earth! Will you help Nuvi the robot in defeating them?\nThis workshop will take you step-by-step through the creation of a top-down Unity space game! Hope you enjoy!\nTable of Contents  Installing Unity \n   Understanding the Unity Interface \n   Scripts Explained \n   Making Nuvi Move \n   Colliders \n   Setting up the Enemies \n   Setting up the Projectile and Making it a Prefab \n   Firing \n   Triggers and Tags \n   Projectile/Enemy Behavior \n   Making the UI: Part 1 \n   Making the UI: Part 2 \n   Piecing it All Together \n   Building and Running your Game \n   "},{"uri":"https://nuevofoundation.github.io/workshops/secret-messages/","title":"Secret messages with C++","tags":[],"description":"Learn C++ and create your own secret messages","content":"Intro Welcome to the court!\nIn a kingdom not very far away, the King messages the Queen, who is in a different land witnessing a coronation, every day. Her presence there has come to an end since she is doing important negotiations for the nation. But their messages have been compromised! Both the King and the Queen have realized that their most vicious enemies, the Pirates, have been reading each and every single message they have exchanged.\nFortunately, they have come up with a plan on creating a system so that the Pirates will be unable to read their conversations, but they need help in doing this.\nYou\u0026rsquo;ve been selected by the King to be the next Court Developer, and create an encryption system that would allow both him and the Queen to communicate without being intercepted by the Pirates. Will you help the King? The kingdom\u0026rsquo;s future is in your hands.\nContent  Sections  Using Repl.It \n   Activity 1 - Output \n   Activity 2 - Variables and Inputs \n   Activity 3 - Loops \n   Activity 4 - Conditions \n   Activity 5 - ASCII Code \n   Activity 6 - Functions \n   Activity 7 - Input line \n   Conclusion \n    "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/","title":"Android: Tic-Tac-Toe","tags":[],"description":"Learn about variables, functions, and conditionals all while building a Tic-Tac-Toe Android app.","content":"Welcome Start your Android Game Adventure Adventure Checklist  Getting Started \n   Android Setup \n   Puzzle 1 \n   Game Application Structure \n   Printing to Console \n   Puzzle 2 \n   Comments \n   Strings \n   Numbers \n   Booleans \n   Conditionals \n   Variables \n   Puzzle 3 \n   Final Puzzle \n   "},{"uri":"https://nuevofoundation.github.io/workshops/python-tensorflow/","title":"Python: Machine Learning Basics using TensorFlow","tags":[],"description":"Learn basic image classification and train ML models with TensorFlow","content":"Welcome to Tensorflow! In this workshop we will be using the Tensorflow Python library to train a neural network model to recognize and classify different types of clothing. We will take a look at the steps which allow the model to make a prediction for the best fit category for a specified image.\nYou can also use this video to follow along with this workshop to help better understand what is covered.\nThe following videos will go over all the code and activities, so we recommend doing the activities first before looking at the walkthrough solutions.\n Getting Started with Google Colab Visit Google Colab , an online programming environment similar to Google Docs but for running code. After signing into your Google account, click the option to create a \u0026ldquo;New Notebook\u0026rdquo;. To run the code you complete while working through this workshop, click on the \u0026ldquo;play\u0026rdquo; button on the left.\nWe recommend that you organize your code by creating a new block of code for every segment of code used in the activities throughout the workshop. Also, make sure to read the comments in the code blocks to better understand what each code segment does.\nGoogle account required In order to use Google Colab to edit and run code, you need to be logged in to your Google account (or school account with access to Google services/Google Drive).\nDon\u0026rsquo;t have a Google account? If you do not have a Google account and are not able to create one, please contact any of the admins of Nuevo Foundation to get temporary access to a Nuevo account for this workshop only. Please keep in mind that Google Colab is required for this workshop so that you can run all the code.\n When running your code for the first time, make sure to run your code by clicking on Runtime -\u0026gt; Run all in the Menu bar to execute all your code snippets sequentially. This is to make sure that you don\u0026rsquo;t accidentally execute functions without importing the libraries first!  Table of Contents  Sections  Welcome to your new Summer job! \n   Activity 1 - Importing the TensorFlow library and datasets \n   Activity 2 - Displaying RGB Color values for images \n   Progress Update 1 \n   Activity 3 - Displaying Clothing Samples \n   Building the Neural Network \n   Activity 4 - Training the Model \n   Activity 5 - Testing the Model \n   Activity 6 - Testing the Model \n   Progress Update 2 \n   Plotting the Model and its Predictions \n   Activity 7 - Plotting an Image's predicted Category \n   Progress Update 3 \n    Works Cited\n"},{"uri":"https://nuevofoundation.github.io/workshops/phaser-space-invaders-game/","title":"Phaser: Space Shooter Game","tags":[],"description":"A guide to creating a Space Shooter similar to games like Space Invaders and Galaga","content":"Introduction The goal of this lesson is to walk you through the creation of a game inspired by Space Shooters like Space Invaders and Galaga. You will also get a small taste of thinking about Object Oriented Programming.\nAll sprites in the Space Invaders game were created by Luis Zuno (aka Ansimuz). Check him out if you like the pixel art!\nAll sprites in the lesson repl with \u0026ldquo;dude\u0026rdquo; are from the Phaser website.\nIn the end, your game will look something like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/","title":"JavaScript: Basics","tags":[],"description":"Basics of JavaScript","content":"JavaScript basics Topics  Introduction \n   Arrays \n  Properties \n Iterating over Arrays \n Methods \n   "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/","title":"JS: JSappyBird","tags":[],"description":"Create Your Own JSappyBird Game","content":"JSappyBird  Starting up with Repl.it \n   Starting up \n   Load the bird image \n   Change the screen text \n   Make the bird jump \n   Add gravity \n   Make the bird jump with force \n   Bird falling with rotation \n   Add sound while the bird is jumping \n   Bonus activities \n   "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/","title":"Arduino","tags":[],"description":"Build a Arduino microcontroller","content":"Introduction - Building with Arduino Electronics like microcontrollers, sensors, and all types of circuitry are all around us! Some are very basic and provide telemetry information for traffic systems. Others run the traffic lights programmed with built-in timing.\nToday we will work on a few activities to show you some of the capabilities of this platform. We will start small and simple and build to bigger and more complex. You will learn all the basic information about how to use the Arduino controller board, sensors, and components. After you do each activity, feel free to change some things to see what is different and gain a deeper understanding.\nTable of Contents  Sections  The Components \n   Setting up the PC \n   Activity 1: Blinking LED \n   Activity 2 - Joystick with Serial Output \n   Activity 3 - Joystick \u0026amp; LEDs \n   Activity 4 - LCD Display \n   Appendix \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-guess-number/","title":"Python: Guess the Number Game","tags":[],"description":"Create a simple game that asks the user to guess a randomly generated number","content":"In this activity, you will be creating a simple game that incorporates some of the things you learned in the Python Basics section.\n "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/basics_activity/","title":"Tutorial 1: Learn Cadet Basics","tags":[],"description":"Learn what a database and SQL are","content":"   Cadet Training! As a new honorary space explorer, let\u0026rsquo;s go over some basics!\nWhat Is A Database? It is a type of container for you to hold and organize information. Think of a database like a bucket where you can place toys in so they don’t get lost and you can easily find them later. This bucket might hold smaller buckets to sort your toys.\nWhat is SQL? SQL stands for “Structured Query Language” and like its name, it is a language that lets you talk to the database to get the information you need. A SQL command is like a sentence you say to the database.\nWhat is a Table? A table can be a database. Now that you have some knowledge of what databases and SQL commands are, you will be learning how to use these on your missions! Continue to start your first official space adventure!\n"},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity1/","title":"Activity 1: Learn the SELECT Command","tags":[],"description":"Learn the SELECT command","content":"          Mission 1: Save the Planet of Fun from Boredom! Your first mission is to go to the Planet of Fun and save them from boredom! You are sent a database about the planet and you need to learn how to use SQL commands to help save the Planet of Fun!\nTask 1: Take a peek at the information on the Planet of Fun You are given information about the Galaxy and want to look for the Planet of Fun. To do this, the Galactic Federation has given you your first SQL command: SELECT.\nWhat the command does: The SELECT command allows you to choose what data to show from a database.\n Example: Now use what you learned! Drag the blocks into the terminal and rearrange them to answer the question below!\n Question: What command will display all the columns in the database called \u0026ldquo;galaxy\u0026rdquo;?       --       Enter    ERROR INVALID INPUT   You found the correct command to display the entire database! This is handy when you want to see all the information at the tip of your fingers!\n\u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity2/","title":"Activity 2: Learn the WHERE Command","tags":[],"description":"Learn the WHERE command","content":"          Task 2: Travel to the Planet of Fun! You need to program your rocket ship GPS to go to the Planet of Fun by rearranging the code blocks. To find the coordinates, the Galactic Federation has given you the next SQL command: WHERE!\nWhat the command does: The WHERE command allows you to only show data that you want.\n Example:   The SELECT * FROM database block that we learned from the previous activity allows us to choose a database to look through.\n  The WHERE command allows us to narrow down what data is displayed depending on the condition (the green blocks in the image below). A condition is a requirement you are looking for. Conditions do not have to follow the example above, but the most common use of conditions are looking for rows that contain specific information.\n  The name of the column we wish to look for information in.\n  The equal sign means that we want to find information that matches what we have on the right-hand side of the equal sign.\n  When we are looking for specific words or text, we must surround the text with single quote marks. SQL uses single quote marks to indicate that we are looking for a word in the database.\n  You can replace \u0026lsquo;text\u0026rsquo; with any word you are looking for in the database.\n  Semicolons act as the end of a SQL command, like a period at the end of a sentence.\n   Using the database called \u0026lsquo;galaxy\u0026rsquo; that has a column labeled \u0026lsquo;planet\u0026rsquo;, find the coordinates for the Planet of Fun!                 Enter      displaytable(\"galaxy where planet_name = 'Planet of Fun'\", \"planet\");   Now that you know where the Planet of Fun is, we can find more information about it and ignore the other planets. Let's go to the Planet of Fun!   \u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/syntax_explanation/","title":"Tutorial 2: Explain Syntax","tags":[],"description":"Explain Syntax","content":"   An email from the Galactic Federation? In the middle of your journey, you suddenly receive a message from the Galactic Federation. What could it be about?\n Sender: The Galactic Federation\nReceiver: Space Cadet\nSubject: Upgraded Terminal\n Dear Space Cadet,\n Our records have indicated that you have learned enough commands to learn the basic structure for SQL commands. The Galactic Federation has taken notice of your achievements and has decided to bestow upon you an upgraded terminal! During your journey, you will need your handy-dandy terminal to display information about the planet around. Now you are able to type in commands!\n As per the Space Explorer Guidelines, we will now debrief you on the core structure of a SQL command in hopes that you will be able to overcome the challenges that have yet to come.\n Column and database names are case sensitive, this means that if the names are all lower-case, please make sure they are lower-case when you type them! Please don\u0026rsquo;t forget the semicolon at the end of a SQL command! \n-- Hopefully our advice will help you in your journey. Good Luck, Space Cadet!\n Wishing You The Best Adventure,\n The Galactic Federation\n"},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity3/","title":"Activity 3: Learn the COUNT Command","tags":[],"description":"Learn the COUNT command","content":"         After receiving the message from the Galactic Federation, you continue your adventure.\nYou have successfully arrived on the Planet of Fun! The Galactic Federation has sent you a database about this planet.\n  displaytable(\"planet\", \"planettable\");  Task 3: Talk to the inhabitants You need to talk to the inhabitants of the Planet of Fun to discover what the problem is. Find out how many cities there are on the planet using the COUNT() command!\nWhen we use the SELECT * FROM planet; command, the table above is displayed. But in order to check the number of cities, we can use the COUNT() command.\n Question: Using COUNT(), what command will display the number of cities on the Planet of Fun? Remember to type in the answer and not copy and paste the command. Press the Enter button on the terminal to check if you have the correct command. Use the Reset button to start over.\n Hint 1: The Galactic Federation gave you the name of this database at the beginning of this activity Hint 2: You can use either the asterix (*) or a column name Hint 3: Don\u0026rsquo;t forget the semicolon (;) \n Type command here!     Enter   Reset    ERROR INVALID INPUT     You found the correct command to display the entire database! This is handy when you want to see all the information at the tip of your fingers!\n\u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity4/","title":"Activity 4: Select Multiple Info","tags":[],"description":"Select Multiple Info","content":"         Task 4: Find Their Leader After going to the Capital of Fun, you are told by the inhabitants to talk to their Leader. Find out which inhabitant is the Leader. To do so, let\u0026rsquo;s take a look at how to select multiple columns in a database.\nNow use what you learned to find out who is the leader of the Planet of Fun! You can view the entire database using the SELECT * FROM [database_name]; command that you learned in activity 1.\nThe Galactic Federation also sends you a reminder that the \u0026lsquo;galaxy\u0026rsquo; database holds the following columns:\n  planet_number: What order the planets show up in the database.\n  planet: The name of the planet.\n  leader: The name of the leader of the planet.\n  population: How many inhabitants live on the planet.\n  coordinate: The location of the planet in the galaxy.\n  Hint: Only two columns are needed.\n Question: Using the \u0026lsquo;galaxy\u0026rsquo; database, how do you display only the names of the planets and their leader? Don\u0026rsquo;t forget the semicolon at the end!\n Type command here!     Enter   Reset    ERROR INVALID INPUT     You found the correct command to display all the planets and their leaders!\n\u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity5/","title":"Activity 5: Learn the MAX/MIN Command","tags":[],"description":"Learn the MAX/MIN Command","content":"          Task 5: Find the Tallest Ladder To Get To Their Leader You have discovered that the planet\u0026rsquo;s leader is in a hut on the tallest hill but to get to it, you need to find the largest ladder in the Capital of Fun!\nThe Galactic Federation has sent you four new SQL commands to play around with! Let\u0026rsquo;s take a look at them!\nWhat the commands do:  Column Property: MAX() is used to look for the largest value in a column. MIN() is the opposite of MAX() and will look for the smallest value in a column. You can replace any word inside the parenthesis with another column name to get the largest or smallest value of that column.\n Notice how the items specified inside IN() and NOT IN() are surrounded by single quotation marks but the ones inside MAX() and MIN() are not.\nCondition:\n  IN() and NOT IN() are used hand in hand with the WHERE command we learned in activity 2. IN() is part of the condition of a SQL command and is helpful when you want to show some columns but not all of them.\n  NOT IN() is the opposite of IN(). Instead of choosing what to show like IN(), NOT IN() will show all the columns you did not choose inside the parenthesis.\n  You can use commas inside the parenthesis to choose more than one column to show or not show.\n  Using only 1 input inside IN() is equivalent to using =:\n  Ex. column_name IN('obejct_in_column'); is the same as column_name = 'obejct_in_column';\n Now use what you learned! Using the database called \u0026lsquo;items\u0026rsquo; with columns labeled \u0026lsquo;object\u0026rsquo; and \u0026lsquo;height\u0026rsquo;, find the tallest \u0026lsquo;ladder\u0026rsquo;. You can display the database using the command from activity 1.\n  Hint 1: Remember the advice from the Galactic Federation: SELECT [column/column property] FROM [database] [optional condition];\n  Hint 2: Column property: Do you need to use MAX() or MIN() to find the tallest ladder?\n  Hint 3: Condition: WHERE [column_name] [IN/NOT IN];\n  Hint 4: Do you need to use IN() or NOT IN() to show the \u0026lsquo;ladder\u0026rsquo;?\n  Hint 5: What symbol do you need at the end of a SQL command?\n    BONUS: Try to use multiple inputs inside IN() or NOT IN() when searching for the ladder This command is very powerful in searching multiple types of objects \n Remember: You can query the database multiple times using everything you have learnt till now to find out the color of the tallest ladder.\n Type command here!     Enter   Reset    ERROR INVALID INPUT     RED Ladder = 100 GREEN Ladder = 60 YELLOW Ladder = 20   Choose and drag the correct ladder onto the hill to continue your adventure! The correct ladder will be highlighted in green.\n         You made it! The Leader tells you that the Planet of Fun is in danger of being invaded by the aliens from the Planet of Boredom! You must find the Totems of Fun in order to save the planet!  \u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity6/","title":"Activity 6: Use Comparators","tags":[],"description":"Use Comparators","content":"         Task 6: Find the Legendary Totem of Fun: Confetti Cannon You need to explore the planet and find the first Legendary Totem of Fun - The Confetti Cannon of Fun. Legends say that this cannon will never stop shooting confetti and it is a symbol of never-ending peace and entertainment.\nYour only hint is that the artifact is created on 1738-09-12.\n To help you out, the Galactic Federation has sent you a brief tutorial on how to compare numbers in the database.   In example 2, the != symbols could be used instead of \u0026lt;\u0026gt; to give the same output.\n  Notice the value in [value to compare] in SELECT * FROM [database] WHERE [column_name] [Comparator] [value to compare]; Note that numbers do not need single quotation marks around them but date/words need to be inside single quotation marks! If Transportation had 2 more columns called \u0026ldquo;Name\u0026rdquo; that stored name of the vehicle and \u0026ldquo;Date\u0026rdquo; that stored the date of manufacture of the vehicle, we would query them like this:\nSELECT * FROM Transportation WHERE Fuel \u0026gt; 20;\nSELECT * FROM Transportation WHERE Name = 'myrocket';\nSELECT * FROM Transportation WHERE Date \u0026gt; '2021-01-01';\n   Using the database called \u0026lsquo;items\u0026rsquo; with the column labeled \u0026lsquo;date_created\u0026rsquo;, find out which artifact is the Legendary Totem of Fun: Confetti Cannon You can display the database using the command from activity 1.\n  Hint 1: The artifact is created on \u0026lsquo;1738-09-12\u0026rsquo; (Use single quotation marks around the date).\n  Hint 2: What comparator do you need to use to find an exact match?\n  Hint 3: The correct command follows closely to the example above.\n  Hint 4: You do not need single quotation marks around the column or database names in this command.\n  Hint 5: What symbol do you need at the end of a SQL command?\n  BONUS: Display all items created on and after \u0026lsquo;1738-09-12\u0026rsquo; as well!\n   Type command here!     Enter  Reset    ERROR INVALID INPUT     You found the location of the first Legendary Totem of Fun: The Confetti Cannon!  \u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity7/","title":"Activity 7: Use the MIN Command","tags":[],"description":"Use MIN Command","content":"          Task 7: Find the Key to Get to the Confetti Cannon! You found the location of the Legendary Confetti Cannon but it is locked away behind a door made of titanium and can only be unlocked with the smallest key on the planet!\nTo help you out, the Galactic Federation has sent you a reminder on how to use MIN() from a previous activity.\nUsing the database called 'items' with columns labeled 'object' and 'height', find the 'key' with the smallest height. You can display the entire database using the command from activity 1.\n  Hint 1: Remember the advice from the Galactic Federation: SELECT [column/column property] FROM [database] [optional condition];\n  Hint 2: Condition: WHERE [column_name] [IN()/NOT IN()];\n  Hint 3: Do you need to use IN() or NOT IN() to show the \u0026lsquo;key\u0026rsquo;?\n   Type command here!     Enter   Reset    ERROR INVALID INPUT     Choose and drag the correct key onto the lock to continue your adventure! The height corresponds to the number of loops at the base of the key. The correct key will be highlighted in green.\n          You found the Legendary Totem of Fun: Confetti Cannon!   \u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity8/","title":"Activity 8: Learn the LIKE Command","tags":[],"description":"Learn LIKE Command","content":"          Task 8: Find the Legendary Totem of Fun: Infinite Buffet Table Another artifact you must find is the infinite buffet table of fun! Legends say that festivals will never run out of food with this mystic buffet table.\nThis Totem was created a month after the previous artifact: the Confetti Cannon (reminder: the Confetti Cannon was created on 1738-09-12).\n The Galactic Federation has sent you a brief tutorial on a handy command: LIKE\nUsing the database called \u0026lsquo;items\u0026rsquo; with a column labeled \u0026lsquo;date_created\u0026rsquo;, find the Infinite Buffet Table! You can use the command in activity 1 to display the entire database.\n Hint 1: The format for the date is Year-Month-Day. Hint 2: This Totem was created a month AFTER the Confetti Cannon (1738-09-12). Hint 3: What is the pattern? Do you need to look for the month at the beginning, end, or anywhere of the value? \n Type command here!     Enter   Reset    ERROR INVALID INPUT     You found the location of the Legendary Totem of Fun: Infinite Buffet Table! Now we will travel to Fun Capital!  \u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity9/","title":"Activity 9: Learn the AVG Command","tags":[],"description":"Learn AVG Command","content":"          Task 9: Unlock the Infinite Buffet Table: You discovered the location of the Legendary Infinite Buffet Table! However, it is locked behind a door that will only unlock if you find the secret number.\nYour only clue is that the combination is the first two digits of the average city population.\n Let\u0026rsquo;s look at the AVG() command!\nUsing the database \u0026lsquo;planet\u0026rsquo; and the AVG() command, find the first two digits of the average city \u0026lsquo;population\u0026rsquo;! Use the command from activity 1 to view the entire database.\n  Hint 1: The command follows very closely to the example.\n  Hint 2: How do you use \u0026lsquo;population\u0026rsquo; with the AVG() command?\n   Type command here!     Enter   Reset    ERROR INVALID INPUT    Figure out the combination to unlock the vault! The clue to the combination is at the top of this page!\n +  +   0 0 -  -   Check      You did it, Space Explorer! You found the Legendary Totem of Fun: Infinite Buffet Table!  \u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity10/","title":"Activity 10: Learn the SUM command","tags":[],"description":"Learn SUM command","content":"          Return the Legendary Totems of Fun to The Leader You have successfully found both Legendary Totems of Fun! The Leader thanks you for finding their lost treasure.\nThe Leader also reveals a secret: The Legendary Totems of Fun cannot unleash their full potential until they are merged together. They can only be merged together by the \u0026ldquo;Inventor\u0026rdquo;.\nYour next step is to find the person who can combine both Legendary Totems of Fun. The \u0026ldquo;Inventor\u0026rdquo; will only appear if you throw a huge party!\n Task 10: Help the inhabitants set up for the party! The whole planet is invited! Help the citizens prepare for the party by finding out how many guests will be attending!\nLet\u0026rsquo;s go over the SUM Command!\nUsing the database \u0026lsquo;planet\u0026rsquo; and the SUM() command, find the total number of guests that will attend this amazing party! Use the command from activity 1 to display the entire database.\n Hint 1: The command follows very closely to the example and the AVG() example (previous task). Hint 2: The \u0026lsquo;population\u0026rsquo; column holds information on the number of individuals per city. \n Type command here!     Enter   Reset    ERROR INVALID INPUT    \u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity11/","title":"Activity 11: Learn the GROUP BY command","tags":[],"description":"Learn GROUP BY command","content":"          Party with the Inhabitants! You are tasked to choose which food to serve at the party! Each city has their own favorite food and you need to decide which ones to have at the party! Let\u0026rsquo;s use the GROUP BY command to figure out what to bring.\nWhat the GROUP BY command does: Task 11: Using the database called \u0026lsquo;planet\u0026rsquo; with the column \u0026lsquo;favorite_food\u0026rsquo;, find out what to bring to the party! Hint: The command follows closely to the example above.\nBONUS: Combine the COUNT() and GROUP BY commands to show the number of cities that like each food. (Review activity 3 and activity 4 for help)\n Type command here!     Enter   Reset    ERROR INVALID INPUT       Clear      Cook!     You did it Space Cadet! Now the inhabitants can finally begin the party!  \u0026#10003; You've completed the task! Continue to the next mission!   "},{"uri":"https://nuevofoundation.github.io/workshops/sql_workshop/activity12/","title":"Activity 12: Find the Inventor!","tags":[],"description":"Find the Inventor!","content":"          All the guests are here! We need to find the Inventor before it\u0026rsquo;s too late! Everyone is having a good time at the party! The inventor has also arrived, now we need to figure out who the inventor is! No one knows what the inventor looks like, but the Leader has given you hints on how to find the inventor!\nTask 12: Display the entire database called \u0026ldquo;people\u0026rdquo; so we can look at all the attendees.  Hint 1: The command you use should display the entire \u0026ldquo;people\u0026rdquo; database. Hint 2: The command is similar to the one in activity 1 (Learn the SELECT command). \n Type command here!     Enter   Reset    ERROR INVALID INPUT    Here are some hints to figure out who the \u0026ldquo;Inventor\u0026rdquo; is:   The Inventor\u0026rsquo;s favorite food is Pizza.\n  The Inventor\u0026rsquo;s favorite subject is Math.\n  The Inventor\u0026rsquo;s favorite movie is \u0026ldquo;Big Hero 6\u0026rdquo;.\n   Enter person here!   Check!       \u0026#10003; You've completed the task!   You Saved the Planet of Fun!   The Planet of Fun is now protected from the invaders thanks to you! You found the lost Legendary Totems of Fun and returned them to their rightful place and saved the citizens from danger! The inhabitants will never forget your act of kindness! Congrats space cadet! You’ve successfully saved the Planet of Fun! Click the \"Download\" button below to receive your honorary certificate! Download   "},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/","title":"Python: Image Manipulation","tags":[],"description":"An introduction to manipulating images in Python","content":"Introduction This workshop will provide an introduction to manipulating images in python.\nTable of Contents  Sections  Project Overview \n   Open an image \n   Rotate the image \n   Image Filters \n   Making a meme! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/","title":"HTML &amp; CSS: Web Basics","tags":[],"description":"An introductory guide on how to make a simple website from scratch","content":"Let\u0026rsquo;s build a website! Benji was born in Houston, Texas. Soon after Benji was born, a devastating hurricane hit Houston. Hurricane Harvey displaced more than 30,000 people, including Benji’s family. Benji can’t speak human so we don’t know the details. All we know is that Benji is looking for a home and is committed to be a good boy wherever he goes. Let’s make a website so we can share his information, and find his forever home!\nTable of contents  Section  Basics \n   Putting it together \n   Activity 1 - Familiarize with online editor \n   HTML Attributes \n   Activity 2 - CSS \n   Media Elements \n   Activity 3 - Adding a GIF of Nuvi \n   Activity 4 - Try the form and change the style \n   Activity 5 - The final excercise \n   Hosting your website \n   In case you were wondering \n    "},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/","title":"Java: Data Structures","tags":[],"description":"Learn basic concepts of Java data structures","content":"\n-- Transforming Lives, Through Food At NuevoEats, our goal is to help empower and lift local economies and businesses. We start by helping merchants - the local businesses and restaurants that create 60%+ of the jobs in every city. Our dream is to build a last-mile logistics platform, create a set of services to grow a businesses\u0026rsquo; sales, and create a program that connects consumers to the businesses that sustain them.\nThe road ahead at NuevoEats will not be easy. That’s why we’re looking for people from all backgrounds to help us solve seemingly impossible problems at lightning speed. Those with courage and grit, who work hard, fast and smart. Those who don’t wait to implement good ideas, are comfortable with imperfection but determined to get 1% better every day. Think you’re up for the challenge? Join us!\n Topics:\nTopics  Introduction to Data Structures \n  Setting Up \n Prerequisites \n For Loops \n  Arrays \n  What is an Array? \n Array Methods and Examples \n Problem 1: Array basics \n Problem 2: Advanced Arrays \n  2D Arrays: The Menu \n  Introduction \n The Menu \n Examples \n Problem 1: Example Menu \n  ArrayList: Ordering from the Menu \n  Introduction \n Methods \n Problem: Insertions, Accesses, and Removals \n  Queues: Receiving Orders \n  Examples \n Introduction \n Problem 1: Queue Basics \n  Stacks: The Driver \n  Examples \n Introduction \n Problem 1: Stack Basics \n  Hashmaps: The Delivery \n  Introduction \n Examples \n Problem 1: Hashing \n Problem 2: Making your own menu! \n   \n    \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/","title":"Python: Basics","tags":[],"description":"Learn basic concepts of using the Python programming language","content":"Python basics Topics  Basics \n  Starting up with Repl.it \n Writing to Console (Print statement) \n Comments \n Variables \n Reading from the Console \n  Conditional statements and loops \n  Conditional statements \n Else-if Condition \n Loops \n Nested loops \n  Data Structures \n  Lists \n Tuples \n Sets \n  Data Types \n  Strings \n Numbers \n Booleans \n  Functions \n  More about functions \n Built in Functions \n Built-in Math Functions \n  Help, I am stuck! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/","title":"Python: Building a Pong Game","tags":[],"description":"Learning To Build a Pong Game with Pygame Library","content":"Introduction You may already know how to play Pong in real life. How about building your own version of Pong on your own computer? In this tutorial, we will learn to use Python\u0026rsquo;s Pygame library to build Pong. Sound interesting?\nThe goal of this workshop is to use your Python knowledge to fix the code where indicated to make the game work and learn about Pygame library and its functions along the way.\nTable of Contents  Using Repl.It \n   The Basics - Class and Object \n   Activity 1 - Define the width of the Pong screen \n   Activity 2 - Change the color of objects in game. \n   Activity 3 - Change the key assignment to move left paddle \n   Activity 4 - Change the key assignment to move right paddle. \n   Activity 5 - Declare and use a variable for font \n   Activity 6 - Fix the 'if' condition to track correct score. \n   Activity 7 - Define the key combination to exit the game \n   Wrap up \n   "},{"uri":"https://nuevofoundation.github.io/workshops/microbit-distance-checker/","title":"micro:bit — Wireless Social Distancing","tags":[],"description":"A guide to keeping at least 2m apart with Bluetooth","content":"In this workshop, we\u0026rsquo;ll be using the wireless Bluetooth radio on a micro:bit to determine how far apart two or more people are. Your micro:bit will show a frowning face until it\u0026rsquo;s at least 6 feet away from other micro:bits, then it smiles.\nTable of Contents  What is a micro:bit? \n   Broadcasting a Signal \n   Receiving a Message \n   Interpreting Signal Strength \n   Lighting it up \n   Downloading the code and trying it out \n   "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/","title":"Python: Coding with Turtle","tags":[],"description":"Learn how to draw on a canvas with Python with Turtle","content":"Introduction \nWelcome to the Nuevo Beehive! You are right on time to help our new baby bee Alex.\nAlex lives in a country named the Turtle Islands. Residents of the Turtle Islands speak a language called Python. We are going to use Python to teach Alex how to live in a beehive. Are you up for the challenge? In this tutorial, we will learn how to use the Python language to help Alex beecome a busy bee!\nTable of Contents  Sections  Using Repl.It \n   The Basics - Drawing a colored line \n   Activity 1 - Drawing a square \n   Activity 2 - Simplifying code with loops \n   Activity 3 - Drawing a hexagon \n   Activity 4 - Simplifying code with functions \n   Activity 5 - Drawing a honeycomb \n   Part 2 - Building a Mandala Flower \n   Activity 6 - Moving the turtle \n   Activity 7 - Drawing a figure 8 \n   Activity 8 - Creating a mandala flower \n   Activity 9 - Coloring your mandala flower \n   Activity 10 - Randomizing the color of your mandala flower petals \n   Activity 11 - Now, it's your turn! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/","title":"Python: Interacting with the Console","tags":[],"description":"Exploring Python&#39;s capabilities with the Console","content":"Introduction In this project, we\u0026rsquo;re going to create a fun console application that allows the user to order from a restaurant based on their menu. So go ahead and choose your favorite restaurant/fast-food place and let\u0026rsquo;s get started!\nFirst step: Open up a new Repl.it document and create a main() function definition and function call.\nNote: If you\u0026rsquo;re unfamiliar with Repl.it, take a look at the Python Turtle\u0026rsquo;s Using Repl.it page for more information.\nTable of Contents  Sections  Activity 1 - Create your Restaurant Banner \n   Activity 2 - How to Create and Store your Menu \n   Activity 6 - Show the Customer their Receipt \n   Activity 7 - Thank the Customer for their Business \n   Activity 3 - Welcome Customer to your Restaurant \u0026amp; Display Menu \n   Activity 4 - Interacting with the Customer \n   Activity 5 - Analyzing the customer's order \n    "},{"uri":"https://nuevofoundation.github.io/workshops/microbit/","title":"MicroBit: Coding with mini computers","tags":[],"description":"Using MicroBits to learn about JavaScript and hardware","content":""},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/","title":"C#: Guess The Word Game","tags":[],"description":"An introductory guide on how to make a simple Guess The Word from scratch using C#","content":"Welcome The goal of today\u0026rsquo;s activity is to learn C# skills and incorporate your new-found knowledge to create a Guess The Word game!\nTable of Contents  Sections  Starting Up \n   Writing to Console \n   Comments \n   Activity 1 - Write to console \n   Strings \n   Activity 2 - Add words to the word bank \n   Numbers \n   Booleans \n   Boolean Operators \n   Variables \n   Activity 3 - Declare your variables \n   Reading from Console \n   Activity 4 - Putting it all together \n   If-else statements \n   Activity 5 - Use conditional statements \n   While loops \n   Activity 6 - Complete the game! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/adventure/","title":"Python: Choose Your Own Adventure Game","tags":[],"description":"An introductory guide on how to make a Choose Your Own Adventure Game in Python","content":"Part 1 – Welcome! Power of Stories Hi everyone! Today we are going to be using our engineering superpowers to be the best storytellers. Stories are a great way to connect people, share traditions, and learn new things!\nTurn to your neighbor and share your favorite story! It can be a story that your family members have shared. Your favorite story line from a Marvel movie or your favorite novel.\nNow through code, we get the chance to create or re-tell amazing stories and spread our ideas further!\nChoose Your Own Adventure Games! Today you will be choosing and designing the plot of the stories that you are being told! In Choose Your Own Adventure Games you are the protagonist of the story, and you get to choose the actions that the characters are taking and the outcomes of those actions. You have control!\nDemo Let’s try it out!\n What did you all think? We’re now going to learn some cool skills that will allow us to create our own stories.\nTable of Contents  Sections  Time to Create \n   Section 1: Story Boarding \n   Section 2: Transferring the Story Board to Code! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/","title":"Python: Create music with EarSketch","tags":[],"description":"Create music using Python and EarSketch","content":"\nLet\u0026rsquo;s make some music! Welcome to this introductory guide on how to make music using EarSketch \u0026amp; Python. To jump to a particular activity, click on the section link below:\n Sections  Meet DJ Nuevo \n   Music Basics \n   Python Basics \n   Getting started with Earsketch \n   Activity 1 - Set tempo \u0026amp; add sounds \n   Activity 2 - Make a song! \n   Activity 3 - Organize your song using functions \n   Activity 4 - Add effects to your song \n   Activity 5 - Use effects to fade in \n    "},{"uri":"https://nuevofoundation.github.io/workshops/guidelines/","title":"Workshop Contributor Guidelines","tags":[],"description":"We welcome contributions. Great ways to contribute include trying things out, filing bugs, creating, and adding new workshops.","content":"We welcome contributions. Great ways to contribute include trying things out, filing bugs, creating, and adding new workshops.\nStart here Just reporting a typo or bug? You can file it as a GitHub issue.\nLooking to contribute more? Take a look at our help wanted issues to find areas to contribute to. Then, to start contributing, follow these guides:\n How the site is built  Getting Started   For content creators Interested in creating or modifying workshops? Follow the \u0026ldquo;Start here\u0026rdquo; guides above, then the following:\n Formatting  New Workshop Guidelines   For web developers Interested in improving this website? Follow the \u0026ldquo;Start here\u0026rdquo; guides above, then the following:\n Web Developer Guidelines   "},{"uri":"https://nuevofoundation.github.io/workshops/","title":"Nuevo Foundation Workshops","tags":[],"description":"","content":"Workshop Projects   Adafruit: Musical Fruit Programming An introductory guide to creating sounds using Adafruit to learn about hardware\n   Android: Tic-Tac-Toe Learn about variables, functions, and conditionals all while building a Tic-Tac-Toe Android app.\n   Arduino Build a Arduino microcontroller\n   C#: Guess The Word Game An introductory guide on how to make a simple Guess The Word from scratch using C#\n   HTML \u0026amp; CSS: Web Basics An introductory guide on how to make a simple website from scratch\n   Java: Basics An introduction to the basics of Java programming language.\n   Java: Data Structures Learn basic concepts of Java data structures\n   Java: TicTacToe Learn how to make a console based TicTacToe game in Java\n   JavaScript: Basics Basics of JavaScript\n   JS: JSappyBird Create Your Own JSappyBird Game\n   Linux Basics An introductory guide to using the Linux command line.\n   Machine Learning Basics of Machine Learning\n   micro:bit — Wireless Social Distancing A guide to keeping at least 2m apart with Bluetooth\n   Phaser: Space Shooter Game A guide to creating a Space Shooter similar to games like Space Invaders and Galaga\n   Python: Basics Learn basic concepts of using the Python programming language\n   Python: Building a Pong Game Learning To Build a Pong Game with Pygame Library\n   Python: Choose Your Own Adventure Game An introductory guide on how to make a Choose Your Own Adventure Game in Python\n   Python: Coding with Turtle Learn how to draw on a canvas with Python with Turtle\n   Python: Create music with EarSketch Create music using Python and EarSketch\n   Python: Guess the Number Game Create a simple game that asks the user to guess a randomly generated number\n   Python: Image Manipulation An introduction to manipulating images in Python\n   Python: Machine Learning Basics using TensorFlow Learn basic image classification and train ML models with TensorFlow\n   Python: Pixels Pixels and Colors in Python\n   Secret messages with C\u0026#43;\u0026#43; Learn C\u0026#43;\u0026#43; and create your own secret messages\n   Security: Gone Phishing An introductory guide to learn about phishing!\n   Spy Game An introductory guide to learn about passwords and how to create a strong one!\n   SQL Workshop Learning Basic SQL Commands\n   The Debugging Process An introduction to debugging programs\n   Unity: Top-Down Nuvi Space Game Learn the basics of Unity by creating a top-down space game\n   Workshop Contributor Guidelines We welcome contributions. Great ways to contribute include trying things out, filing bugs, creating, and adding new workshops.\n  Contributing Want to help improve our workshops or our website? See Workshop Contributor Guidelines !\n"},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/img/lab/","title":"","tags":[],"description":"","content":""},{"uri":"https://nuevofoundation.github.io/workshops/java-datastructures/lab/","title":"","tags":[],"description":"","content":""},{"uri":"https://nuevofoundation.github.io/workshops/machine-learning/fifa_linear_regression/","title":"Activity 1: FIFA Linear Regression","tags":[],"description":"Basics of Machine Learning","content":"Let\u0026rsquo;s learn some machine learning to evaluate player overall ratings in FIFA video game Machine learning is the science to study *algorithms* and *models* that enable computers to recognize things, make decisions, even predict results without explicit instructions. As an example, when talking to your phone assistant such as Siri or Cortana, machine learning helps to translate your voice into text and further understand what you requested. Is that amazing?  Today we are going to show you how to *teach* a computer evaluate overall ratings for soccer player based on their attributes step by step.  Let's get on to it! A little background  Assume that there's a formula to calculate the \"Overall\" ratings for soccer players by EA Sports (The developer of FIFA 2019). With this formula, we can easily calculate the overall ratings for any player even he/she is not in the game. The problem is, we don't know what exactly the formula looks like. We know the *input* which consists of player attributes and the *output* which is the Overall ratings. Then we can use an approach called \"regression\" to \"estimate\" the formula based on the input/output.  Today, we are going to use a simple model called Linear Regression. Let assume the formula that calculates the overall ratings of soccer player \\( y = f(x)\\) is \\[ f(x) = ax + b \\] The linear regression aims to figure out \\(a\\) and \\(b\\). The formula \\(f(x)\\) is called \"model\" in machine learning, and the process of solve/estimate the model is called \"training\" the model. Once we trained the model, we can use it to predict target \\(y\\) of new data.  Back to our story, if we only have 1 variable \\(x\\), estimate \\(f(x)\\) should be easy. Everyone should be able to solve it with a pen and a piece of paper. However, when \\(x\\) is a long list of attributes of soccer players like speed, power, passing, tackling, it becomes complicated. The formula should be rewritten into \\[ f(x_1, x_2, ..., x_n) = a_1 * x_1 + a_2 * x_2 + ... + a_n * x_n + b \\] Then we have to feed the model with a lot of high-quality data to make the model more closer to the \"real\" formula. Let's get started! Step 1: get dataset FIFA 2019 is a video soccer game. All the players in this game have an overall rating as well as a lot of attributes such as crossing, finishing, etc.\nWe are heading to the website called kaggle.com to get our dataset. FIFA19 dataset *Note: you may need to sign up to get the download link*. On this page, you can find a lot of information about this dataset, take some time to browse it and familiarize the dataset. After you download it, extract the zip file to a folder, let\u0026rsquo;s say C:\\fifa_dataset\\.\nStep 2: start the project Open jupyter notebook, new notebook \u0026gt; python 3\nAt the beginning of the file, let\u0026rsquo;s import some necessary packages.\n# Importing necessary packages import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split --------------------------------------------------------------------------- ImportError Traceback (most recent call last) \u0026lt;ipython-input-2-122d997e4faf\u0026gt; in \u0026lt;module\u0026gt;() 1 # Importing necessary packages ----\u0026gt; 2 import pandas as pd 3 import numpy as np 4 import matplotlib.pyplot as plt 5 from sklearn.linear_model import LinearRegression ImportError: No module named pandas  Step 3: load dataset Change mypath to the folder you extract the dataset file (i.e., C:\\fifa_dataset\\). To verify we loaded it successfully, we use a function called describe() to print its statistics.\n# load datasets mypath = \u0026#34;C:/Users/ruilliu/Documents/nuevo_lr_fifa/\u0026#34; # change it to your own path fifa_data = pd.read_csv(mypath+\u0026#34;data.csv\u0026#34;) fifa_data.describe() --------------------------------------------------------------------------- NameError Traceback (most recent call last) \u0026lt;ipython-input-3-f099c0f24a52\u0026gt; in \u0026lt;module\u0026gt;() 1 # load datasets 2 mypath = \u0026quot;C:/Users/ruilliu/Documents/nuevo_lr_fifa/\u0026quot; # change it to your own path ----\u0026gt; 3 fifa_data = pd.read_csv(mypath+\u0026quot;data.csv\u0026quot;) 4 fifa_data.describe() NameError: name 'pd' is not defined  Step 4: Pre-process data By now, we have imported our dataset. In real life, each soccer player has a specific position. Different positions require strength in different attributes. So let\u0026rsquo;s narrow down the scope to the striker. First, let\u0026rsquo;s list all the positions. This statement looks a little bit longer, but it does the work. The fifa_data['position'] selects position column of the fifa_data, the dropna() eliminates cells that are blank, and unique() remove all duplicated items for us.\n# to find out how many positions are there print(fifa_data[\u0026#39;Position\u0026#39;].dropna().unique()) ['RF' 'ST' 'LW' 'GK' 'RCM' 'LF' 'RS' 'RCB' 'LCM' 'CB' 'LDM' 'CAM' 'CDM' 'LS' 'LCB' 'RM' 'LAM' 'LM' 'LB' 'RDM' 'RW' 'CM' 'RB' 'RAM' 'CF' 'RWB' 'LWB']  Now we can filter data by position \u0026ldquo;ST\u0026rdquo;. You\u0026rsquo;re encouraged to select other positions to see what\u0026rsquo;s the difference.\n# get players by position fifa_data_by_pos = fifa_data[fifa_data[\u0026#39;Position\u0026#39;]==\u0026#39;ST\u0026#39;] Let\u0026rsquo;s plot a histogram for overall ratings of all strikers.\nplt.hist(x=fifa_data_by_pos[target], bins=10, alpha=0.75, rwidth=0.85) (array([ 40., 186., 363., 463., 601., 341., 113., 34., 9., 2.]), array([47. , 51.7, 56.4, 61.1, 65.8, 70.5, 75.2, 79.9, 84.6, 89.3, 94. ]), \u0026lt;a list of 10 Patch objects\u0026gt;)  Next, we want to split the data into two sets, one is used to train the model, another one is used to verify the trained model is good.\nYou may think, we should leave as much as possible data for training because it makes the model better. The model fits better, but only for training datasets. When you apply the model to testing data, the prediction accuracy could go down. This is called \u0026ldquo;overfitting\u0026rdquo;.\nNow, we leave 25% of the data for testing.\n# split data into train_data and test_data randomly # you\u0026#39;re weclome to change the ratio of test_size to see what will happen train_data, test_data = train_test_split(fifa_data_by_pos,test_size=0.25) # print the number of players in train_data and test_data # len() gives you the number of players in numerical format # str() converts numerical value into string print(\u0026#34;The # of training data is \u0026#34; + str(len(train_data))) print(\u0026#34;The # of testing data is \u0026#34; + str(len(test_data))) The # of training data is 1614 The # of testing data is 538  Step 5: feature selection Our next step is selecting proper features. Feature selection is a term in machine learning to describe the method and process of choosing relevant features for the model. A feature is one (x) in the formula. In our story, it is an attribute of a soccer player.\nSince we are using the linear regression model, how attribute correlated to the target (\u0026ldquo;Overall\u0026rdquo;) becomes the criteria to choose the right features.\nWe use a built-in function correlation corr to Compute pairwise correlation of columns. There are three methods we can choose from,\n pearson : standard correlation coefficient kendall : Kendall Tau correlation coefficient spearman : Spearman rank correlation  In this tutorial we use pearson.\n# select target target = \u0026#34;Overall\u0026#34; # To find the correlation among the columns using pearson method  feature_corr = train_data.corr(method =\u0026#39;pearson\u0026#39;) [target] # sort the features feature_corr = feature_corr.sort_values(ascending = False) # show the top 20 features # note that we are start from 1 not zero, because Overall is alwasy on the top of the list print(feature_corr[1:21]) Positioning 0.904367 Special 0.903856 Finishing 0.899783 BallControl 0.896988 ShotPower 0.877842 Reactions 0.861441 Volleys 0.834433 Composure 0.827529 ShortPassing 0.813074 Dribbling 0.802565 LongShots 0.794059 HeadingAccuracy 0.711129 Vision 0.671054 Skill Moves 0.649300 Curve 0.641426 Crossing 0.603249 Potential 0.593139 Penalties 0.583906 LongPassing 0.575092 FKAccuracy 0.569704 Name: Overall, dtype: float64  Now, we can copy and paste the top 10 or top 12 features. (Note: Please don\u0026rsquo;t copy the space)\n# select some features features = [\u0026#34;Positioning\u0026#34;, \u0026#34;Finishing\u0026#34;, \u0026#34;Special\u0026#34;, \u0026#34;BallControl\u0026#34;, \u0026#34;ShotPower\u0026#34;, \u0026#34;Reactions\u0026#34;, \u0026#34;Volleys\u0026#34;, \u0026#34;Composure\u0026#34;, \u0026#34;ShortPassing\u0026#34;] Also, we can just extract the feature names from the index. Note that, we start from 1 because we do not want include overall who is alwasy on the top of the list.\n# extract feature names from the series features = feature_corr[1:21].index.tolist() # show the features print(features) ['Positioning', 'Special', 'Finishing', 'BallControl', 'ShotPower', 'Reactions', 'Volleys', 'Composure', 'ShortPassing', 'Dribbling', 'LongShots', 'HeadingAccuracy', 'Vision', 'Skill Moves', 'Curve', 'Crossing', 'Potential', 'Penalties', 'LongPassing', 'FKAccuracy']  Step 6: train the model Now we are ready to train the model. we use \u0026lsquo;LinearRegression().fit()\u0026rsquo; to train it. and this model object has a score() function to return the score of the model, which is the coefficient of determination R^2 of the prediction. For now you only need to know the higher the better.\n# prepare training data x_train = train_data[features] y_train = train_data[target] # Applying Linear regression # fit() is the method to train the model model = LinearRegression().fit(x_train,y_train) # Model\u0026#39;s score print(\u0026#34;Score: \u0026#34; + str(model.score(x_train,y_train))) Score: 0.9875123836174596  Step 7: try the model on testing data Now we are using the trained model to estimate players in test_data. Similar to what we do to the train_data, we create x_test and y_test.\nmodel.predict() will generate a list of predicted results.\n# we would like to sort test data on target value (\u0026#34;Overall\u0026#34;) test_data = test_data.sort_values([target], ascending=False) x_test = test_data[features] y_test = test_data[target] y_pred = model.predict(x_test) Let\u0026rsquo;s compare with the actual overall ratings\n# add a new column of predicted overall to test_data test_data[\u0026#39;Predicted Overall\u0026#39;] = y_pred.copy() # add a new column of prediction difference ratio to test_data difference = (y_pred - y_test) / y_test * 100 test_data[\u0026#39;Difference (%)\u0026#39;] = difference # print the results test_data[[\u0026#34;Name\u0026#34;, \u0026#34;Nationality\u0026#34;, \u0026#34;Club\u0026#34;, \u0026#34;Overall\u0026#34;, \u0026#34;Predicted Overall\u0026#34;, \u0026#34;Difference (%)\u0026#34;]]  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Name Nationality Club Overall Predicted Overall Difference (%)     1 Cristiano Ronaldo Portugal Juventus 94 91.973701 -2.155638   10 R. Lewandowski Poland FC Bayern München 90 88.135513 -2.071652   23 S. Agüero Argentina Manchester City 89 87.807637 -1.339733   48 C. Immobile Italy Lazio 87 85.933234 -1.226168   159 Louri Beretta Brazil Atlético Mineiro 83 81.583941 -1.706096   193 Rodrigo Spain Valencia CF 83 81.784946 -1.463921   179 S. Gnabry Germany FC Bayern München 83 79.978980 -3.639783   315 David Villa Spain New York City FC 82 81.259066 -0.903578   362 Paco Alcácer Spain Borussia Dortmund 81 81.836532 1.032756   518 Alexandre Pato Brazil Tianjin Quanjian FC 80 78.322831 -2.096461   499 L. de Jong Netherlands PSV 80 79.993062 -0.008672   523 K. Gameiro France Valencia CF 80 79.130702 -1.086622   721 B. Yılmaz Turkey Trabzonspor 79 78.092396 -1.148866   693 S. Jovetić Montenegro AS Monaco 79 79.353044 0.446891   591 L. Alario Argentina Bayer 04 Leverkusen 79 79.066446 0.084109   569 André Silva Portugal Sevilla FC 79 79.925229 1.171175   588 M. Philipp Germany Borussia Dortmund 79 78.962674 -0.047248   561 L. Martínez Argentina Inter 79 79.411940 0.521443   874 A. Dzyuba Russia NaN 78 76.855093 -1.467829   825 S. García Uruguay Godoy Cruz 78 77.375588 -0.800528   909 V. Germain France Olympique de Marseille 77 77.509005 0.661045   1095 N. Jørgensen Denmark Feyenoord 77 76.745918 -0.329976   992 J. Sand Argentina Deportivo Cali 77 78.886169 2.449570   1137 Rubén Castro Spain UD Las Palmas 77 77.797984 1.036343   895 M. Harnik Austria SV Werder Bremen 77 76.926679 -0.095222   1413 Alan Carvalho Brazil Guangzhou Evergrande Taobao FC 76 75.922866 -0.101492   1327 K. Dolberg Denmark Ajax 76 76.060831 0.080041   1496 F. Montero Colombia Sporting CP 76 77.017187 1.338404   1240 I. Popov Bulgaria Spartak Moscow 76 75.734350 -0.349540   1357 I. Slimani Algeria Fenerbahçe SK 76 76.494507 0.650667   ... ... ... ... ... ... ...   17484 J. Lankester England Ipswich Town 54 56.121884 3.929415   17469 J. Gallagher Republic of Ireland Atlanta United 54 54.692444 1.282304   17501 M. Saavedra Chile Audax Italiano 54 54.137463 0.254561   17361 E. McKeown England Colchester United 54 52.796085 -2.229473   17399 Mao Haoyu China PR Tianjin TEDA FC 54 53.964477 -0.065783   17313 M. Howard England Preston North End 54 53.339370 -1.223389   17355 V. Barbero Argentina Belgrano de Córdoba 54 54.011344 0.021008   17422 Y. Ogaki Japan Nagoya Grampus 54 54.041024 0.075970   17447 Xie Weijun China PR Tianjin TEDA FC 54 53.452376 -1.014118   17367 T. Lauritsen Norway Odds BK 54 54.944641 1.749336   17482 F. Al Birekan Saudi Arabia Al Nassr 54 52.727175 -2.357084   17609 S. Jamieson Scotland St. Mirren 53 53.509650 0.961604   17716 M. Knox Scotland Livingston FC 53 52.826053 -0.328201   17578 Lei Wenjie China PR Shanghai SIPG FC 53 52.770581 -0.432867   17665 J. Smylie Australia Central Coast Mariners 53 52.469974 -1.000049   17611 Felipe Ferreyra Brazil Curicó Unido 53 52.861431 -0.261451   17765 A. Georgiou Cyprus Stevenage 52 52.167786 0.322665   17757 L. Smyth Northern Ireland Stevenage 52 51.999942 -0.000111   17923 A. Reghba Republic of Ireland Bohemian FC 51 51.075501 0.148041   17956 C. Murphy Republic of Ireland Cork City 51 51.731985 1.435265   17971 M. Najjar Australia Melbourne City FC 51 51.035541 0.069688   18013 W. Møller Denmark Esbjerg fB 51 50.796960 -0.398118   18062 Gao Dalun China PR Jiangsu Suning FC 50 49.677371 -0.645259   18094 M. Al Dhafeeri Saudi Arabia Al Batin 50 51.553964 3.107928   18063 R. Hackett-Fairchild England Charlton Athletic 50 50.140762 0.281524   18028 D. Asonganyi England Milton Keynes Dons 50 50.349896 0.699792   18140 K. Hawley England Morecambe 49 49.787332 1.606799   18166 N. Ayéva Sweden Örebro SK 48 48.802935 1.672781   18177 R. Roache Republic of Ireland Blackpool 48 49.226015 2.554197   18200 J. Young Scotland Swindon Town 47 48.019387 2.168908    538 rows × 6 columns\n Is that amazing? With the result, you\u0026rsquo;re confident to use this model to estimate the overall ratings of any soccer player in the world!\nNow let\u0026rsquo;s do some plotting to visualize it.\n# Plot outputs plt.scatter(range(0,y_test.shape[0]), y_test, color=\u0026#39;blue\u0026#39;, label=\u0026#34;Actual\u0026#34;) plt.plot(range(0,y_test.shape[0]), y_pred, color=\u0026#39;red\u0026#39;, label=\u0026#34;Predicted\u0026#34;) # add ticks, labels, legend plt.xticks(()) plt.xlabel(\u0026#34;Players (Sorted by Actual Overall ratings)\u0026#34;) plt.ylabel(\u0026#34;Overall ratings\u0026#34;) plt.legend(loc=\u0026#39;upper right\u0026#39;) plt.show() Conclusion Well done! You did it!\nNext, you can play with this dataset a little bit.\n Try to select players in another position, i.e., goalkeeper (\u0026ldquo;GK\u0026rdquo;), what features will be the top correlated ones? what will be the features you selected? Change the features you selected, will it change the model prediction results? Change the ratio of training/testing data, see what will happen. Change the target variable, for example, \u0026lsquo;Value\u0026rsquo; or \u0026lsquo;Wage\u0026rsquo;. Try to figure out how to convert the content to numerical value (hint: 50k = 50 * 1000, 10M = 10 * 1000 * 1000.  In today\u0026rsquo;s class, you learned how to train a linear regression model to estimate the overall ratings of a soccer player. We hope you enjoyed it and have inspired a little.\nFrom now, you can explore the kaggle website, try to find another dataset to play. Apply linear regression to predict/estimate the results. You\u0026rsquo;ll be amazed by what you can be done.\n"},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/","title":"Adafruit: Musical Fruit Programming","tags":[],"description":"An introductory guide to creating sounds using Adafruit to learn about hardware","content":"Table of Contents Section  The Components \n   Building the DJ station \n   Creating the Program \n   Downloading your program \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/answer-key/","title":"Answer key - Python-Pixel","tags":[],"description":"","content":"Activity1 This is the sample answer for creating a blue color board with width 100 and height 100.\nfrom PIL import Image width=100 height=100 color=\u0026#39;blue\u0026#39; img = Image.new(\u0026#39;RGB\u0026#39;, (width, height), color) img.save(\u0026#39;pixel-activity1.png\u0026#39;) Activity2 This is the sample answer to draw a line from the middle of the color board from Activity1 to its bottom right corner.\n#Create your color board from PIL import Image # setup image first img = Image.new(\u0026#39;RGB\u0026#39;, (60, 30), \u0026#39;red\u0026#39;) initial_position_x = 50 initial_position_y = 50 width = 100 height = 100 color = (0,0,0) #make change here while initial_position_x \u0026lt; width: while initial_position_y \u0026lt; height: img.putpixel( (x,y), color) initial_position_x += 1 initial_position_y += 1 img.save(\u0026#39;pixel-activity2.png\u0026#39;) Activity3 This is the sample answer to create a H which is colorful. Refer image to this: from PIL import Image img = Image.new(\u0026#39;RGB\u0026#39;, (60, 30), \u0026#39;pink\u0026#39;) #This uses nested while loop to change the colorboard. for x in range(10, 15): for y in range(5, 25): img.putpixel( (x,y), (255, 255, 255)) for x in range(30, 35): for y in range(5, 25): img.putpixel( (x,y), (255, 255, 255)) for y in range(12,17 ): for x in range(15, 30): img.putpixel( (x,y), (255, 230, 20)) img.save(\u0026#39;pixel-activity3.png\u0026#39;) Activity4 This is the sample answer to create a green filter.\nfrom PIL import Image #Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;); #Blue filters for i in range(img.size[0]): # for every col: for j in range(img.size[1]): # For every row color = img.getpixel( (i,j) ) img.putpixel((i,j),(0, color[1], 0))# set the colour accordingly #Save the cat after filtering img.save(\u0026#34;Mycat.png\u0026#34;) Activity5 This is the sample answer to create a grey filter for the left half of the cat.\nfrom PIL import Image #Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) #Grey filters for i in range((img.size[0] // 2)): #for first-half cols: for j in range((img.size[1]): color = img.getpixel( (i,j) ) #Highlight: Get color: GREY GREY = (color[0] + color[1] + color[2]) // 3 img.putpixel((i,j),(GREY, GREY, GREY))# set the color accordingly #Save the cat after filtering img.save(\u0026#34;Mycat.png\u0026#34;) Activity6 This is the sample answer to crop the right half of the cat.\nfrom PIL import Image #Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) width=img.size[0] height=img.size[1] #Set up a new image with the half width and height newimg=Image.new(\u0026#39;RGB\u0026#39;,(width//2, height) ) #Set the pixel for the new image for i in range(width//2, width): for j in range(height): # For every row color = img.getpixel( (i,j) ) #get the color from original image newimg.putpixel((i,j),color)# put the color into new image newimg.save(\u0026#34;Mycat.png\u0026#34;) Activity7 This is the sample answer to change the background color from yellow to black.\nnewcolor=(0,0,0) coloryellow=img.getpixel( (0,0) ) for i in range(width): for j in range(height): color = img.getpixel( (i,j) ) #get the color from original image if color == coloryellow: #if it is yellow newimg.putpixel((i,j),newcolor)# change the color to black else: newimg.putpixel((i,j),color)# else stays the same newimg.save(\u0026#34;newnuevo.png\u0026#34;) Activity8 This is the sample answer to flip your cat from left to right.\nfrom PIL import Image #Open the cat image img = Image.open(\u0026#34;cat.png\u0026#34;) width=img.size[0] height=img.size[1] #Set up a new image with the half width and height newimg=Image.new(\u0026#39;RGB\u0026#39;,(width,height) ) #Set the pixel for the new image for i in range(width): for j in range(height): # For every row widthNew = width - 1 - i#What should your widthNew be if we want to flip our image from left to right? color = img.getpixel( (widthNew, j) ) #get the color from original image newimg.putpixel((i,j),color)# put the color into new image newimg.save(\u0026#34;Mycat.png\u0026#34;) Activity9 This is the sample answer to rotate your cat 90 degree counter-clock-wise!.\nimg = Image.open(\u0026#34;cat.png\u0026#34;) width=img.size[0] height=img.size[1] #Set up a new image with the half width and height newimg=Image.new(\u0026#39;RGB\u0026#39;,(height,width) ) #Set the pixel for the new image for i in range(width): # For every col for j in range(height): # For every row color = img.getpixel( (i, j) ) #get the color from original image newimg.putpixel((j, i),color) # put the color into new image newimg.save(\u0026#34;Mycat.png\u0026#34;) "},{"uri":"https://nuevofoundation.github.io/workshops/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://nuevofoundation.github.io/workshops/engdesign-distance/","title":"Engineering Design - DISTANCE","tags":[],"description":"An introduction to engineering design","content":"The goal of the workshop is to have students understand how engineers create real life projects through a procedure called the Design Process. The students will learn what the Design Process is, how it is used, and its purpose and relevance towards creating big projects. Upon learning the basics, the students will visualize the Design Process through a fictional and virtual racing competition, called DISTANCE. Using the Design Process will assist students to design an important part for their “racecar”, where they get to briefly experience the thought processes of an actual engineer!\nNote that the students will not be actually physically building anything throughout this workshop, this activity simply provides a fictional simulation through a programming language called MATLAB (TO FIX).\nThe San Diego Student Racing Competition (DISTANCE): The San Diego Student Racing Competition (DISTANCE) is a fictional student racing competition that takes place every year during the summer in San Diego, California. This “competition” is meant to have students visualize and experience the engineering concepts they will learn in this workshop. DISTANCE invites teams consisting of highschool students across the county to create their own cars from the provided resources and budget of their school. You are a member of your school’s racing car team, and you have been invited to participate in this exclusive competition. Of course, building a car from scratch consists of many components: body, engine, transmission electrical work, interior, etc. Before any actual hands on work begins, the first phase is to do research and go through the Design Process to think of what kind of car they want to create.\nTable of Contents  "},{"uri":"https://nuevofoundation.github.io/workshops/machine-learning/","title":"Machine Learning","tags":[],"description":"Basics of Machine Learning","content":"Table of Contents  Activity 1: FIFA Linear Regression \n   "},{"uri":"https://nuevofoundation.github.io/workshops/python-pixel/","title":"Python: Pixels","tags":[],"description":"Pixels and Colors in Python","content":"Python Pixels  Python: Colors and Pixels \n  Import an image module \n Open an image \n Basics of colors \n Pixels on an Image \n Access pixels on image \n  Python: Pixel Activties \n  Activity 1: Create a color board \n Activity 2: Modify your color board \n Activity 3: Challenge: Design new elements \n Activity 4: Create Basic Filter \n Activity 5: More advanced filters \n Activity 6: Crop Image \n Activity 7: Change the background of image \n Activity 8: Flip your image \n Activity 9: Rotate your image \n Activity 10: Making a meme! \n Activity 11: Challenge: Make your own image \n  "},{"uri":"https://nuevofoundation.github.io/workshops/security-phishing/","title":"Security: Gone Phishing","tags":[],"description":"An introductory guide to learn about phishing!","content":"Table of Contents  Bob goes fishing \n   Phishing Basics \n   A closer look \n   More about phishing \n   What's Phishy? \n   Summary \n   "},{"uri":"https://nuevofoundation.github.io/workshops/security/","title":"Spy Game","tags":[],"description":"An introductory guide to learn about passwords and how to create a strong one!","content":"Table of Contents  Meeting Alice, Bob and Eve \n   Password Basics \n   Activity \n   Spy Game \n   Summary \n   "},{"uri":"https://nuevofoundation.github.io/workshops/tags/","title":"Tags","tags":[],"description":"","content":""}]