<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java: Basics on Nuevo Foundation Workshops</title><link>https://nuevofoundation.github.io/workshops/java-basics/</link><description>Recent content in Java: Basics on Nuevo Foundation Workshops</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nuevofoundation.github.io/workshops/java-basics/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Repl.It</title><link>https://nuevofoundation.github.io/workshops/java-basics/activity-0/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/activity-0/</guid><description>Using Repl.it Today you will be using Replit to learn how to code in Java. Here is an example interactive window that you will use today:
Before we start, let&amp;rsquo;s first understand how the window works. The Main.java file contains code, or instructions for the computer to run. By pressing the run button (the green button with the triangle in the middle at the top of the frame), you tell the computer to perform the instructions in the code.</description></item><item><title>Print Statements and Comments</title><link>https://nuevofoundation.github.io/workshops/java-basics/activity-1/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/activity-1/</guid><description>Let the Program Speak! Let‚Äôs try to write a program that says Hello World out by typing the line of code System.out.print(&amp;quot;Hello World&amp;quot;);
The program prints out whatever you typed in the parenthesis of System.out.print. And, each line of code ends with ;.
After, add more statements to print numbers by putting numbers in the parenthesis (i.e. System.out.print(2020)) or a symbol by putting one symbol between 2 single quotes ' (i.</description></item><item><title>Variables and Types</title><link>https://nuevofoundation.github.io/workshops/java-basics/activity-2/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/activity-2/</guid><description>Variables: Name It! In the last exercise, we learned to print different statements with System.out.print().
While it&amp;rsquo;s great to print out a number or a sentence, we haven&amp;rsquo;t given them a meaning.
In Java, we introduce the idea of a variable for data. A variable is like a box that stores a piece of data with a name.
For example, there can be a variable called myName that stored &amp;quot;Patrick&amp;quot;, another variable called loveMusic that stored true, and another variable called age that stored 3.</description></item><item><title>Operators</title><link>https://nuevofoundation.github.io/workshops/java-basics/activity-3/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/activity-3/</guid><description>Let&amp;rsquo;s do Math: Arithmetic Operator In the last exercise, we learned about variables and how we can assign values to a variable of a specific type, such as:
int age = 3; // declare variable age of type int with value 3 age = 4; // assign 4 to the variable age Looking at the code above, it essentially adds 1 to the value of the variable age.
And, in Java, we can perform math operations on variables directly with arithmetic operators: +, -, *, /, %.</description></item><item><title>Control Structures</title><link>https://nuevofoundation.github.io/workshops/java-basics/activity-4/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/activity-4/</guid><description>Make a Decision: If-Statement Patrick üê• is a very polite duck who likes to greet everyone he meets with &amp;ldquo;Good Morning,&amp;rdquo; &amp;ldquo;Good Afternoon,&amp;rdquo; or &amp;ldquo;Good Night&amp;rdquo; depending on the current time.
(image by National Geographic: giphy.com/natgeochannel)
As we learned before, we can print these statements as below:
System.out.println(&amp;#34;Good Morning&amp;#34;); // say it between 0:00 - 11:59 System.out.println(&amp;#34;Good Afternoon&amp;#34;); // say it between 12:00 - 19:59 System.out.println(&amp;#34;Good Night&amp;#34;); // say it between 20:00 - 23:59 However, we also know Patrick üê• should only decide to say one of these statements based on the current time.</description></item><item><title>Methods</title><link>https://nuevofoundation.github.io/workshops/java-basics/activity-5/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/activity-5/</guid><description>What is a Method? So far, we&amp;rsquo;ve learned about how to store data in variables, print data and sentences, and make decisions with if-statement, for-loop, and while-loop.
From the last exercise, we know the following block of code calculates the sum from 1 to 100:
int total = 0; int num = 1; while(num &amp;lt;= 100){ total = total + num; num = num + 1; } System.out.println(&amp;#34;Sum: &amp;#34; + total); But what if we want to calculate the sum from 1 to 77 instead?</description></item><item><title>Object and Classes</title><link>https://nuevofoundation.github.io/workshops/java-basics/activity-6/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/activity-6/</guid><description>What is an Object and a Class? An object is an thing (noun) that has certain characteristics and can perform certain tasks. A Class is the blueprint or definition for that object.
An example is a Person. A Person is Class. A person can have certain characteristics that distinguish it from another person. It can have blue eyes, it can be 30 years old, etc. A person can also perform certain tasks.</description></item><item><title>Data Structures (Array &amp; ArrayList)</title><link>https://nuevofoundation.github.io/workshops/java-basics/activity-7/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/activity-7/</guid><description>In previous exercises, we learned that variables allow us to access and store a piece data. But, what if we want to store a bunch of similiar data? Is there a good way to organize them without declaring multiple variables?
In programming, data structures are elements that allow coders to store multiple pieces of data of the same type. Using data structures is an efficient way to store and access large pieces of data.</description></item><item><title>Java: Basics - Answer Key</title><link>https://nuevofoundation.github.io/workshops/java-basics/answer-key/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://nuevofoundation.github.io/workshops/java-basics/answer-key/</guid><description>activity-1: Print Statements and Comments Hello World class Main { public static void main(String[] args) { System.out.print(&amp;#34;Hello World&amp;#34;); System.out.print(2020); System.out.print(&amp;#39;@&amp;#39;); } } Output:
Hello World2020@ Owl class Main { public static void main(String[] args) { System.out.println(&amp;#34;Hello world!&amp;#34;); System.out.println(&amp;#34; ‚Äã, ___ / ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ ‚Äæ \\&amp;#34;); System.out.println(&amp;#34;‚Äã`\\/{o,o} &amp;lt; Hi, I am Minerva. Patrick&amp;#39;s friend! |&amp;#34;); System.</description></item></channel></rss>